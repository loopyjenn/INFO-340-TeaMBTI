[
  {
    "description": "CloneElement is a wrapper component for createElement function.\nThis allows you to describe your cloning element declaratively\nwhich is a more natural API for React.",
    "displayName": "CloneElement",
    "methods": [],
    "props": {
      "element": {
        "required": true,
        "tsType": {
          "name": "any"
        },
        "description": ""
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": ""
      },
      "childRef": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": ""
      }
    }
  },
  {
    "description": "",
    "displayName": "DataSize",
    "methods": [],
    "props": {
      "value": {
        "required": true,
        "tsType": {
          "name": "FormatSizeTypes"
        },
        "description": "The size value to render."
      },
      "emptyValue": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "If the value is undefined/null it will return this value."
      },
      "scale": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "string[]"
        },
        "description": "Customize scale for displaying units."
      },
      "decimals": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "The number of decimals to be set."
      }
    }
  },
  {
    "description": "",
    "displayName": "DateFormat",
    "methods": [],
    "props": {
      "allowToggle": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Allow the user to toggle between relative and absolute time.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "cacheKey": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The cache key to use for storing the user's preference."
      },
      "date": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "Date | null | number | string",
          "elements": [
            {
              "name": "Date"
            },
            {
              "name": "null"
            },
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "description": "The date to format."
      },
      "format": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The format to use.",
        "defaultValue": {
          "value": "'MM/dd/yy hh:mm:ss a'",
          "computed": false
        }
      },
      "fromNow": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to use relative time."
      },
      "addSuffix": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to add a suffix to the relative time.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional CSS class names to use."
      },
      "includeSeconds": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to include seconds in the relative time.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "emptyMessage": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The message to display when the date is empty. Default is \"N/A\".",
        "defaultValue": {
          "value": "'N/A'",
          "computed": false
        }
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "DateFormatTheme"
        },
        "description": "Theme for the DateFormat."
      }
    }
  },
  {
    "description": "",
    "displayName": "Duration",
    "methods": [],
    "props": {
      "value": {
        "required": true,
        "tsType": {
          "name": "DurationFormatTypes"
        },
        "description": "Size to pass to the formatter."
      },
      "emptyValue": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "If the value is undefined/null it will return this value.",
        "defaultValue": {
          "value": "'N/A'",
          "computed": false
        }
      }
    }
  },
  {
    "description": "",
    "displayName": "Ellipsis",
    "methods": [],
    "props": {
      "value": {
        "required": true,
        "tsType": {
          "name": "string"
        },
        "description": "The value to ellipsis."
      },
      "expandable": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether you can expand or not. Default: true.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "limit": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "Limit of characters to show. Default: 256.",
        "defaultValue": {
          "value": "256",
          "computed": false
        }
      },
      "title": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "string | false",
          "elements": [
            {
              "name": "string"
            },
            {
              "name": "literal",
              "value": "false"
            }
          ]
        },
        "description": "The title text to show on the hover."
      },
      "removeLinebreaks": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Remove line breaks or not.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Class name for the container."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "EllipsisTheme"
        },
        "description": "Theme for the Ellipsis."
      }
    }
  },
  {
    "description": "",
    "displayName": "InfinityList",
    "methods": [],
    "props": {
      "children": {
        "required": true,
        "tsType": {
          "name": "any"
        },
        "description": "The children to filter."
      },
      "buttonClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "CSS Classname to apply to the button."
      },
      "size": {
        "defaultValue": {
          "value": "10",
          "computed": false
        },
        "required": false
      },
      "threshold": {
        "defaultValue": {
          "value": "3",
          "computed": false
        },
        "required": false
      }
    },
    "composes": [
      "Omit"
    ]
  },
  {
    "description": "",
    "displayName": "Pager",
    "methods": [],
    "props": {
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The class name to add to the pager."
      },
      "pageClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The class name to add to the page buttons."
      },
      "activePageClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The class name for the active page button."
      },
      "pagesContainerClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The class name to add to the pages container."
      },
      "page": {
        "required": true,
        "tsType": {
          "name": "number"
        },
        "description": "The current page number."
      },
      "size": {
        "required": true,
        "tsType": {
          "name": "number"
        },
        "description": "The number of items per page."
      },
      "total": {
        "required": true,
        "tsType": {
          "name": "number"
        },
        "description": "The total number of items."
      },
      "previousArrow": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "ReactNode | string",
          "elements": [
            {
              "name": "ReactNode"
            },
            {
              "name": "string"
            }
          ]
        },
        "description": "The React node or string to use for the previous arrow.",
        "defaultValue": {
          "value": "<PreviousArrow />",
          "computed": false
        }
      },
      "nextArrow": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "ReactNode | string",
          "elements": [
            {
              "name": "ReactNode"
            },
            {
              "name": "string"
            }
          ]
        },
        "description": "The React node or string to use for the next arrow.",
        "defaultValue": {
          "value": "<NextArrow />",
          "computed": false
        }
      },
      "startArrow": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "ReactNode | string",
          "elements": [
            {
              "name": "ReactNode"
            },
            {
              "name": "string"
            }
          ]
        },
        "description": "The React node or string to use for the start arrow.",
        "defaultValue": {
          "value": "<StartArrow />",
          "computed": false
        }
      },
      "endArrow": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "ReactNode | string",
          "elements": [
            {
              "name": "ReactNode"
            },
            {
              "name": "string"
            }
          ]
        },
        "description": "The React node or string to use for the end arrow.",
        "defaultValue": {
          "value": "<EndArrow />",
          "computed": false
        }
      },
      "onPageChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(page: number) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "number"
                },
                "name": "page"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "A callback function that is called when the page changes."
      },
      "displayMode": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'pages' | 'items' | 'all'",
          "elements": [
            {
              "name": "literal",
              "value": "'pages'"
            },
            {
              "name": "literal",
              "value": "'items'"
            },
            {
              "name": "literal",
              "value": "'all'"
            }
          ]
        },
        "description": "The type of table data for the pager to display.",
        "defaultValue": {
          "value": "'pages'",
          "computed": false
        }
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "PagerTheme"
        },
        "description": "The theme for the Pager."
      }
    }
  },
  {
    "description": "",
    "displayName": "Pluralize",
    "methods": [],
    "props": {
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "CSS classname for the span element."
      },
      "count": {
        "defaultValue": {
          "value": "0",
          "computed": false
        },
        "required": false
      },
      "showCount": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      }
    },
    "composes": [
      "PluralizeInputs"
    ]
  },
  {
    "description": "",
    "displayName": "Redact",
    "methods": [],
    "props": {
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Classname of the element."
      },
      "allowToggle": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether you can toggle the text or not.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "compactLength": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "Number of characters to compact to.",
        "defaultValue": {
          "value": "8",
          "computed": false
        }
      },
      "character": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The character to replace the text with.",
        "defaultValue": {
          "value": "'*'",
          "computed": false
        }
      },
      "tooltipText": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Text to show upon hover.",
        "defaultValue": {
          "value": "'Click to toggle sensitive content'",
          "computed": false
        }
      },
      "value": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Value to conceal."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "RedactTheme"
        },
        "description": "The theme for the Redact."
      }
    }
  },
  {
    "description": "",
    "displayName": "DownArrowIcon",
    "methods": [],
    "props": {
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      }
    }
  },
  {
    "description": "",
    "displayName": "Sort",
    "methods": [],
    "props": {
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional css classnames to apply"
      },
      "iconClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional css classnames to apply to the icon"
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the sort is disabled"
      },
      "direction": {
        "required": false,
        "tsType": {
          "name": "SortDirection"
        },
        "description": "The current sort direction"
      },
      "onSort": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(direction: SortDirection) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "SortDirection"
                },
                "name": "direction"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "The callback to call when the sort is toggled"
      },
      "icon": {
        "required": false,
        "tsType": {
          "name": "ReactComponentType",
          "raw": "React.ComponentType<{ className?: string }>",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{ className?: string }",
              "signature": {
                "properties": [
                  {
                    "key": "className",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  }
                ]
              }
            }
          ]
        },
        "description": "The icon to display",
        "defaultValue": {
          "value": "DownArrowIcon",
          "computed": true
        }
      },
      "neutralIcon": {
        "required": false,
        "tsType": {
          "name": "ReactComponentType",
          "raw": "React.ComponentType<{ className?: string }>",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{ className?: string }",
              "signature": {
                "properties": [
                  {
                    "key": "className",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  }
                ]
              }
            }
          ]
        },
        "description": "The neutral icon to display."
      },
      "neutralIconClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional css classnames to apply to the neutral icon."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "SortTheme"
        },
        "description": "Theme for the Sort."
      }
    },
    "composes": [
      "PropsWithChildren"
    ]
  },
  {
    "description": "",
    "displayName": "Arrow",
    "methods": [],
    "props": {
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "CSS Classname to apply to the arrow"
      },
      "direction": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'up' | 'right' | 'down' | 'left'",
          "elements": [
            {
              "name": "literal",
              "value": "'up'"
            },
            {
              "name": "literal",
              "value": "'right'"
            },
            {
              "name": "literal",
              "value": "'down'"
            },
            {
              "name": "literal",
              "value": "'left'"
            }
          ]
        },
        "description": "The direction of the arrow",
        "defaultValue": {
          "value": "'down'",
          "computed": false
        }
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "ArrowTheme"
        },
        "description": "Theme for the Arrow."
      }
    }
  },
  {
    "description": "",
    "displayName": "Avatar",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": {
          "value": "24",
          "computed": false
        },
        "required": false
      },
      "variant": {
        "defaultValue": {
          "value": "'filled'",
          "computed": false
        },
        "required": false
      },
      "rounded": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      }
    }
  },
  {
    "description": "",
    "displayName": "AvatarGroup",
    "methods": [],
    "props": {
      "children": {
        "required": true,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": "The avatars to display in the group."
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional CSS classes to apply to the avatar group"
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "The maximum number of avatars to show before +x more",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "AvatarGroupTheme"
        },
        "description": "Theme for the AvatarGroup"
      }
    }
  },
  {
    "description": "",
    "displayName": "Badge",
    "methods": [],
    "props": {
      "content": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "string | React.JSX.Element",
          "elements": [
            {
              "name": "string"
            },
            {
              "name": "React.JSX.Element"
            }
          ]
        },
        "description": "The content of the badge."
      },
      "color": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'default' | 'primary' | 'secondary' | 'error'",
          "elements": [
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'primary'"
            },
            {
              "name": "literal",
              "value": "'secondary'"
            },
            {
              "name": "literal",
              "value": "'error'"
            }
          ]
        },
        "description": "The color of the badge.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "disableMargins": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to disable the margins."
      },
      "hidden": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the badge is hidden or not."
      },
      "placement": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "| 'top-start'\n| 'top-end'\n| 'bottom-end'\n| 'bottom-start'",
          "elements": [
            {
              "name": "literal",
              "value": "'top-start'"
            },
            {
              "name": "literal",
              "value": "'top-end'"
            },
            {
              "name": "literal",
              "value": "'bottom-end'"
            },
            {
              "name": "literal",
              "value": "'bottom-start'"
            }
          ]
        },
        "description": "The placement of the badge.",
        "defaultValue": {
          "value": "'top-end'",
          "computed": false
        }
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "BadgeTheme"
        },
        "description": "Theme for the Budge."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "HTMLSpanElement"
            }
          ],
          "raw": "LegacyRef<HTMLSpanElement>"
        },
        "description": "Reference to the HTML span element."
      }
    },
    "composes": [
      "Omit"
    ]
  },
  {
    "description": "",
    "displayName": "Button",
    "methods": [],
    "props": {
      "color": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'default' | 'primary' | 'secondary' | 'error' | 'success' | 'warning'",
          "elements": [
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'primary'"
            },
            {
              "name": "literal",
              "value": "'secondary'"
            },
            {
              "name": "literal",
              "value": "'error'"
            },
            {
              "name": "literal",
              "value": "'success'"
            },
            {
              "name": "literal",
              "value": "'warning'"
            }
          ]
        },
        "description": "Color variation of the button.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "variant": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'filled' | 'outline' | 'text'",
          "elements": [
            {
              "name": "literal",
              "value": "'filled'"
            },
            {
              "name": "literal",
              "value": "'outline'"
            },
            {
              "name": "literal",
              "value": "'text'"
            }
          ]
        },
        "description": "Style variant of the button.",
        "defaultValue": {
          "value": "'filled'",
          "computed": false
        }
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'small' | 'medium' | 'large'",
          "elements": [
            {
              "name": "literal",
              "value": "'small'"
            },
            {
              "name": "literal",
              "value": "'medium'"
            },
            {
              "name": "literal",
              "value": "'large'"
            }
          ]
        },
        "description": "The size variation of the button.",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      },
      "fullWidth": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the button will take up the full width of its container."
      },
      "disableMargins": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the margins of the button will be disabled."
      },
      "disablePadding": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the padding of the button will be disabled."
      },
      "disableAnimation": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the animation of the button will be disabled."
      },
      "startAdornment": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": "Element to display before the Button content."
      },
      "endAdornment": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": "Element to display after the Button content."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "ButtonTheme"
        },
        "description": "Theme for the Button."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "HTMLButtonElement"
            }
          ],
          "raw": "LegacyRef<HTMLButtonElement>"
        },
        "description": "The ref to the button element."
      },
      "type": {
        "defaultValue": {
          "value": "'button'",
          "computed": false
        },
        "required": false
      }
    },
    "composes": [
      "Omit"
    ]
  },
  {
    "description": "",
    "displayName": "ButtonGroup",
    "methods": [],
    "props": {
      "children": {
        "required": true,
        "tsType": {
          "name": "any"
        },
        "description": "The Buttons to display in the group."
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional CSS classes to apply to the Button group"
      }
    },
    "composes": [
      "ButtonGroupContextProps"
    ]
  },
  {
    "description": "",
    "displayName": "Chip",
    "methods": [],
    "props": {
      "color": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "| 'default'\n| 'primary'\n| 'secondary'\n| 'error'\n| 'success'\n| 'warning'\n| 'info'",
          "elements": [
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'primary'"
            },
            {
              "name": "literal",
              "value": "'secondary'"
            },
            {
              "name": "literal",
              "value": "'error'"
            },
            {
              "name": "literal",
              "value": "'success'"
            },
            {
              "name": "literal",
              "value": "'warning'"
            },
            {
              "name": "literal",
              "value": "'info'"
            }
          ]
        },
        "description": "Color variant for the chip.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'small' | 'medium' | 'large'",
          "elements": [
            {
              "name": "literal",
              "value": "'small'"
            },
            {
              "name": "literal",
              "value": "'medium'"
            },
            {
              "name": "literal",
              "value": "'large'"
            }
          ]
        },
        "description": "Size variant for the chip.",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      },
      "variant": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'filled' | 'outline'",
          "elements": [
            {
              "name": "literal",
              "value": "'filled'"
            },
            {
              "name": "literal",
              "value": "'outline'"
            }
          ]
        },
        "description": "Style variant for the chip.",
        "defaultValue": {
          "value": "'filled'",
          "computed": false
        }
      },
      "selected": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the chip is selected."
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the chip is disabled."
      },
      "disableMargins": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to disable the margins."
      },
      "start": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "ReactElement | string",
          "elements": [
            {
              "name": "ReactElement"
            },
            {
              "name": "string"
            }
          ]
        },
        "description": "Content to display before the chip label."
      },
      "end": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "ReactElement | string",
          "elements": [
            {
              "name": "ReactElement"
            },
            {
              "name": "string"
            }
          ]
        },
        "description": "Content to display before the chip label."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "ChipTheme"
        },
        "description": "Theme for the Chip."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "HTMLDivElement"
            }
          ],
          "raw": "LegacyRef<HTMLDivElement>"
        },
        "description": "Reference to the root element."
      }
    }
  },
  {
    "description": "",
    "displayName": "DeletableChip",
    "methods": [],
    "props": {
      "deleteIcon": {
        "required": false,
        "tsType": {
          "name": "ReactElement"
        },
        "description": "Customize delete icon.",
        "defaultValue": {
          "value": "<CloseIcon height={12} width={12} />",
          "computed": false
        }
      },
      "onDelete": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Callback if the chip is deletable."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "ChipTheme"
        },
        "description": "Theme for the Deletable Chip."
      },
      "size": {
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        },
        "required": false
      },
      "color": {
        "defaultValue": {
          "value": "'default'",
          "computed": false
        },
        "required": false
      },
      "variant": {
        "defaultValue": {
          "value": "'filled'",
          "computed": false
        },
        "required": false
      }
    },
    "composes": [
      "Omit"
    ]
  },
  {
    "description": "",
    "displayName": "CommandPalette",
    "methods": [],
    "props": {
      "search": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Search input value."
      },
      "placeholder": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Placeholder text."
      },
      "selected": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "Selected Index."
      },
      "autoFocus": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Autofocus or not.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "emptyMessage": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Empty message to show when there are no items."
      },
      "inputIcon": {
        "required": false,
        "tsType": {
          "name": "ReactNode"
        },
        "description": "Icon to show in the search input."
      },
      "onSearchChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value: string) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "string"
                },
                "name": "value"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "When the search input value changes."
      },
      "onSelectedIndexChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value: number) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "number"
                },
                "name": "value"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "When a user picks something from the list."
      },
      "onHotkey": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(hotkey: HotkeyIem) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "HotkeyIem"
                },
                "name": "hotkey"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "When a hotkey was triggered."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "CommandPaletteTheme"
        },
        "description": "Theme for the CommandPalette."
      }
    },
    "composes": [
      "PropsWithChildren"
    ]
  },
  {
    "description": "",
    "displayName": "IconButton",
    "methods": [],
    "composes": [
      "Omit"
    ]
  },
  {
    "description": "",
    "displayName": "Kbd",
    "methods": [],
    "props": {
      "keycode": {
        "required": true,
        "tsType": {
          "name": "string"
        },
        "description": "Keycode for the Kbd."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "KbdTheme"
        },
        "description": "Theme for the Kbd."
      }
    },
    "composes": [
      "Omit"
    ]
  },
  {
    "description": "",
    "displayName": "DotsLoader",
    "methods": [],
    "props": {
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional class names for the loader."
      },
      "speed": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "The speed of the animation.",
        "defaultValue": {
          "value": "0.2",
          "computed": false
        }
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'small' | 'medium' | 'large'",
          "elements": [
            {
              "name": "literal",
              "value": "'small'"
            },
            {
              "name": "literal",
              "value": "'medium'"
            },
            {
              "name": "literal",
              "value": "'large'"
            }
          ]
        },
        "description": "The size of the loader.",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "DotsLoaderTheme"
        },
        "description": "Theme for the DotsLoader."
      }
    }
  },
  {
    "description": "",
    "displayName": "Calendar",
    "methods": [],
    "props": {
      "value": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "| Date\n| [Date, Date]\n| [Date, undefined]\n| [undefined, undefined]\n| undefined",
          "elements": [
            {
              "name": "Date"
            },
            {
              "name": "tuple",
              "raw": "[Date, Date]",
              "elements": [
                {
                  "name": "Date"
                },
                {
                  "name": "Date"
                }
              ]
            },
            {
              "name": "tuple",
              "raw": "[Date, undefined]",
              "elements": [
                {
                  "name": "Date"
                },
                {
                  "name": "undefined"
                }
              ]
            },
            {
              "name": "tuple",
              "raw": "[undefined, undefined]",
              "elements": [
                {
                  "name": "undefined"
                },
                {
                  "name": "undefined"
                }
              ]
            },
            {
              "name": "undefined"
            }
          ]
        },
        "description": "The selected date(s) for the calendar."
      },
      "min": {
        "required": false,
        "tsType": {
          "name": "Date"
        },
        "description": "The minimum selectable date for the calendar."
      },
      "max": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "Date | 'now'",
          "elements": [
            {
              "name": "Date"
            },
            {
              "name": "literal",
              "value": "'now'"
            }
          ]
        },
        "description": "The maximum selectable date for the calendar.\nCan also be set to 'now' to use the current date."
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the calendar is disabled."
      },
      "isRange": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the calendar is a range picker."
      },
      "nextArrow": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "React.ReactNode | string",
          "elements": [
            {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            },
            {
              "name": "string"
            }
          ]
        },
        "description": "The text or icon to use for next.",
        "defaultValue": {
          "value": "'→'",
          "computed": false
        }
      },
      "previousArrow": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "React.ReactNode | string",
          "elements": [
            {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            },
            {
              "name": "string"
            }
          ]
        },
        "description": "The text or icon to use for previous.",
        "defaultValue": {
          "value": "'←'",
          "computed": false
        }
      },
      "showDayOfWeek": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to display day of week labels"
      },
      "animated": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to animate the calendar.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value: Date | [Date, Date]) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "union",
                  "raw": "Date | [Date, Date]",
                  "elements": [
                    {
                      "name": "Date"
                    },
                    {
                      "name": "tuple",
                      "raw": "[Date, Date]",
                      "elements": [
                        {
                          "name": "Date"
                        },
                        {
                          "name": "Date"
                        }
                      ]
                    }
                  ]
                },
                "name": "value"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "A callback function that is called when the selected date(s) change."
      },
      "onViewChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(view: CalendarViewType) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "union",
                  "raw": "'days' | 'months' | 'years'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'days'"
                    },
                    {
                      "name": "literal",
                      "value": "'months'"
                    },
                    {
                      "name": "literal",
                      "value": "'years'"
                    }
                  ]
                },
                "name": "view"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "A callback function that is called when the calendar view changes."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "CalendarTheme"
        },
        "description": "Theme for the Calendar."
      }
    }
  },
  {
    "description": "",
    "displayName": "CalendarRange",
    "methods": [],
    "props": {
      "value": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "| [Date, Date]\n| [undefined, undefined]\n| [Date | undefined]\n| undefined",
          "elements": [
            {
              "name": "tuple",
              "raw": "[Date, Date]",
              "elements": [
                {
                  "name": "Date"
                },
                {
                  "name": "Date"
                }
              ]
            },
            {
              "name": "tuple",
              "raw": "[undefined, undefined]",
              "elements": [
                {
                  "name": "undefined"
                },
                {
                  "name": "undefined"
                }
              ]
            },
            {
              "name": "tuple",
              "raw": "[Date | undefined]",
              "elements": [
                {
                  "name": "union",
                  "raw": "Date | undefined",
                  "elements": [
                    {
                      "name": "Date"
                    },
                    {
                      "name": "undefined"
                    }
                  ]
                }
              ]
            },
            {
              "name": "undefined"
            }
          ]
        },
        "description": "The selected date(s) for the calendar."
      },
      "monthsToDisplay": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "The number of calendar months to display.",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      },
      "direction": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'past' | 'future'",
          "elements": [
            {
              "name": "literal",
              "value": "'past'"
            },
            {
              "name": "literal",
              "value": "'future'"
            }
          ]
        },
        "description": "Defaults view to show past or future months if multiple months shown.",
        "defaultValue": {
          "value": "'future'",
          "computed": false
        }
      },
      "nextYearArrow": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "React.ReactNode | string",
          "elements": [
            {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            },
            {
              "name": "string"
            }
          ]
        },
        "description": "The text or icon to use for next year.",
        "defaultValue": {
          "value": "'»'",
          "computed": false
        }
      },
      "previousYearArrow": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "React.ReactNode | string",
          "elements": [
            {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            },
            {
              "name": "string"
            }
          ]
        },
        "description": "The text or icon to use for previous year.",
        "defaultValue": {
          "value": "'«'",
          "computed": false
        }
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "CalendarRangeTheme"
        },
        "description": "Theme for the CalendarRange."
      },
      "previousArrow": {
        "defaultValue": {
          "value": "'‹'",
          "computed": false
        },
        "required": false
      },
      "nextArrow": {
        "defaultValue": {
          "value": "'›'",
          "computed": false
        },
        "required": false
      },
      "animated": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      }
    },
    "composes": [
      "Omit"
    ]
  },
  {
    "description": "",
    "displayName": "Checkbox",
    "methods": [],
    "props": {
      "checked": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the checkbox is checked or not.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "intermediate": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the checkbox is in an intermediate state or not.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "label": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Label for the checkbox."
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the checkbox is disabled or not."
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'small' | 'medium' | 'large'",
          "elements": [
            {
              "name": "literal",
              "value": "'small'"
            },
            {
              "name": "literal",
              "value": "'medium'"
            },
            {
              "name": "literal",
              "value": "'large'"
            }
          ]
        },
        "description": "Size of the checkbox.",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional class names to apply to the checkbox."
      },
      "containerClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional class names to apply to the container."
      },
      "labelClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional class names to apply to the label."
      },
      "borderPath": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Custom svg path for border.",
        "defaultValue": {
          "value": "'M 0 0 L 0 16 L 16 16 L 16 0 Z'",
          "computed": false
        }
      },
      "checkedPath": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Custom svg path for checked state.",
        "defaultValue": {
          "value": "'M 5.36396 8.17792 L 7.34236 9.91424 L 10.6044 5.832'",
          "computed": false
        }
      },
      "intermediatePath": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Custom svg path for intermediate state.",
        "defaultValue": {
          "value": "'M 5.36396 8.17792 L 10.6044 8.17792'",
          "computed": false
        }
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value: boolean) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "boolean"
                },
                "name": "value"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Event handler for when the checkbox is changed."
      },
      "onBlur": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event: React.FocusEvent<HTMLDivElement>) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "ReactFocusEvent",
                  "raw": "React.FocusEvent<HTMLDivElement>",
                  "elements": [
                    {
                      "name": "HTMLDivElement"
                    }
                  ]
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Event handler for when the checkbox is blurred."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "CheckboxTheme"
        },
        "description": "Theme for the Checkbox."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "HTMLDivElement"
            }
          ],
          "raw": "LegacyRef<HTMLDivElement>"
        },
        "description": "The ref to the checkbox element."
      }
    }
  },
  {
    "description": "",
    "displayName": "Input",
    "methods": [
      {
        "name": "blur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "select",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "fullWidth": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the input will take up the full width of its container."
      },
      "selectOnFocus": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the input will be focused during the first mount."
      },
      "error": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the input will show an error state."
      },
      "containerClassname": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional classname for the input container element."
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'small' | 'medium' | 'large'",
          "elements": [
            {
              "name": "literal",
              "value": "'small'"
            },
            {
              "name": "literal",
              "value": "'medium'"
            },
            {
              "name": "literal",
              "value": "'large'"
            }
          ]
        },
        "description": "Size of the input.",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      },
      "start": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "React.ReactNode | string",
          "elements": [
            {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            },
            {
              "name": "string"
            }
          ]
        },
        "description": "Content to display before the input.\n\n@deprecated Use `startAdornment` instead."
      },
      "end": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "React.ReactNode | string",
          "elements": [
            {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            },
            {
              "name": "string"
            }
          ]
        },
        "description": "Content to display after the input.\n\n@deprecated Use `endAdornment` instead."
      },
      "startAdornment": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "React.ReactNode | string",
          "elements": [
            {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            },
            {
              "name": "string"
            }
          ]
        },
        "description": "Element to display before the Button content."
      },
      "endAdornment": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "React.ReactNode | string",
          "elements": [
            {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            },
            {
              "name": "string"
            }
          ]
        },
        "description": "Element to display after the Button content."
      },
      "onValueChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value: string) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "string"
                },
                "name": "value"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Shortcut for the onChange value event."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "InputTheme"
        },
        "description": "Theme for the Input."
      },
      "inputRef": {
        "required": false,
        "tsType": {
          "name": "RefObject",
          "elements": [
            {
              "name": "HTMLInputElement"
            }
          ],
          "raw": "RefObject<HTMLInputElement>"
        },
        "description": "Reference to the input element."
      },
      "containerRef": {
        "required": false,
        "tsType": {
          "name": "RefObject",
          "elements": [
            {
              "name": "HTMLDivElement"
            }
          ],
          "raw": "RefObject<HTMLDivElement>"
        },
        "description": "Reference to the container element."
      },
      "blur": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Method to blur the input."
      },
      "focus": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Method to focus the input."
      },
      "select": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Method to select the input."
      }
    },
    "composes": [
      "Omit"
    ]
  },
  {
    "description": "",
    "displayName": "Radio",
    "methods": [],
    "props": {
      "checked": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the radio is checked or not.\nRequired only if `Radio` is used independently outside a `RadioGroup`.\nIf `Radio` is used inside a `RadioGroup` then the value is internally set depending upon if the `value` is same as the selected value."
      },
      "label": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "string | ReactNode",
          "elements": [
            {
              "name": "string"
            },
            {
              "name": "ReactNode"
            }
          ]
        },
        "description": "Label for the radio."
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the radio is disabled or not."
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional class names to apply to the radio."
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'small' | 'medium' | 'large'",
          "elements": [
            {
              "name": "literal",
              "value": "'small'"
            },
            {
              "name": "literal",
              "value": "'medium'"
            },
            {
              "name": "literal",
              "value": "'large'"
            }
          ]
        },
        "description": "Size of the radio.",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value: boolean) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "boolean"
                },
                "name": "value"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Event handler for when the radio is changed."
      },
      "onBlur": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event: React.FocusEvent<HTMLDivElement>) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "ReactFocusEvent",
                  "raw": "React.FocusEvent<HTMLDivElement>",
                  "elements": [
                    {
                      "name": "HTMLDivElement"
                    }
                  ]
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Event handler for when the radio is blurred."
      },
      "value": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": "Value passed to the form when used inside a `RadioGroup`.\nRequired when `Radio` is used within a `RadioGroup`"
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "RadioTheme"
        },
        "description": "Theme for the Radio."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "HTMLDivElement"
            }
          ],
          "raw": "LegacyRef<HTMLDivElement>"
        },
        "description": "Reference to the radio element."
      }
    }
  },
  {
    "description": "",
    "displayName": "RadioGroup",
    "methods": [],
    "props": {
      "children": {
        "required": true,
        "tsType": {
          "name": "any"
        },
        "description": "The Radio Buttons to display in the group."
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional CSS classes to apply to the Radio group"
      }
    },
    "composes": [
      "RadioGroupContextProps"
    ]
  },
  {
    "description": "",
    "displayName": "RangeDouble",
    "methods": [],
    "props": {
      "valueDisplay": {
        "defaultValue": {
          "value": "'hover'",
          "computed": false
        },
        "required": false
      },
      "valueFormat": {
        "defaultValue": {
          "value": "value => value.toLocaleString()",
          "computed": false
        },
        "required": false
      },
      "step": {
        "defaultValue": {
          "value": "1",
          "computed": false
        },
        "required": false
      }
    }
  },
  {
    "description": "",
    "displayName": "RangeSingle",
    "methods": [],
    "props": {
      "showHighlight": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Display the highlight when true",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "valueDisplay": {
        "defaultValue": {
          "value": "'hover'",
          "computed": false
        },
        "required": false
      },
      "valueFormat": {
        "defaultValue": {
          "value": "value => value.toLocaleString()",
          "computed": false
        },
        "required": false
      },
      "step": {
        "defaultValue": {
          "value": "1",
          "computed": false
        },
        "required": false
      }
    },
    "composes": [
      "RangeProps"
    ]
  },
  {
    "description": "",
    "displayName": "RangeTooltip",
    "methods": [],
    "props": {
      "children": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": ""
      },
      "visible": {
        "required": true,
        "tsType": {
          "name": "boolean"
        },
        "description": ""
      }
    }
  },
  {
    "description": "",
    "displayName": "Select",
    "methods": [],
    "props": {
      "id": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The id of the select."
      },
      "name": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The form name of the select."
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": "Additional CSS style attributes to apply to the select."
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional class names to apply to the select."
      },
      "activeClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional class names to apply to the select when the\nmenu is open"
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Set the select to disabled state."
      },
      "autoFocus": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Auto focus the select on render."
      },
      "closeOnSelect": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Close the select after you select an option.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "value": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "string | string[]",
          "elements": [
            {
              "name": "string"
            },
            {
              "name": "Array",
              "elements": [
                {
                  "name": "string"
                }
              ],
              "raw": "string[]"
            }
          ]
        },
        "description": "The value of the select."
      },
      "defaultFilterValue": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The deafult value of the input filter."
      },
      "required": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the select is required or not."
      },
      "multiple": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the select is multi or single select."
      },
      "placeholder": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Default placeholder text."
      },
      "filterable": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether you can filter the select options.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "clearable": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether you can clear the select after selection.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "tabToSelect": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether you can use the Tab key to select the current active option."
      },
      "loading": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the select is in loading state or not."
      },
      "refreshable": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether you can refresh the async values or not.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "createable": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether you can create new options or not."
      },
      "selectOnPaste": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Select options when paste text inside input."
      },
      "selectOnKeys": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "string[]"
        },
        "description": "The list of KeyCodes for creating select values.\nThe default is ['Enter']\nTypical options would be: ['Enter', 'Tab', 'Space', 'Comma']",
        "defaultValue": {
          "value": "['Enter']",
          "computed": false
        }
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": "The options of the select."
      },
      "error": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the select has an error state or not."
      },
      "menuPlacement": {
        "required": false,
        "tsType": {
          "name": "Placement"
        },
        "description": "The placement options for the menu.",
        "defaultValue": {
          "value": "'bottom-start'",
          "computed": false
        }
      },
      "menuDisabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the menu is disabled or not.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onInputKeydown": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event: React.KeyboardEvent<HTMLInputElement>) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "ReactKeyboardEvent",
                  "raw": "React.KeyboardEvent<HTMLInputElement>",
                  "elements": [
                    {
                      "name": "HTMLInputElement"
                    }
                  ]
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "When the input receives a key down event."
      },
      "onInputKeyUp": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event: React.KeyboardEvent<HTMLInputElement>) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "ReactKeyboardEvent",
                  "raw": "React.KeyboardEvent<HTMLInputElement>",
                  "elements": [
                    {
                      "name": "HTMLInputElement"
                    }
                  ]
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "When the input receives a key up event."
      },
      "onFocus": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(\n  event: React.FocusEvent<HTMLInputElement> | React.MouseEvent<HTMLDivElement>\n) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "union",
                  "raw": "React.FocusEvent<HTMLInputElement> | React.MouseEvent<HTMLDivElement>",
                  "elements": [
                    {
                      "name": "ReactFocusEvent",
                      "raw": "React.FocusEvent<HTMLInputElement>",
                      "elements": [
                        {
                          "name": "HTMLInputElement"
                        }
                      ]
                    },
                    {
                      "name": "ReactMouseEvent",
                      "raw": "React.MouseEvent<HTMLDivElement>",
                      "elements": [
                        {
                          "name": "HTMLDivElement"
                        }
                      ]
                    }
                  ]
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "When the select was focused."
      },
      "onBlur": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event: React.FocusEvent<HTMLInputElement>) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "ReactFocusEvent",
                  "raw": "React.FocusEvent<HTMLInputElement>",
                  "elements": [
                    {
                      "name": "HTMLInputElement"
                    }
                  ]
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "When the select was blurred."
      },
      "onInputChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event: React.ChangeEvent<HTMLInputElement>) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "ReactChangeEvent",
                  "raw": "React.ChangeEvent<HTMLInputElement>",
                  "elements": [
                    {
                      "name": "HTMLInputElement"
                    }
                  ]
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "When the select input value changed."
      },
      "onRefresh": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "When the user manually refreshed the options."
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value) => void",
          "signature": {
            "arguments": [
              {
                "name": "value"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "When the value changes."
      },
      "onOptionsChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(options: SelectOptionProps[]) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "Array",
                  "elements": [
                    {
                      "name": "SelectOptionProps"
                    }
                  ],
                  "raw": "SelectOptionProps[]"
                },
                "name": "options"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "When a new option is added or removed."
      },
      "input": {
        "required": false,
        "tsType": {
          "name": "ReactElement",
          "elements": [
            {
              "name": "SelectInputProps"
            },
            {
              "name": "SelectInput"
            }
          ],
          "raw": "ReactElement<SelectInputProps, typeof SelectInput>"
        },
        "description": "Input override component.",
        "defaultValue": {
          "value": "<SelectInput />",
          "computed": false
        }
      },
      "menu": {
        "required": false,
        "tsType": {
          "name": "ReactElement",
          "elements": [
            {
              "name": "SelectMenuProps"
            },
            {
              "name": "SelectMenu"
            }
          ],
          "raw": "ReactElement<SelectMenuProps, typeof SelectMenu>"
        },
        "description": "Menu component override.",
        "defaultValue": {
          "value": "<SelectMenu />",
          "computed": false
        }
      },
      "searchOptions": {
        "required": false,
        "tsType": {
          "name": "Fuse.IFuseOptions",
          "elements": [
            {
              "name": "SelectOptionProps"
            }
          ],
          "raw": "Fuse.IFuseOptions<SelectOptionProps>"
        },
        "description": "The options for the Fuse.js search algorithm."
      },
      "onOpenMenu": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "When menu is opened"
      },
      "onCloseMenu": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "When menu is closed"
      }
    }
  },
  {
    "description": "",
    "displayName": "Textarea",
    "methods": [
      {
        "name": "blur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "containerClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional classname for the input container element."
      },
      "error": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Mark field as errored"
      },
      "fullWidth": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the field will take up the full width of its container."
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'small' | 'medium' | 'large'",
          "elements": [
            {
              "name": "literal",
              "value": "'small'"
            },
            {
              "name": "literal",
              "value": "'medium'"
            },
            {
              "name": "literal",
              "value": "'large'"
            }
          ]
        },
        "description": "Size of the field.",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "TextareaTheme"
        },
        "description": "Theme for the Textarea."
      },
      "inputRef": {
        "required": false,
        "tsType": {
          "name": "RefObject",
          "elements": [
            {
              "name": "HTMLTextAreaElement"
            }
          ],
          "raw": "RefObject<HTMLTextAreaElement>"
        },
        "description": "Reference to the input element."
      },
      "containerRef": {
        "required": false,
        "tsType": {
          "name": "RefObject",
          "elements": [
            {
              "name": "HTMLDivElement"
            }
          ],
          "raw": "RefObject<HTMLDivElement>"
        },
        "description": "Reference to the container element."
      },
      "blur": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Method to blur the input element."
      },
      "focus": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Method to focus the input element."
      }
    },
    "composes": [
      "TextareaAutosizeProps"
    ]
  },
  {
    "description": "",
    "displayName": "Toggle",
    "methods": [],
    "props": {
      "checked": {
        "required": true,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the toggle is checked or not."
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the toggle is disabled or not."
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional class names to apply to the toggle."
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'small' | 'medium' | 'large'",
          "elements": [
            {
              "name": "literal",
              "value": "'small'"
            },
            {
              "name": "literal",
              "value": "'medium'"
            },
            {
              "name": "literal",
              "value": "'large'"
            }
          ]
        },
        "description": "The size of the toggle.",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      },
      "onChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value: boolean) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "boolean"
                },
                "name": "value"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "When the toggle is changed."
      },
      "onBlur": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event: React.FocusEvent<HTMLDivElement>) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "ReactFocusEvent",
                  "raw": "React.FocusEvent<HTMLDivElement>",
                  "elements": [
                    {
                      "name": "HTMLDivElement"
                    }
                  ]
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "When the toggle was blurred."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "ToggleTheme"
        },
        "description": "Theme for the Toggle."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "HTMLDivElement"
            }
          ],
          "raw": "LegacyRef<HTMLDivElement>"
        },
        "description": "Reference to the toggle element."
      }
    }
  },
  {
    "description": "",
    "displayName": "Backdrop",
    "methods": [],
    "props": {
      "zIndex": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "The z-index of the backdrop.",
        "defaultValue": {
          "value": "998",
          "computed": false
        }
      },
      "portalIndex": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "The index of the portal.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional class names to apply to the backdrop."
      },
      "onClick": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event: MouseEvent) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "MouseEvent"
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Callback for when the backdrop is clicked."
      }
    }
  },
  {
    "description": "",
    "displayName": "ContextMenu",
    "methods": [],
    "props": {
      "children": {
        "required": true,
        "tsType": {
          "name": "ReactNode"
        },
        "description": "Child element to trigger the context menu."
      },
      "content": {
        "required": true,
        "tsType": {
          "name": "union",
          "raw": "any | ((args: any) => ReactNode)",
          "elements": [
            {
              "name": "any"
            },
            {
              "name": "unknown"
            }
          ]
        },
        "description": "Content to show in the context menu."
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the context menu is disabled."
      },
      "autofocus": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the context menu should autofocus on open.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "autoClose": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the context menu should close on click.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "triggerClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Class name to apply to the trigger element."
      },
      "triggerOpenClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Class name to apply to the trigger when the context menu is open."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "ContextMenuTheme"
        },
        "description": "Theme for the Context Menu."
      },
      "closeOnEscape": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      },
      "closeOnBodyClick": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      }
    },
    "composes": [
      "Omit"
    ]
  },
  {
    "description": "",
    "displayName": "Dialog",
    "methods": [],
    "props": {
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The CSS class name for the root element of the component."
      },
      "innerClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The CSS class name for the inner content element of the component."
      },
      "contentClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The CSS class name for the content of the component."
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "string | number",
          "elements": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "description": "The size of the dialog. Can be a string or a number.",
        "defaultValue": {
          "value": "'50%'",
          "computed": false
        }
      },
      "showCloseButton": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to show the close button in the dialog header.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "any | (() => any)",
          "elements": [
            {
              "name": "any"
            },
            {
              "name": "unknown"
            }
          ]
        },
        "description": "The content of the dialog."
      },
      "disablePadding": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to disable padding for the dialog content.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "footer": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": "The footer of the dialog."
      },
      "header": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": "The header of the dialog."
      },
      "headerElement": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "ReactElement<DialogHeaderProps, typeof DialogHeader> | null",
          "elements": [
            {
              "name": "ReactElement",
              "elements": [
                {
                  "name": "DialogHeaderProps"
                },
                {
                  "name": "DialogHeader"
                }
              ],
              "raw": "ReactElement<DialogHeaderProps, typeof DialogHeader>"
            },
            {
              "name": "null"
            }
          ]
        },
        "description": "The React element for the dialog header.",
        "defaultValue": {
          "value": "<DialogHeader />",
          "computed": false
        }
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "DialogTheme"
        },
        "description": "Theme for the Dialog."
      },
      "hasBackdrop": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      },
      "closeOnBackdropClick": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      },
      "closeOnEscape": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      }
    },
    "composes": [
      "Omit"
    ]
  },
  {
    "description": "",
    "displayName": "DialogHeader",
    "methods": [],
    "props": {
      "children": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": "The content of the dialog header."
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The CSS class name for the root element of the component."
      },
      "showCloseButton": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to show the close button in the dialog header."
      },
      "disablePadding": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to disable padding for the dialog header."
      },
      "onClose": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Callback when the close button is clicked."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "DialogTheme"
        },
        "description": "Theme for the Dialog Header."
      }
    }
  },
  {
    "description": "",
    "displayName": "Drawer",
    "methods": [],
    "props": {
      "headerElement": {
        "defaultValue": {
          "value": "<DrawerHeader />",
          "computed": false
        },
        "required": false
      },
      "position": {
        "defaultValue": {
          "value": "'end'",
          "computed": false
        },
        "required": false
      },
      "size": {
        "defaultValue": {
          "value": "'80%'",
          "computed": false
        },
        "required": false
      },
      "hasBackdrop": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      },
      "closeOnEscape": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      },
      "closeOnBackdropClick": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      },
      "disablePadding": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "required": false
      },
      "showCloseButton": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      }
    }
  },
  {
    "description": "",
    "displayName": "DrawerHeader",
    "methods": [],
    "props": {
      "children": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": "The content of the drawer header."
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The CSS class name for the root element of the component."
      },
      "showCloseButton": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to show the close button in the drawer header."
      },
      "onClose": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Callback when the close button is clicked."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "DrawerTheme"
        },
        "description": "Theme for the Drawer Header."
      }
    }
  },
  {
    "description": "",
    "displayName": "Menu",
    "methods": [],
    "props": {
      "appendToBody": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to append the menu to the body or not.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "autofocus": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Autofocus the menu on open or not.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "children": {
        "required": true,
        "tsType": {
          "name": "union",
          "raw": "any | (() => any)",
          "elements": [
            {
              "name": "any"
            },
            {
              "name": "unknown"
            }
          ]
        },
        "description": "The menu contents."
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "CSS class applied to menu element."
      },
      "closeOnBodyClick": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Close the menu on click or not.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "closeOnEscape": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Close the menu on escape.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "placement": {
        "required": false,
        "tsType": {
          "name": "Placement"
        },
        "description": "Popper placement type.",
        "defaultValue": {
          "value": "'bottom-start'",
          "computed": false
        }
      },
      "reference": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": "Reference element for the menu position."
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": "CSS Properties for the menu."
      },
      "open": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to show the menu or not.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "maxHeight": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Max height of the menu.",
        "defaultValue": {
          "value": "'max-height: calc(100vh - 48px)'",
          "computed": false
        }
      },
      "modifiers": {
        "required": false,
        "tsType": {
          "name": "Modifiers"
        },
        "description": "Popper.js Position modifiers."
      },
      "autoWidth": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the menu should be the same width as the reference element"
      },
      "minWidth": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "Min width of the menu."
      },
      "maxWidth": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "Max width of the menu."
      },
      "onClose": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event: OverlayEvent) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "OverlayEvent"
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Menu was closed."
      },
      "onMouseEnter": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event) => void",
          "signature": {
            "arguments": [
              {
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Mouse enter event."
      },
      "onMouseLeave": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event) => void",
          "signature": {
            "arguments": [
              {
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Mouse leave event."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "MenuTheme"
        },
        "description": "Theme for the Menu."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "HTMLDivElement"
            }
          ],
          "raw": "LegacyRef<HTMLDivElement>"
        },
        "description": "Reference to the menu element."
      }
    }
  },
  {
    "description": "",
    "displayName": "NestedMenu",
    "methods": [],
    "props": {
      "children": {
        "required": true,
        "tsType": {
          "name": "any"
        },
        "description": "Menu contents."
      },
      "label": {
        "required": true,
        "tsType": {
          "name": "any"
        },
        "description": "Label element for the menu item."
      },
      "placement": {
        "required": false,
        "tsType": {
          "name": "Placement"
        },
        "description": "Popper placement type.",
        "defaultValue": {
          "value": "'right-start'",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "CSS class applied to label element."
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": "CSS Properties for the label element."
      },
      "menuClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "CSS class applied to label element."
      },
      "activeClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "CSS class applied to label element when active."
      },
      "menuStyle": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": "CSS Properties for the label element."
      },
      "enterDelay": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "Delay before showing tooltip.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "leaveDelay": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "Delay before closing tooltip.",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "closeOnBodyClick": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Close the menu on click or not.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "closeOnEscape": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Close the menu on escape.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "maxHeight": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Max height of the menu."
      },
      "autofocus": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Autofocus the menu on open or not.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "onClose": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event: OverlayEvent) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "OverlayEvent"
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Nested Menu was closed."
      }
    }
  },
  {
    "description": "",
    "displayName": "Notification",
    "methods": [],
    "props": {
      "id": {
        "required": true,
        "tsType": {
          "name": "number"
        },
        "description": "Unique identifier for the notification."
      },
      "component": {
        "required": false,
        "tsType": {
          "name": "ReactNode"
        },
        "description": "Component to render as the notification."
      },
      "onClose": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(id: number) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "number"
                },
                "name": "id"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Callback to close the notification."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "NotificationTheme"
        },
        "description": "Theme for the Notification."
      }
    },
    "composes": [
      "NotificationOptions"
    ]
  },
  {
    "description": "",
    "displayName": "Notifications",
    "methods": [],
    "props": {
      "limit": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "timeout": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "",
        "defaultValue": {
          "value": "4000",
          "computed": false
        }
      },
      "showClose": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "preventFlooding": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "ReactNode"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "components": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  [variant in NotificationVariants]?: JSXElementConstructor<NotificationComponentProps>;\n}",
          "signature": {
            "properties": [
              {
                "key": {
                  "name": "NotificationVariants",
                  "required": false
                },
                "value": {
                  "name": "JSXElementConstructor",
                  "elements": [
                    {
                      "name": "NotificationComponentProps"
                    }
                  ],
                  "raw": "JSXElementConstructor<NotificationComponentProps>"
                }
              }
            ]
          }
        },
        "description": ""
      },
      "icons": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  [variant in NotificationVariants]?:\n    | string\n    | React.JSX.Element\n    | React.JSX.Element[];\n}",
          "signature": {
            "properties": [
              {
                "key": {
                  "name": "NotificationVariants",
                  "required": false
                },
                "value": {
                  "name": "union",
                  "raw": "| string\n| React.JSX.Element\n| React.JSX.Element[]",
                  "elements": [
                    {
                      "name": "string"
                    },
                    {
                      "name": "React.JSX.Element"
                    },
                    {
                      "name": "Array",
                      "elements": [
                        {
                          "name": "React.JSX.Element"
                        }
                      ],
                      "raw": "React.JSX.Element[]"
                    }
                  ]
                }
              }
            ]
          }
        },
        "description": "",
        "defaultValue": {
          "value": "{\n  default: <InfoIcon />,\n  success: <CheckCircleIcon />,\n  warning: <WarningIcon />,\n  error: <ErrorCircleIcon />,\n  info: <InfoIcon />\n}",
          "computed": false
        }
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "NotificationTheme"
        },
        "description": ""
      }
    }
  },
  {
    "description": "",
    "displayName": "Popover",
    "methods": [],
    "props": {
      "disablePadding": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Disable default padding on popover."
      },
      "popoverStyle": {
        "required": false,
        "tsType": {
          "name": "ReactStyleHTMLAttributes",
          "raw": "React.StyleHTMLAttributes<any>",
          "elements": [
            {
              "name": "any"
            }
          ]
        },
        "description": "Popover css styles."
      },
      "popoverClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Popover classname."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "PopoverTheme"
        },
        "description": "Theme for the Popover."
      },
      "autoFocus": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "FocusTargetOrFalse | undefined | (() => void)",
          "elements": [
            {
              "name": "union",
              "raw": "| FocusTargetValueOrFalse\n| (() => FocusTargetValueOrFalse)",
              "elements": [
                {
                  "name": "union",
                  "raw": "HTMLElement | SVGElement | string | false",
                  "elements": [
                    {
                      "name": "HTMLElement"
                    },
                    {
                      "name": "SVGElement"
                    },
                    {
                      "name": "string"
                    },
                    {
                      "name": "literal",
                      "value": "false"
                    }
                  ]
                },
                {
                  "name": "unknown"
                }
              ]
            },
            {
              "name": "undefined"
            },
            {
              "name": "unknown"
            }
          ]
        },
        "description": "Popover has a focus trap that by default focuses the first element in the tab order.\nWith this option you can specify a different element to receive that initial focus, or use false for no initially focused element."
      },
      "closeOnEscape": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      },
      "closeOnBodyClick": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      },
      "trigger": {
        "defaultValue": {
          "value": "'click'",
          "computed": false
        },
        "required": false
      },
      "leaveDelay": {
        "defaultValue": {
          "value": "200",
          "computed": false
        },
        "required": false
      }
    },
    "composes": [
      "Partial"
    ]
  },
  {
    "description": "",
    "displayName": "Tooltip",
    "methods": [],
    "props": {
      "children": {
        "required": false,
        "tsType": {
          "name": "ReactNode"
        },
        "description": "Content to wrap."
      },
      "closeOnClick": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Close on any click.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "closeOnBodyClick": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Close when the body is clicked.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "closeOnEscape": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Close when escape key is triggered.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "content": {
        "required": true,
        "tsType": {
          "name": "any"
        },
        "description": "Content for the tooltip."
      },
      "reference": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "ReferenceObject | HTMLElement | any",
          "elements": [
            {
              "name": "ReferenceObject"
            },
            {
              "name": "HTMLElement"
            },
            {
              "name": "any"
            }
          ]
        },
        "description": "Reference of the tooltip to align to."
      },
      "placement": {
        "required": false,
        "tsType": {
          "name": "Placement"
        },
        "description": "Popperjs placement.",
        "defaultValue": {
          "value": "'top'",
          "computed": false
        }
      },
      "enterDelay": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "Delay before showing tooltip.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "leaveDelay": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "Delay before closing tooltip.",
        "defaultValue": {
          "value": "200",
          "computed": false
        }
      },
      "modifiers": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": "Popperjs modifiers."
      },
      "visible": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "External setter for visibility.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional CSS classnames."
      },
      "triggerClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "CSS Classname for the tooltip container ( ie. the thing that the tooltip is bound to )."
      },
      "trigger": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "TriggerTypes[] | TriggerTypes",
          "elements": [
            {
              "name": "Array",
              "elements": [
                {
                  "name": "TriggerTypes"
                }
              ],
              "raw": "TriggerTypes[]"
            },
            {
              "name": "TriggerTypes"
            }
          ]
        },
        "description": "How the tooltip will be triggered.",
        "defaultValue": {
          "value": "'hover'",
          "computed": false
        }
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the tooltip is disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "followCursor": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the tooltip should move with the cursor or not.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "pointerEvents": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Add pointer events or not. Usually not for tooltips.",
        "defaultValue": {
          "value": "'none'",
          "computed": false
        }
      },
      "isPopover": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Differentiator for popovers to be handled separate from tooltips"
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "TooltipTheme"
        },
        "description": "Theme for the tooltip."
      }
    }
  },
  {
    "description": "",
    "displayName": "Block",
    "methods": [],
    "props": {
      "label": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "React.ReactNode | string",
          "elements": [
            {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            },
            {
              "name": "string"
            }
          ]
        },
        "description": "Label to display on the block."
      },
      "disableMargin": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Disable block bottom margin."
      },
      "required": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to show the required * or not."
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": "Children to render."
      },
      "labelClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional classname to apply to the label."
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional classname to apply to the block."
      },
      "direction": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'vertical' | 'horizontal'",
          "elements": [
            {
              "name": "literal",
              "value": "'vertical'"
            },
            {
              "name": "literal",
              "value": "'horizontal'"
            }
          ]
        },
        "description": "Direction of the block.",
        "defaultValue": {
          "value": "'vertical'",
          "computed": false
        }
      },
      "alignment": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'start' | 'center' | 'end'",
          "elements": [
            {
              "name": "literal",
              "value": "'start'"
            },
            {
              "name": "literal",
              "value": "'center'"
            },
            {
              "name": "literal",
              "value": "'end'"
            }
          ]
        },
        "description": "Alignment of the label.",
        "defaultValue": {
          "value": "'start'",
          "computed": false
        }
      },
      "onTitleClick": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(\n  event: React.MouseEvent<HTMLLabelElement, MouseEvent>\n) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "ReactMouseEvent",
                  "raw": "React.MouseEvent<HTMLLabelElement, MouseEvent>",
                  "elements": [
                    {
                      "name": "HTMLLabelElement"
                    },
                    {
                      "name": "MouseEvent"
                    }
                  ]
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Event when the label is clicked."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "BlockTheme"
        },
        "description": "Theme for the Block."
      }
    }
  },
  {
    "description": "",
    "displayName": "BreadcrumbItem",
    "methods": []
  },
  {
    "description": "",
    "displayName": "BreadcrumbLink",
    "methods": [],
    "props": {
      "theme": {
        "required": false,
        "tsType": {
          "name": "BreadcrumbsTheme"
        },
        "description": ""
      }
    }
  },
  {
    "description": "",
    "displayName": "BreadcrumbList",
    "methods": [],
    "props": {
      "theme": {
        "required": false,
        "tsType": {
          "name": "BreadcrumbsTheme"
        },
        "description": ""
      }
    }
  },
  {
    "description": "",
    "displayName": "BreadcrumbPage",
    "methods": [],
    "props": {
      "theme": {
        "required": false,
        "tsType": {
          "name": "BreadcrumbsTheme"
        },
        "description": ""
      }
    }
  },
  {
    "description": "",
    "displayName": "BreadcrumbSeparator",
    "methods": [],
    "props": {
      "theme": {
        "required": false,
        "tsType": {
          "name": "BreadcrumbsTheme"
        },
        "description": ""
      },
      "children": {
        "defaultValue": {
          "value": "<Arrow direction=\"right\" />",
          "computed": false
        },
        "required": false
      }
    }
  },
  {
    "description": "",
    "displayName": "Breadcrumbs",
    "methods": [],
    "props": {
      "theme": {
        "required": false,
        "tsType": {
          "name": "BreadcrumbsTheme"
        },
        "description": ""
      }
    }
  },
  {
    "description": "",
    "displayName": "Card",
    "methods": [],
    "props": {
      "disablePadding": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Disable the padding of the card."
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional classname to apply to the card."
      },
      "headerClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Header classname to apply."
      },
      "contentClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Content classname to apply."
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": "Additional style attributes. Recommend to use css classes over this."
      },
      "header": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "string | React.JSX.Element | React.JSX.Element[]",
          "elements": [
            {
              "name": "string"
            },
            {
              "name": "React.JSX.Element"
            },
            {
              "name": "Array",
              "elements": [
                {
                  "name": "React.JSX.Element"
                }
              ],
              "raw": "React.JSX.Element[]"
            }
          ]
        },
        "description": "Header element or text to show."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "CardTheme"
        },
        "description": "Theme for the Card."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "HTMLDivElement"
            }
          ],
          "raw": "LegacyRef<HTMLDivElement>"
        },
        "description": ""
      }
    }
  },
  {
    "description": "",
    "displayName": "Collapse",
    "methods": [],
    "props": {
      "expanded": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the collapse is expanded or not."
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "React.ReactNode | (() => React.ReactNode)",
          "elements": [
            {
              "name": "ReactReactNode",
              "raw": "React.ReactNode"
            },
            {
              "name": "unknown"
            }
          ]
        },
        "description": "Children to render."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "CollapseTheme"
        },
        "description": "Theme for the Collapse."
      }
    },
    "composes": [
      "Omit"
    ]
  },
  {
    "description": "",
    "displayName": "Divider",
    "methods": [],
    "props": {
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Classname to apply to the divider."
      },
      "disableMargins": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Disable the margins of the divider.\nThe default margin is: `--spacings-md`.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "orientation": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'horizontal' | 'vertical'",
          "elements": [
            {
              "name": "literal",
              "value": "'horizontal'"
            },
            {
              "name": "literal",
              "value": "'vertical'"
            }
          ]
        },
        "description": "Orientation of the divider.",
        "defaultValue": {
          "value": "'horizontal'",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": "Additional style attributes. Recommend to use css classes over this."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "DividerTheme"
        },
        "description": "Theme for the Divider."
      },
      "variant": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'primary' | 'secondary'",
          "elements": [
            {
              "name": "literal",
              "value": "'primary'"
            },
            {
              "name": "literal",
              "value": "'secondary'"
            }
          ]
        },
        "description": "Variant of the divider.",
        "defaultValue": {
          "value": "'primary'",
          "computed": false
        }
      }
    }
  },
  {
    "description": "",
    "displayName": "List",
    "methods": [],
    "props": {
      "theme": {
        "required": false,
        "tsType": {
          "name": "ListTheme"
        },
        "description": "Theme for the List."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "HTMLDivElement"
            }
          ],
          "raw": "LegacyRef<HTMLDivElement>"
        },
        "description": "Reference to the list element."
      }
    }
  },
  {
    "description": "",
    "displayName": "MotionGroup",
    "methods": [],
    "props": {
      "children": {
        "required": true,
        "tsType": {
          "name": "ReactNode"
        },
        "description": "The content of group."
      }
    },
    "composes": [
      "HTMLMotionProps"
    ]
  },
  {
    "description": "",
    "displayName": "MotionItem",
    "methods": [],
    "props": {
      "direction": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'horizontal' | 'vertical'",
          "elements": [
            {
              "name": "literal",
              "value": "'horizontal'"
            },
            {
              "name": "literal",
              "value": "'vertical'"
            }
          ]
        },
        "description": "Direction of the motion.",
        "defaultValue": {
          "value": "'vertical'",
          "computed": false
        }
      },
      "children": {
        "required": true,
        "tsType": {
          "name": "ReactNode"
        },
        "description": "Children to render."
      }
    },
    "composes": [
      "HTMLMotionProps"
    ]
  },
  {
    "description": "",
    "displayName": "Stack",
    "methods": [],
    "props": {
      "dense": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the stack will be dense.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "inline": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the stack will be inline.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "direction": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'row' | 'column' | 'rowReverse' | 'columnReverse'",
          "elements": [
            {
              "name": "literal",
              "value": "'row'"
            },
            {
              "name": "literal",
              "value": "'column'"
            },
            {
              "name": "literal",
              "value": "'rowReverse'"
            },
            {
              "name": "literal",
              "value": "'columnReverse'"
            }
          ]
        },
        "description": "The direction of the stack.",
        "defaultValue": {
          "value": "'row'",
          "computed": false
        }
      },
      "alignItems": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'start' | 'end' | 'center' | 'stretch'",
          "elements": [
            {
              "name": "literal",
              "value": "'start'"
            },
            {
              "name": "literal",
              "value": "'end'"
            },
            {
              "name": "literal",
              "value": "'center'"
            },
            {
              "name": "literal",
              "value": "'stretch'"
            }
          ]
        },
        "description": "How the content is arranged inside the stack.",
        "defaultValue": {
          "value": "'center'",
          "computed": false
        }
      },
      "justifyContent": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'start' | 'end' | 'center' | 'spaceBetween'",
          "elements": [
            {
              "name": "literal",
              "value": "'start'"
            },
            {
              "name": "literal",
              "value": "'end'"
            },
            {
              "name": "literal",
              "value": "'center'"
            },
            {
              "name": "literal",
              "value": "'spaceBetween'"
            }
          ]
        },
        "description": "How the content is arranged inside the stack.",
        "defaultValue": {
          "value": "'start'",
          "computed": false
        }
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "StackTheme"
        },
        "description": "Theme for the Stack."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "HTMLDivElement"
            }
          ],
          "raw": "LegacyRef<HTMLDivElement>"
        },
        "description": "Reference to the stack element."
      }
    },
    "composes": [
      "HTMLAttributes"
    ]
  },
  {
    "description": "",
    "displayName": "Tab",
    "methods": [],
    "props": {
      "id": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The id of the tab list.\n@private"
      },
      "containerClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The class name to be added to the tab container."
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The class name to be added to the tab."
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "The disabled state of the tab.\n\n@private"
      },
      "selected": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "The selected state of the tab.\n\n@private"
      },
      "onSelect": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "The callback to be called when the tab is selected.\n\n@private"
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'small' | 'medium' | 'large'",
          "elements": [
            {
              "name": "literal",
              "value": "'small'"
            },
            {
              "name": "literal",
              "value": "'medium'"
            },
            {
              "name": "literal",
              "value": "'large'"
            }
          ]
        },
        "description": "The size of the tabs.\n\n@private",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "TabsTheme"
        },
        "description": "Theme for the Tabs."
      }
    },
    "composes": [
      "PropsWithChildren"
    ]
  },
  {
    "description": "",
    "displayName": "TabList",
    "methods": [],
    "props": {
      "id": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The id of the tab list.\n@private"
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The class name to be added to the tab list."
      },
      "selectedIndex": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "The active index of the tabs.\n@private"
      },
      "direction": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'ltr' | 'rtl'",
          "elements": [
            {
              "name": "literal",
              "value": "'ltr'"
            },
            {
              "name": "literal",
              "value": "'rtl'"
            }
          ]
        },
        "description": "The direction of the tabs. Default is 'ltr'.\n@private"
      },
      "onSelect": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(index: number) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "number"
                },
                "name": "index"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "The callback to be called when a tab is selected.\n@private"
      },
      "variant": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'primary' | 'secondary'",
          "elements": [
            {
              "name": "literal",
              "value": "'primary'"
            },
            {
              "name": "literal",
              "value": "'secondary'"
            }
          ]
        },
        "description": "The variant of the tabs.\n@private",
        "defaultValue": {
          "value": "'primary'",
          "computed": false
        }
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'small' | 'medium' | 'large'",
          "elements": [
            {
              "name": "literal",
              "value": "'small'"
            },
            {
              "name": "literal",
              "value": "'medium'"
            },
            {
              "name": "literal",
              "value": "'large'"
            }
          ]
        },
        "description": "The size of the tabs.\n@private",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "TabsTheme"
        },
        "description": "Theme for the Tabs."
      }
    },
    "composes": [
      "PropsWithChildren"
    ]
  },
  {
    "description": "",
    "displayName": "TabPanel",
    "methods": [],
    "props": {
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The class name to be added to the tab panel."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "TabsTheme"
        },
        "description": "Theme for the Tabs."
      }
    },
    "composes": [
      "PropsWithChildren"
    ]
  },
  {
    "description": "",
    "displayName": "Tabs",
    "methods": [],
    "props": {
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The class name to be added to the tabs."
      },
      "selectedIndex": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "The active index of the tabs."
      },
      "defaultIndex": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "The default index of the tabs. Default is 0.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "direction": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'ltr' | 'rtl'",
          "elements": [
            {
              "name": "literal",
              "value": "'ltr'"
            },
            {
              "name": "literal",
              "value": "'rtl'"
            }
          ]
        },
        "description": "The direction of the tabs. Default is 'ltr'.",
        "defaultValue": {
          "value": "'ltr'",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": "The style to be added to the tabs."
      },
      "variant": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'primary' | 'secondary'",
          "elements": [
            {
              "name": "literal",
              "value": "'primary'"
            },
            {
              "name": "literal",
              "value": "'secondary'"
            }
          ]
        },
        "description": "The variant of the tabs.",
        "defaultValue": {
          "value": "'primary'",
          "computed": false
        }
      },
      "size": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'small' | 'medium' | 'large'",
          "elements": [
            {
              "name": "literal",
              "value": "'small'"
            },
            {
              "name": "literal",
              "value": "'medium'"
            },
            {
              "name": "literal",
              "value": "'large'"
            }
          ]
        },
        "description": "The size of the tabs.",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      },
      "onSelect": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(index: number) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "number"
                },
                "name": "index"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "The callback to be called when a tab is selected."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "TabsTheme"
        },
        "description": "Theme for the Tabs."
      }
    },
    "composes": [
      "PropsWithChildren"
    ]
  },
  {
    "description": "",
    "displayName": "Tree",
    "methods": [],
    "props": {
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "CSS Classname to apply to the tree"
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": "Extra style attributes to apply to the tree"
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "TreeTheme"
        },
        "description": "Theme for the Tree"
      }
    }
  },
  {
    "description": "",
    "displayName": "TreeNode",
    "methods": [],
    "props": {
      "label": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "ReactNode | string",
          "elements": [
            {
              "name": "ReactNode"
            },
            {
              "name": "string"
            }
          ]
        },
        "description": "Label to display for the node"
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "CSS Classname to apply to the node"
      },
      "expanded": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the node is expanded or not"
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the node is disabled or not"
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "TreeTheme"
        },
        "description": "Theme for the Tree"
      },
      "onExpand": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Event fired when the node is expanded"
      },
      "onCollapse": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Event fired when the node is collapsed"
      }
    },
    "composes": [
      "PropsWithChildren"
    ]
  },
  {
    "description": "",
    "displayName": "VerticalSpacer",
    "methods": [],
    "props": {
      "space": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'",
          "elements": [
            {
              "name": "literal",
              "value": "'xs'"
            },
            {
              "name": "literal",
              "value": "'sm'"
            },
            {
              "name": "literal",
              "value": "'md'"
            },
            {
              "name": "literal",
              "value": "'lg'"
            },
            {
              "name": "literal",
              "value": "'xl'"
            },
            {
              "name": "literal",
              "value": "'xxl'"
            }
          ]
        },
        "description": "The amount of space to add.",
        "defaultValue": {
          "value": "'md'",
          "computed": false
        }
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "VerticalSpacerTheme"
        },
        "description": "Theme for the VerticalSpacer."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "HTMLDivElement"
            }
          ],
          "raw": "LegacyRef<HTMLDivElement>"
        },
        "description": "Reference to the HTML div element."
      }
    },
    "composes": [
      "HTMLAttributes"
    ]
  },
  {
    "description": "",
    "displayName": "PageTitle",
    "methods": [],
    "props": {
      "color": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "| 'default'\n| 'primary'\n| 'secondary'\n| 'error'\n| 'success'\n| 'warning'\n| 'info'",
          "elements": [
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'primary'"
            },
            {
              "name": "literal",
              "value": "'secondary'"
            },
            {
              "name": "literal",
              "value": "'error'"
            },
            {
              "name": "literal",
              "value": "'success'"
            },
            {
              "name": "literal",
              "value": "'warning'"
            },
            {
              "name": "literal",
              "value": "'info'"
            }
          ]
        },
        "description": "Color variation of the title.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "variant": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'default' | 'mono'",
          "elements": [
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'mono'"
            }
          ]
        },
        "description": "Font variant for the title.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "disableMargins": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to disable the margins.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "TypographyTheme"
        },
        "description": "Theme for the Typography."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "HTMLHeadingElement"
            }
          ],
          "raw": "LegacyRef<HTMLHeadingElement>"
        },
        "description": "Reference to the HTML heading element."
      }
    }
  },
  {
    "description": "",
    "displayName": "PrimaryHeading",
    "methods": [],
    "props": {
      "color": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "| 'default'\n| 'primary'\n| 'secondary'\n| 'error'\n| 'success'\n| 'warning'\n| 'info'",
          "elements": [
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'primary'"
            },
            {
              "name": "literal",
              "value": "'secondary'"
            },
            {
              "name": "literal",
              "value": "'error'"
            },
            {
              "name": "literal",
              "value": "'success'"
            },
            {
              "name": "literal",
              "value": "'warning'"
            },
            {
              "name": "literal",
              "value": "'info'"
            }
          ]
        },
        "description": "Color variation of the title.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "variant": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'default' | 'mono'",
          "elements": [
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'mono'"
            }
          ]
        },
        "description": "Font variant for the heading.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "disableMargins": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to disable the margins.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "TypographyTheme"
        },
        "description": "Theme for the Typography."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "HTMLHeadingElement"
            }
          ],
          "raw": "LegacyRef<HTMLHeadingElement>"
        },
        "description": "Reference to the HTML heading element."
      }
    }
  },
  {
    "description": "",
    "displayName": "SecondaryHeading",
    "methods": [],
    "props": {
      "color": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "| 'default'\n| 'primary'\n| 'secondary'\n| 'error'\n| 'success'\n| 'warning'\n| 'info'",
          "elements": [
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'primary'"
            },
            {
              "name": "literal",
              "value": "'secondary'"
            },
            {
              "name": "literal",
              "value": "'error'"
            },
            {
              "name": "literal",
              "value": "'success'"
            },
            {
              "name": "literal",
              "value": "'warning'"
            },
            {
              "name": "literal",
              "value": "'info'"
            }
          ]
        },
        "description": "Color variation of the heading.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "variant": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'default' | 'mono'",
          "elements": [
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'mono'"
            }
          ]
        },
        "description": "Font variant for the heading.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "disableMargins": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to disable the margins.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "TypographyTheme"
        },
        "description": "Theme for the Typography."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "HTMLHeadingElement"
            }
          ],
          "raw": "LegacyRef<HTMLHeadingElement>"
        },
        "description": "Reference to the HTML heading element."
      }
    }
  },
  {
    "description": "",
    "displayName": "SmallHeading",
    "methods": [],
    "props": {
      "color": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "| 'default'\n| 'primary'\n| 'secondary'\n| 'error'\n| 'success'\n| 'warning'\n| 'info'",
          "elements": [
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'primary'"
            },
            {
              "name": "literal",
              "value": "'secondary'"
            },
            {
              "name": "literal",
              "value": "'error'"
            },
            {
              "name": "literal",
              "value": "'success'"
            },
            {
              "name": "literal",
              "value": "'warning'"
            },
            {
              "name": "literal",
              "value": "'info'"
            }
          ]
        },
        "description": "Color variation of the title.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "variant": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'default' | 'mono'",
          "elements": [
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'mono'"
            }
          ]
        },
        "description": "Font variant for the heading.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "disableMargins": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to disable the margins.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "TypographyTheme"
        },
        "description": "Theme for the Typography."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "HTMLHeadingElement"
            }
          ],
          "raw": "LegacyRef<HTMLHeadingElement>"
        },
        "description": "Reference to the HTML heading element."
      }
    }
  },
  {
    "description": "",
    "displayName": "Sub",
    "methods": [],
    "props": {
      "color": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "| 'default'\n| 'primary'\n| 'secondary'\n| 'error'\n| 'success'\n| 'warning'\n| 'info'",
          "elements": [
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'primary'"
            },
            {
              "name": "literal",
              "value": "'secondary'"
            },
            {
              "name": "literal",
              "value": "'error'"
            },
            {
              "name": "literal",
              "value": "'success'"
            },
            {
              "name": "literal",
              "value": "'warning'"
            },
            {
              "name": "literal",
              "value": "'info'"
            }
          ]
        },
        "description": "Color variation of the text.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "variant": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'default' | 'mono'",
          "elements": [
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'mono'"
            }
          ]
        },
        "description": "Font variant for the text.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "disableMargins": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to disable the margins.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "TypographyTheme"
        },
        "description": "Theme for the Typography."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "HTMLHeadingElement"
            }
          ],
          "raw": "LegacyRef<HTMLHeadingElement>"
        },
        "description": "Reference to the HTML heading element."
      }
    }
  },
  {
    "description": "",
    "displayName": "Text",
    "methods": [],
    "props": {
      "color": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "| 'default'\n| 'primary'\n| 'secondary'\n| 'error'\n| 'success'\n| 'warning'\n| 'info'",
          "elements": [
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'primary'"
            },
            {
              "name": "literal",
              "value": "'secondary'"
            },
            {
              "name": "literal",
              "value": "'error'"
            },
            {
              "name": "literal",
              "value": "'success'"
            },
            {
              "name": "literal",
              "value": "'warning'"
            },
            {
              "name": "literal",
              "value": "'info'"
            }
          ]
        },
        "description": "Color variation of the text.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "fontStyle": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'default' | 'thin' | 'bold' | 'extraBold' | 'italic'",
          "elements": [
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'thin'"
            },
            {
              "name": "literal",
              "value": "'bold'"
            },
            {
              "name": "literal",
              "value": "'extraBold'"
            },
            {
              "name": "literal",
              "value": "'italic'"
            }
          ]
        },
        "description": "",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "variant": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "'default' | 'mono'",
          "elements": [
            {
              "name": "literal",
              "value": "'default'"
            },
            {
              "name": "literal",
              "value": "'mono'"
            }
          ]
        },
        "description": "Font variant for the text.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "TypographyTheme"
        },
        "description": "Theme for the Typography."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "HTMLSpanElement"
            }
          ],
          "raw": "LegacyRef<HTMLSpanElement>"
        },
        "description": "Reference to the HTML heading element."
      }
    }
  },
  {
    "description": "",
    "displayName": "OverlayTrigger",
    "methods": [],
    "props": {
      "children": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": "The children to be rendered within the overlay trigger."
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The CSS class name to be applied to the overlay trigger."
      },
      "elementType": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": "The type of element that will be used as the overlay trigger.",
        "defaultValue": {
          "value": "'span'",
          "computed": false
        }
      },
      "trigger": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "TriggerTypes | TriggerTypes[]",
          "elements": [
            {
              "name": "union",
              "raw": "'hover' | 'click' | 'contextmenu' | 'focus' | 'key'",
              "elements": [
                {
                  "name": "literal",
                  "value": "'hover'"
                },
                {
                  "name": "literal",
                  "value": "'click'"
                },
                {
                  "name": "literal",
                  "value": "'contextmenu'"
                },
                {
                  "name": "literal",
                  "value": "'focus'"
                },
                {
                  "name": "literal",
                  "value": "'key'"
                }
              ]
            },
            {
              "name": "Array",
              "elements": [
                {
                  "name": "union",
                  "raw": "'hover' | 'click' | 'contextmenu' | 'focus' | 'key'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'hover'"
                    },
                    {
                      "name": "literal",
                      "value": "'click'"
                    },
                    {
                      "name": "literal",
                      "value": "'contextmenu'"
                    },
                    {
                      "name": "literal",
                      "value": "'focus'"
                    },
                    {
                      "name": "literal",
                      "value": "'key'"
                    }
                  ]
                }
              ],
              "raw": "TriggerTypes[]"
            }
          ]
        },
        "description": "The type(s) of event(s) that will trigger the overlay. Can be a single trigger type or an array of trigger types.",
        "defaultValue": {
          "value": "['click']",
          "computed": false
        }
      },
      "onOpen": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event: OverlayTriggerEvent) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "OverlayTriggerEvent"
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "A function that is called when the overlay is opened. It receives an object of type OverlayTriggerEvent as an argument.",
        "defaultValue": {
          "value": "() => undefined",
          "computed": false
        }
      },
      "onClose": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event: OverlayTriggerEvent) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "OverlayTriggerEvent"
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "A function that is called when the overlay is closed. It receives an object of type OverlayTriggerEvent as an argument.",
        "defaultValue": {
          "value": "() => undefined",
          "computed": false
        }
      },
      "ref": {
        "required": true,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "HTMLSpanElement"
            }
          ],
          "raw": "LegacyRef<HTMLSpanElement>"
        },
        "description": ""
      }
    }
  },
  {
    "description": "",
    "displayName": "ThemeProvider",
    "methods": [],
    "props": {
      "theme": {
        "required": true,
        "tsType": {
          "name": "ReablocksTheme"
        },
        "description": ""
      }
    },
    "composes": [
      "PropsWithChildren"
    ]
  },
  {
    "description": "",
    "displayName": "CommandPaletteInput",
    "methods": [],
    "props": {
      "value": {
        "required": true,
        "tsType": {
          "name": "string"
        },
        "description": "The value of the input."
      },
      "placeholder": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Placeholder text."
      },
      "autoFocus": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Autofocus or not."
      },
      "icon": {
        "required": false,
        "tsType": {
          "name": "ReactNode"
        },
        "description": "Icon to show in the search input.",
        "defaultValue": {
          "value": "<SearchIcon />",
          "computed": false
        }
      },
      "hotkeys": {
        "required": true,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "HotkeyIem"
            }
          ],
          "raw": "HotkeyIem[]"
        },
        "description": "Hotkeys set by CommandPalette from useFlattenedTree."
      },
      "onChange": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(value: string) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "string"
                },
                "name": "value"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "When the search input value changes."
      },
      "onKeyPress": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event: KeyboardEvent<HTMLInputElement>) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "KeyboardEvent",
                  "elements": [
                    {
                      "name": "HTMLInputElement"
                    }
                  ],
                  "raw": "KeyboardEvent<HTMLInputElement>"
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "When a user presses a key."
      },
      "onBlur": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event: FocusEvent<HTMLInputElement>) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "FocusEvent",
                  "elements": [
                    {
                      "name": "HTMLInputElement"
                    }
                  ],
                  "raw": "FocusEvent<HTMLInputElement>"
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "When the input loses focus."
      },
      "onHotkey": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(hotkey: HotkeyIem) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "HotkeyIem"
                },
                "name": "hotkey"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "When a hotkey was triggered. Used internally."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "CommandPaletteTheme"
        },
        "description": "Theme for the Command Palette."
      }
    }
  },
  {
    "description": "",
    "displayName": "SearchIcon",
    "methods": []
  },
  {
    "description": "",
    "displayName": "CommandPaletteItem",
    "methods": []
  },
  {
    "description": "",
    "displayName": "CommandPaletteSection",
    "methods": []
  },
  {
    "description": "",
    "displayName": "CalendarDays",
    "methods": [],
    "props": {
      "value": {
        "required": false,
        "tsType": {
          "name": "Date"
        },
        "description": "The currently displayed month of the calendar."
      },
      "current": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "| Date\n| [Date, Date]\n| [Date, undefined]\n| [undefined, undefined]\n| undefined",
          "elements": [
            {
              "name": "Date"
            },
            {
              "name": "tuple",
              "raw": "[Date, Date]",
              "elements": [
                {
                  "name": "Date"
                },
                {
                  "name": "Date"
                }
              ]
            },
            {
              "name": "tuple",
              "raw": "[Date, undefined]",
              "elements": [
                {
                  "name": "Date"
                },
                {
                  "name": "undefined"
                }
              ]
            },
            {
              "name": "tuple",
              "raw": "[undefined, undefined]",
              "elements": [
                {
                  "name": "undefined"
                },
                {
                  "name": "undefined"
                }
              ]
            },
            {
              "name": "undefined"
            }
          ]
        },
        "description": "The currently selected date(s)."
      },
      "hover": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "Date | null",
          "elements": [
            {
              "name": "Date"
            },
            {
              "name": "null"
            }
          ]
        },
        "description": "The currently hovered date.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "min": {
        "required": false,
        "tsType": {
          "name": "Date"
        },
        "description": "The minimum selectable date for the calendar, as a Date object."
      },
      "max": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "Date | 'now'",
          "elements": [
            {
              "name": "Date"
            },
            {
              "name": "literal",
              "value": "'now'"
            }
          ]
        },
        "description": "The maximum selectable date for the calendar, as a Date object or the string 'now'."
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the calendar is disabled."
      },
      "hidePrevMonthDays": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to display days of previous month."
      },
      "hideNextMonthDays": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to display days of next month."
      },
      "showDayOfWeek": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to display day of week labels."
      },
      "dayOfWeekLabels": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "string[]"
        },
        "description": "Customize the labels for the days of the week.",
        "defaultValue": {
          "value": "daysOfWeek",
          "computed": true
        }
      },
      "isRange": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the calendar is a range picker."
      },
      "range": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "[Date, Date] | [Date, undefined] | [undefined, undefined]",
          "elements": [
            {
              "name": "tuple",
              "raw": "[Date, Date]",
              "elements": [
                {
                  "name": "Date"
                },
                {
                  "name": "Date"
                }
              ]
            },
            {
              "name": "tuple",
              "raw": "[Date, undefined]",
              "elements": [
                {
                  "name": "Date"
                },
                {
                  "name": "undefined"
                }
              ]
            },
            {
              "name": "tuple",
              "raw": "[undefined, undefined]",
              "elements": [
                {
                  "name": "undefined"
                },
                {
                  "name": "undefined"
                }
              ]
            }
          ]
        },
        "description": "Range of selected dates"
      },
      "xAnimation": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "string | number",
          "elements": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "description": "X-axis block animation",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "animated": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to animate the calendar."
      },
      "onChange": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(date: Date) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "Date"
                },
                "name": "date"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "A callback function that is called when a day is selected."
      },
      "onHover": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(date: Date | null) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "union",
                  "raw": "Date | null",
                  "elements": [
                    {
                      "name": "Date"
                    },
                    {
                      "name": "null"
                    }
                  ]
                },
                "name": "date"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "A callback function that is called when a day is hovered."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "CalendarTheme"
        },
        "description": "Theme for the CalendarDays."
      }
    }
  },
  {
    "description": "",
    "displayName": "CalendarMonths",
    "methods": [],
    "props": {
      "value": {
        "required": true,
        "tsType": {
          "name": "number"
        },
        "description": "The currently displayed month of the calendar."
      },
      "onChange": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(month: number) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "number"
                },
                "name": "month"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "A callback function that is called when a day is selected."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "CalendarTheme"
        },
        "description": "Theme for the CalendarMonths."
      }
    }
  },
  {
    "description": "",
    "displayName": "CalendarYears",
    "methods": [],
    "props": {
      "decadeStart": {
        "required": true,
        "tsType": {
          "name": "Date"
        },
        "description": "The start date of the decade to display."
      },
      "decadeEnd": {
        "required": true,
        "tsType": {
          "name": "Date"
        },
        "description": "The end date of the decade to display."
      },
      "value": {
        "required": true,
        "tsType": {
          "name": "number"
        },
        "description": "The currently selected year."
      },
      "xAnimation": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "string | number",
          "elements": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "description": "X-axis block animation",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "animated": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether to animate the calendar."
      },
      "onChange": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(year: number) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "number"
                },
                "name": "year"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "A callback function that is called when a year is selected."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "CalendarTheme"
        },
        "description": "Theme for the CalendarYears."
      }
    }
  },
  {
    "description": "",
    "displayName": "DebouncedInput",
    "methods": [],
    "props": {
      "debounce": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "The debounce time in milliseconds. Defaults to 100.",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      }
    },
    "composes": [
      "InputProps"
    ]
  },
  {
    "description": "",
    "displayName": "InlineInput",
    "methods": [],
    "props": {
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional className for the input container"
      },
      "extraWidth": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "number | string",
          "elements": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "description": "Additional width for input element"
      },
      "inputClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional className for the input element"
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "InputTheme"
        },
        "description": "Theme for the InlineInput."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "HTMLInputElement"
            }
          ],
          "raw": "LegacyRef<HTMLInputElement>"
        },
        "description": "Reference to the input element."
      }
    },
    "composes": [
      "InputHTMLAttributes"
    ]
  },
  {
    "description": "",
    "displayName": "SelectInput",
    "methods": [
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The id of the select input."
      },
      "name": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The name of the select input."
      },
      "required": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the select input is required."
      },
      "options": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "SelectOptionProps"
            }
          ],
          "raw": "SelectOptionProps[]"
        },
        "description": "The options for the select input."
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the select input is disabled."
      },
      "menuOpen": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the select input menu is open."
      },
      "inputText": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The input text of the select input."
      },
      "closeOnSelect": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the select input will close on select."
      },
      "selectedOption": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "SelectOptionProps | SelectOptionProps[]",
          "elements": [
            {
              "name": "SelectOptionProps"
            },
            {
              "name": "Array",
              "elements": [
                {
                  "name": "SelectOptionProps"
                }
              ],
              "raw": "SelectOptionProps[]"
            }
          ]
        },
        "description": "The selected option of the select input."
      },
      "autoFocus": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the select input will auto focus."
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The class name of the select input."
      },
      "activeClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The active class name of the select input."
      },
      "createable": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the select input is createable."
      },
      "filterable": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the select input is filterable."
      },
      "multiple": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the select input allows multiple selection."
      },
      "loading": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the select input is loading."
      },
      "reference": {
        "required": false,
        "tsType": {
          "name": "Ref",
          "elements": [
            {
              "name": "SelectInputRef"
            }
          ],
          "raw": "Ref<SelectInputRef>"
        },
        "description": "The reference of the select input."
      },
      "placeholder": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The placeholder of the select input."
      },
      "error": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the select input has an error."
      },
      "clearable": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the select input is clearable."
      },
      "refreshable": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the select input is refreshable."
      },
      "menuDisabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the select input menu is disabled."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "SelectTheme"
        },
        "description": "The theme of the select input."
      },
      "closeIcon": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": "The close icon of the select input.",
        "defaultValue": {
          "value": "<CloseIcon />",
          "computed": false
        }
      },
      "refreshIcon": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": "The refresh icon of the select input.",
        "defaultValue": {
          "value": "<RefreshIcon />",
          "computed": false
        }
      },
      "expandIcon": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": "The expand icon of the select input.",
        "defaultValue": {
          "value": "<DownArrowIcon />",
          "computed": false
        }
      },
      "loadingIcon": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": "The loading icon of the select input.",
        "defaultValue": {
          "value": "<DotsLoader size=\"small\" />",
          "computed": false
        }
      },
      "chip": {
        "required": false,
        "tsType": {
          "name": "ReactElement",
          "elements": [
            {
              "name": "SelectInputChipProps"
            },
            {
              "name": "SelectInputChip"
            }
          ],
          "raw": "ReactElement<SelectInputChipProps, typeof SelectInputChip>"
        },
        "description": "The chip of the select input.",
        "defaultValue": {
          "value": "<SelectInputChip />",
          "computed": false
        }
      },
      "onSelectedChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(option: SelectValue) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "SelectValue"
                },
                "name": "option"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "The function to handle selected change."
      },
      "onExpandClick": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event: React.MouseEvent<Element>) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "ReactMouseEvent",
                  "raw": "React.MouseEvent<Element>",
                  "elements": [
                    {
                      "name": "Element"
                    }
                  ]
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "The function to handle expand click."
      },
      "onKeyDown": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event: React.KeyboardEvent<HTMLInputElement>) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "ReactKeyboardEvent",
                  "raw": "React.KeyboardEvent<HTMLInputElement>",
                  "elements": [
                    {
                      "name": "HTMLInputElement"
                    }
                  ]
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "The function to handle key down."
      },
      "onKeyUp": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event: React.KeyboardEvent<HTMLInputElement>) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "ReactKeyboardEvent",
                  "raw": "React.KeyboardEvent<HTMLInputElement>",
                  "elements": [
                    {
                      "name": "HTMLInputElement"
                    }
                  ]
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "The function to handle key up."
      },
      "onFocus": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(\n  event: React.FocusEvent<HTMLInputElement> | React.MouseEvent<HTMLDivElement>\n) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "union",
                  "raw": "React.FocusEvent<HTMLInputElement> | React.MouseEvent<HTMLDivElement>",
                  "elements": [
                    {
                      "name": "ReactFocusEvent",
                      "raw": "React.FocusEvent<HTMLInputElement>",
                      "elements": [
                        {
                          "name": "HTMLInputElement"
                        }
                      ]
                    },
                    {
                      "name": "ReactMouseEvent",
                      "raw": "React.MouseEvent<HTMLDivElement>",
                      "elements": [
                        {
                          "name": "HTMLDivElement"
                        }
                      ]
                    }
                  ]
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "The function to handle focus."
      },
      "onBlur": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event: React.FocusEvent<HTMLInputElement>) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "ReactFocusEvent",
                  "raw": "React.FocusEvent<HTMLInputElement>",
                  "elements": [
                    {
                      "name": "HTMLInputElement"
                    }
                  ]
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "The function to handle blur."
      },
      "onInputChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event: React.ChangeEvent<HTMLInputElement>) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "ReactChangeEvent",
                  "raw": "React.ChangeEvent<HTMLInputElement>",
                  "elements": [
                    {
                      "name": "HTMLInputElement"
                    }
                  ]
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "The function to handle input change."
      },
      "onPaste": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event: React.ClipboardEvent<HTMLInputElement>) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "ReactClipboardEvent",
                  "raw": "React.ClipboardEvent<HTMLInputElement>",
                  "elements": [
                    {
                      "name": "HTMLInputElement"
                    }
                  ]
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "The function to handle input paste event."
      },
      "onRefresh": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "The function to handle refresh."
      }
    }
  },
  {
    "description": "",
    "displayName": "SelectInputChip",
    "methods": [],
    "props": {
      "option": {
        "required": false,
        "tsType": {
          "name": "SelectOptionProps"
        },
        "description": "The option to render as a chip."
      },
      "maxLength": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "The maximum length of the chip.",
        "defaultValue": {
          "value": "20",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional class names to apply to the chip."
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the chip is disabled or not."
      },
      "clearable": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the chip is clearable or not."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "SelectTheme"
        },
        "description": "Theme for the Select."
      },
      "closeIcon": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": "The close icon for the chip.",
        "defaultValue": {
          "value": "<CloseIcon />",
          "computed": false
        }
      },
      "onTagKeyDown": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(\n  event: React.KeyboardEvent<HTMLSpanElement>,\n  option: SelectOptionProps\n) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "ReactKeyboardEvent",
                  "raw": "React.KeyboardEvent<HTMLSpanElement>",
                  "elements": [
                    {
                      "name": "HTMLSpanElement"
                    }
                  ]
                },
                "name": "event"
              },
              {
                "type": {
                  "name": "SelectOptionProps"
                },
                "name": "option"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Callback for when a key is pressed on the chip."
      },
      "onSelectedChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(option: SelectOptionProps) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "SelectOptionProps"
                },
                "name": "option"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Callback for when the selected option changes."
      }
    }
  },
  {
    "description": "",
    "displayName": "SelectMenu",
    "methods": [],
    "props": {
      "id": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The id of the select."
      },
      "options": {
        "required": false,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "SelectOptionProps"
            }
          ],
          "raw": "SelectOptionProps[]"
        },
        "description": "Options passed to the select."
      },
      "selectedOption": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "SelectOptionProps | SelectOptionProps[]",
          "elements": [
            {
              "name": "SelectOptionProps"
            },
            {
              "name": "Array",
              "elements": [
                {
                  "name": "SelectOptionProps"
                }
              ],
              "raw": "SelectOptionProps[]"
            }
          ]
        },
        "description": "The selected option(s)."
      },
      "style": {
        "required": false,
        "tsType": {
          "name": "ReactCSSProperties",
          "raw": "React.CSSProperties"
        },
        "description": "Additional CSS styles to apply to the select menu."
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the menu is disabled or not."
      },
      "groups": {
        "required": false,
        "tsType": {
          "name": "GroupOptions"
        },
        "description": "The groups of options."
      },
      "createable": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether users can create options or not."
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Additional class names to apply to the select menu."
      },
      "multiple": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the menu can select multiples or not."
      },
      "index": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "Internal active index of the keyboard position."
      },
      "inputSearchText": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The input's search text to use for highlighting."
      },
      "filterable": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether users can filter the options or not."
      },
      "loading": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the component is loading or not."
      },
      "onSelectedChange": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(option: SelectValue) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "SelectValue"
                },
                "name": "option"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Event fired when the selected option(s) change."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "SelectTheme"
        },
        "description": "The theme for the Select."
      }
    }
  },
  {
    "description": "",
    "displayName": "CloseIcon",
    "methods": [],
    "props": {
      "height": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "",
        "defaultValue": {
          "value": "32",
          "computed": false
        }
      },
      "width": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "",
        "defaultValue": {
          "value": "32",
          "computed": false
        }
      }
    }
  },
  {
    "description": "",
    "displayName": "DownArrowIcon",
    "methods": []
  },
  {
    "description": "",
    "displayName": "RefreshIcon",
    "methods": []
  },
  {
    "description": "",
    "displayName": "ListHeader",
    "methods": [],
    "props": {
      "theme": {
        "required": false,
        "tsType": {
          "name": "ListTheme"
        },
        "description": "Theme for the List."
      }
    }
  },
  {
    "description": "",
    "displayName": "ListItem",
    "methods": [],
    "props": {
      "active": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the item is active or not."
      },
      "disabled": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the item is disabled or not."
      },
      "disablePadding": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Disable the padding ( including gutters )."
      },
      "disableGutters": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Disable the gutters ( left + right padding )."
      },
      "dense": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the item data is dense and reduce the padding."
      },
      "start": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": "A start component for the list item."
      },
      "end": {
        "required": false,
        "tsType": {
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        },
        "description": "A end component for the list item."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "ListTheme"
        },
        "description": "Theme for the List."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "HTMLDivElement"
            }
          ],
          "raw": "LegacyRef<HTMLDivElement>"
        },
        "description": "Reference to the list item element."
      }
    },
    "composes": [
      "InputHTMLAttributes"
    ]
  },
  {
    "description": "",
    "displayName": "JsonTree",
    "methods": [],
    "props": {
      "data": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "object",
          "raw": "{ [key: string]: any }",
          "signature": {
            "properties": [
              {
                "key": {
                  "name": "string"
                },
                "value": {
                  "name": "any",
                  "required": true
                }
              }
            ]
          }
        },
        "description": "The data to be rendered as a JSON tree."
      },
      "showAll": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, all nodes in the JSON tree will be expanded by default.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "showAllLimit": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "The limit for the number of nodes to show when `showAll` is true.",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "showCount": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the count of child nodes will be shown next to each node.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showEmpty": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, empty nodes will be shown in the JSON tree.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "ellipsisText": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, long text in nodes will be truncated and replaced with an ellipsis.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "ellipsisTextLength": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "The maximum length of text in a node before it is truncated and replaced with an ellipsis.",
        "defaultValue": {
          "value": "150",
          "computed": false
        }
      },
      "expandDepth": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "The depth at which the JSON tree nodes should be expanded by default.",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The CSS class name to be applied to the JSON tree."
      }
    }
  },
  {
    "description": "",
    "displayName": "JsonTreeNode",
    "methods": [],
    "props": {
      "data": {
        "required": false,
        "tsType": {
          "name": "JsonTreeData"
        },
        "description": "The data to be rendered as a JSON tree."
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The CSS class name to be applied to the JSON tree node."
      },
      "showCount": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the count of child nodes will be shown next to each node."
      },
      "showEmpty": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, empty nodes will be shown in the JSON tree."
      },
      "depth": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "The depth of the JSON tree node. This is typically used for indentation purposes."
      },
      "showAllLimit": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "The limit for the number of nodes to show when `showAll` is true."
      },
      "expandDepth": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "The depth at which the JSON tree nodes should be expanded by default."
      },
      "theme": {
        "required": false,
        "tsType": {
          "name": "JsonTreeTheme"
        },
        "description": "Theme for the Json Tree"
      },
      "ellipsisText": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, long text in nodes will be truncated and replaced with an ellipsis."
      },
      "ellipsisTextLength": {
        "required": false,
        "tsType": {
          "name": "number"
        },
        "description": "The maximum length of text in a node before it is truncated and replaced with an ellipsis."
      }
    }
  },
  {
    "description": "",
    "displayName": "ConnectedOverlay",
    "methods": [
      {
        "name": "updatePosition",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "open": {
        "required": true,
        "tsType": {
          "name": "boolean"
        },
        "description": "Whether the overlay should be visible."
      },
      "reference": {
        "required": false,
        "tsType": {
          "name": "ReferenceProp"
        },
        "description": "Reference of the overlay to align to."
      },
      "children": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": "The content of the overlay."
      },
      "content": {
        "required": true,
        "tsType": {
          "name": "any"
        },
        "description": "Content to render in the overlay."
      },
      "trigger": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "TriggerTypes[] | TriggerTypes",
          "elements": [
            {
              "name": "Array",
              "elements": [
                {
                  "name": "TriggerTypes"
                }
              ],
              "raw": "TriggerTypes[]"
            },
            {
              "name": "TriggerTypes"
            }
          ]
        },
        "description": "Type of trigger to open the overlay.",
        "defaultValue": {
          "value": "'click'",
          "computed": false
        }
      },
      "triggerElement": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": "Trigger element to open the overlay."
      },
      "triggerClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Trigger classname."
      },
      "portalClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Portal classname."
      },
      "closeOnBodyClick": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Close when the body is clicked or not."
      },
      "closeOnEscape": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Close when escape is pressed or not."
      },
      "appendToBody": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Append the overlay to the body. Almost always want this."
      },
      "elementType": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "Overlay element type."
      },
      "modifiers": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": "Position modifiers."
      },
      "followCursor": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "Overlay should follow cursor or not."
      },
      "placement": {
        "required": false,
        "tsType": {
          "name": "Placement"
        },
        "description": "Placement of the overlay."
      },
      "onOpen": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event?: any) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "any"
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Event called when the overlay is opened."
      },
      "onClose": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event?: any) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "any"
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Event called when the overlay is closed."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "ConnectedOverlayContentRef"
            }
          ],
          "raw": "LegacyRef<ConnectedOverlayContentRef>"
        },
        "description": ""
      }
    }
  },
  {
    "description": "",
    "displayName": "ConnectedOverlayContent",
    "methods": [
      {
        "name": "updatePosition",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "modifiers": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": "Modifiers to adjust the behavior of the overlay content."
      },
      "followCursor": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the overlay content will follow the cursor."
      },
      "portalClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The CSS class name to be applied to the portal of the overlay content."
      },
      "placement": {
        "required": false,
        "tsType": {
          "name": "Placement"
        },
        "description": "The placement of the overlay content relative to the trigger.",
        "defaultValue": {
          "value": "'bottom'",
          "computed": false
        }
      },
      "triggerRef": {
        "required": true,
        "tsType": {
          "name": "any"
        },
        "description": "A reference to the trigger element."
      },
      "children": {
        "required": true,
        "tsType": {
          "name": "any"
        },
        "description": "The children to be rendered within the overlay content."
      },
      "closeOnBodyClick": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the overlay content will close when a click is detected on the body.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "closeOnEscape": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the overlay content will close when the escape key is pressed.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "elementType": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": "The type of element that will be used as the overlay content."
      },
      "appendToBody": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the overlay content will be appended to the body.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "onClose": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event?: any) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "any"
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "A function that is called when the overlay content is closed. It receives an optional event object as an argument."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "ConnectedOverlayContentRef"
            }
          ],
          "raw": "LegacyRef<ConnectedOverlayContentRef>"
        },
        "description": ""
      }
    }
  },
  {
    "description": "",
    "displayName": "GlobalOverlay",
    "methods": [],
    "props": {
      "children": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": "The children to be rendered within the global overlay."
      },
      "open": {
        "required": true,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the global overlay is open."
      },
      "closeOnBackdropClick": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the global overlay will close when the backdrop is clicked.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "hasBackdrop": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the global overlay will have a backdrop.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "backdropClassName": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The CSS class name to be applied to the backdrop of the global overlay."
      },
      "closeOnEscape": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the global overlay will close when the escape key is pressed.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "onClose": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "A function that is called when the global overlay is closed."
      }
    }
  },
  {
    "description": "",
    "displayName": "OverlayPortal",
    "methods": [],
    "props": {
      "appendToBody": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "If true, the overlay portal will be appended to the body.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The class name of the overlay portal."
      },
      "id": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": "The id of the overlay portal."
      },
      "children": {
        "required": true,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: OverlayPortalMountEvent) => any",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "OverlayPortalMountEvent"
                },
                "name": "props"
              }
            ],
            "return": {
              "name": "any"
            }
          }
        },
        "description": "A function that returns the children of the overlay portal. It receives an object of type OverlayPortalMountEvent as an argument."
      },
      "onMount": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "(event: OverlayPortalMountEvent) => void",
          "signature": {
            "arguments": [
              {
                "type": {
                  "name": "OverlayPortalMountEvent"
                },
                "name": "event"
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "A function that is called when the overlay portal mounts. It receives an object of type OverlayPortalMountEvent as an argument."
      },
      "onUnmount": {
        "required": false,
        "tsType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "A function that is called when the overlay portal unmounts."
      },
      "ref": {
        "required": false,
        "tsType": {
          "name": "LegacyRef",
          "elements": [
            {
              "name": "HTMLElement"
            }
          ],
          "raw": "LegacyRef<HTMLElement>"
        },
        "description": "Reference to the overlay portal element."
      }
    }
  },
  {
    "description": "",
    "displayName": "BorderBlocks",
    "methods": []
  },
  {
    "description": "",
    "displayName": "ColorBlock",
    "methods": [],
    "props": {
      "name": {
        "required": true,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "color": {
        "required": true,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      }
    }
  },
  {
    "description": "",
    "displayName": "ColorPaletteBlock",
    "methods": [],
    "props": {
      "name": {
        "required": true,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "color": {
        "required": true,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "showName": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  },
  {
    "description": "",
    "displayName": "ColorPaletteBlocks",
    "methods": [],
    "props": {
      "name": {
        "required": true,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "colors": {
        "required": true,
        "tsType": {
          "name": "union",
          "raw": "string | Record<string, string>",
          "elements": [
            {
              "name": "string"
            },
            {
              "name": "Record",
              "elements": [
                {
                  "name": "string"
                },
                {
                  "name": "string"
                }
              ],
              "raw": "Record<string, string>"
            }
          ]
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "token": {
        "required": false,
        "tsType": {
          "name": "union",
          "raw": "string | null",
          "elements": [
            {
              "name": "string"
            },
            {
              "name": "null"
            }
          ]
        },
        "description": ""
      },
      "showNames": {
        "required": false,
        "tsType": {
          "name": "boolean"
        },
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  },
  {
    "description": "",
    "displayName": "ColorBlocks",
    "methods": [],
    "props": {
      "colors": {
        "required": true,
        "tsType": {
          "name": "ResolvableTo",
          "elements": [
            {
              "name": "RecursiveKeyValuePair"
            }
          ],
          "raw": "ResolvableTo<RecursiveKeyValuePair>"
        },
        "description": ""
      }
    }
  },
  {
    "description": "",
    "displayName": "ComponentBlocks",
    "methods": [],
    "props": {
      "components": {
        "required": true,
        "tsType": {
          "name": "ReablocksTheme['components']",
          "raw": "ReablocksTheme['components']"
        },
        "description": ""
      }
    }
  },
  {
    "description": "",
    "displayName": "IconBlock",
    "methods": [],
    "props": {
      "name": {
        "required": true,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "component": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": ""
      },
      "src": {
        "required": false,
        "tsType": {
          "name": "any"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      }
    }
  },
  {
    "description": "",
    "displayName": "IconBlocks",
    "methods": [],
    "props": {
      "icons": {
        "required": true,
        "tsType": {
          "name": "Array",
          "elements": [
            {
              "name": "IconBlockProps"
            }
          ],
          "raw": "IconBlockProps[]"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      }
    }
  },
  {
    "description": "",
    "displayName": "PaletteBlocks",
    "methods": [],
    "props": {
      "palettes": {
        "required": true,
        "tsType": {
          "name": "ResolvableTo",
          "elements": [
            {
              "name": "RecursiveKeyValuePair"
            }
          ],
          "raw": "ResolvableTo<RecursiveKeyValuePair>"
        },
        "description": ""
      }
    }
  },
  {
    "description": "",
    "displayName": "ShadowBlocks",
    "methods": []
  },
  {
    "description": "",
    "displayName": "SpacingBlocks",
    "methods": []
  },
  {
    "description": "",
    "displayName": "TypographyLetterBlock",
    "methods": [],
    "props": {
      "fontFamily": {
        "required": true,
        "tsType": {
          "name": "string"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      }
    }
  },
  {
    "description": "",
    "displayName": "TypographySizeBlock",
    "methods": [],
    "props": {
      "sizes": {
        "required": true,
        "tsType": {
          "name": "any"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      }
    }
  },
  {
    "description": "",
    "displayName": "TypographyWeightBlock",
    "methods": [],
    "props": {
      "weights": {
        "required": true,
        "tsType": {
          "name": "any"
        },
        "description": ""
      },
      "className": {
        "required": false,
        "tsType": {
          "name": "string"
        },
        "description": ""
      }
    }
  },
  {
    "description": "",
    "displayName": "TypographyBlocks",
    "methods": []
  }
]