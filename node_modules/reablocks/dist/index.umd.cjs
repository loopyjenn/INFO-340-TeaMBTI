(function() {
  "use strict";
  try {
    if (typeof document != "undefined") {
      var elementStyle = document.createElement("style");
      elementStyle.appendChild(document.createTextNode("._backdrop_uxwv8_1 {\n  position: fixed;\n  background: var(--color-layer-transparent);\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  opacity: 0;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n}"));
      document.head.appendChild(elementStyle);
    }
  } catch (e) {
    console.error("vite-plugin-css-injected-by-js", e);
  }
})();
(function(global, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require("react"), require("react/jsx-runtime"), require("body-scroll-lock-upgrade"), require("framer-motion"), require("react-dom"), require("classnames"), require("popper.js"), require("tailwind-merge"), require("date-fns"), require("focus-trap-react"), require("name-initials"), require("@marko19907/string-to-color"), require("ellipsize"), require("ctrl-keys"), require("react-highlight-words"), require("@reaviz/react-use-fuzzy"), require("react-fast-compare"), require("react-textarea-autosize"), require("pluralize"), require("human-format"), require("coverup"), require("chroma-js"), require("react-syntax-highlighter"), require("react-syntax-highlighter/dist/cjs/styles/prism/dracula.js"), require("create-global-state-hook")) : typeof define === "function" && define.amd ? define(["exports", "react", "react/jsx-runtime", "body-scroll-lock-upgrade", "framer-motion", "react-dom", "classnames", "popper.js", "tailwind-merge", "date-fns", "focus-trap-react", "name-initials", "@marko19907/string-to-color", "ellipsize", "ctrl-keys", "react-highlight-words", "@reaviz/react-use-fuzzy", "react-fast-compare", "react-textarea-autosize", "pluralize", "human-format", "coverup", "chroma-js", "react-syntax-highlighter", "react-syntax-highlighter/dist/cjs/styles/prism/dracula.js", "create-global-state-hook"], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, factory(global.reablocks = {}, global.React, global.jsxRuntime, global.bodyScrollLockUpgrade, global.framerMotion, global.reactDom, global.classNames, global.PopperJS, global.tailwindMerge, global.dateFns, global.FocusTrap, global.getInitials, global.stringToColor, global.ellipsize, global.keys$1, global.Highlighter, global.reactUseFuzzy, global.isEqual, global.TextareaAutosize, global.pluralizeLib, global.humanFormat, global.coverup, global.chroma, global.reactSyntaxHighlighter, global.dracula, global.creteGlobalStateHook));
})(this, function(exports2, React, jsxRuntime, bodyScrollLockUpgrade, framerMotion, reactDom, classNames, PopperJS, tailwindMerge, dateFns, FocusTrap, getInitials, stringToColor, ellipsize, keys$1, Highlighter, reactUseFuzzy, isEqual, TextareaAutosize, pluralizeLib, humanFormat, coverup, chroma, reactSyntaxHighlighter, dracula, creteGlobalStateHook) {
  "use strict";
  function _interopNamespaceDefault(e) {
    const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
    if (e) {
      for (const k in e) {
        if (k !== "default") {
          const d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: () => e[k]
          });
        }
      }
    }
    n.default = e;
    return Object.freeze(n);
  }
  const React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
  const useExitListener = ({
    ref,
    open = true,
    onClickOutside,
    onEscape
  }) => {
    React.useEffect(() => {
      if (!open) {
        return;
      }
      const handleClick = (event) => {
        if (ref.current && !ref.current.contains(event.target)) {
          onClickOutside == null ? void 0 : onClickOutside(event);
        }
      };
      const handleKey = (event) => {
        if (event.code === "Escape") {
          onEscape == null ? void 0 : onEscape(event);
        }
      };
      if (onClickOutside) {
        document.addEventListener("mousedown", handleClick);
        document.addEventListener("touchstart", handleClick);
      }
      if (onEscape) {
        document.addEventListener("keydown", handleKey);
      }
      return () => {
        if (onClickOutside) {
          document.removeEventListener("mousedown", handleClick);
          document.removeEventListener("touchstart", handleClick);
        }
        if (onEscape) {
          document.removeEventListener("keydown", handleKey);
        }
      };
    }, [ref, onClickOutside, onEscape, open]);
  };
  const OverlayContext = React.createContext({
    close: () => void 0
  });
  let id = 0;
  const genId = () => `ref-${++id}`;
  const useId = (idFromProps) => {
    const [id2] = React.useState(idFromProps || genId());
    return `${id2}`;
  };
  const useUnmount = (fn) => {
    const fnRef = React.useRef(fn);
    fnRef.current = fn;
    React.useLayoutEffect(() => () => fnRef.current(), []);
  };
  const Portal = React.forwardRef(({ children, className, element = "div", onMount, onUnmount }, ref) => {
    const elementRef = React.useRef(null);
    const mounted = React.useRef(false);
    React.useEffect(() => {
      if (className && elementRef.current) {
        elementRef.current.setAttribute("class", `${className} rdk-portal`);
      }
    }, [className, elementRef.current]);
    React.useLayoutEffect(() => {
      elementRef.current = document.createElement(element);
      onMount == null ? void 0 : onMount();
    }, []);
    useUnmount(() => {
      onUnmount == null ? void 0 : onUnmount();
      const ref2 = elementRef.current;
      if (ref2 && document.body.contains(ref2)) {
        document.body.removeChild(ref2);
      }
    });
    React.useImperativeHandle(ref, () => elementRef.current);
    if (!elementRef.current) {
      return null;
    }
    if (!mounted.current) {
      mounted.current = true;
      elementRef.current.classList.add("rdk-portal");
      document.body.appendChild(elementRef.current);
    }
    return reactDom.createPortal(children, elementRef.current);
  });
  const portals = [];
  const START_INDEX = 990;
  const OverlayPortal = React.forwardRef(
    ({ className, children, onMount, onUnmount, appendToBody = true, id: id2 }, ref) => {
      let portalId = useId(id2);
      const [portalIndex, setPortalIndex] = React.useState(null);
      const [overlayIndex, setOverlayIndex] = React.useState(null);
      const portalRef = React.useRef(null);
      React.useImperativeHandle(ref, () => portalRef.current);
      return /* @__PURE__ */ jsxRuntime.jsx(
        Portal,
        {
          className,
          ref: portalRef,
          appendToBody,
          onMount: () => {
            portals.push(portalId);
            let pidx = portals.indexOf(portalId);
            setPortalIndex(pidx);
            const overlayIdx = START_INDEX + pidx * 2 + 1;
            setOverlayIndex(overlayIdx);
            onMount == null ? void 0 : onMount({
              portalId,
              overlayIndex: overlayIdx,
              portalIndex: pidx,
              backdropIndex: overlayIdx
            });
          },
          onUnmount: () => {
            onUnmount == null ? void 0 : onUnmount();
            portals.splice(portals.indexOf(portalId), 1);
            setPortalIndex(null);
            setOverlayIndex(null);
          },
          children: children({
            overlayIndex,
            portalIndex,
            backdropIndex: overlayIndex,
            portalId
          })
        }
      );
    }
  );
  const backdrop = "_backdrop_uxwv8_1";
  const css = {
    backdrop
  };
  const Backdrop = ({
    zIndex = 998,
    portalIndex = 0,
    className,
    onClick
  }) => /* @__PURE__ */ jsxRuntime.jsx(
    framerMotion.motion.div,
    {
      className: classNames(css.backdrop, className),
      initial: { opacity: 0 },
      animate: { opacity: 0.8 - portalIndex / 10 },
      exit: { opacity: 0 },
      style: { zIndex },
      onClick
    }
  );
  const GlobalOverlay = ({
    open,
    hasBackdrop = true,
    closeOnEscape = true,
    closeOnBackdropClick = true,
    backdropClassName,
    children,
    onClose
  }) => {
    const overlayRef = React.useRef(null);
    const onBackdropClick = React.useCallback(() => {
      if (closeOnBackdropClick) {
        onClose == null ? void 0 : onClose();
      }
    }, [closeOnBackdropClick, onClose]);
    useExitListener({
      ref: overlayRef,
      open,
      onEscape: () => closeOnEscape && (onClose == null ? void 0 : onClose())
    });
    React.useEffect(() => {
      if (open && overlayRef.current !== void 0) {
        bodyScrollLockUpgrade.disableBodyScroll(overlayRef.current, {
          // allowTouchMove determines which elements to allow touchmove events for iOS
          // Reference: https://github.com/rick-liruixin/body-scroll-lock-upgrade?tab=readme-ov-file#allowtouchmove
          // NOTE: allowTouchMove is typed wrong: https://github.com/rick-liruixin/body-scroll-lock-upgrade/issues/21
          allowTouchMove: (el) => {
            while (el && el !== document.body) {
              if (el.getAttribute("body-scroll-lock-ignore") !== null) {
                return true;
              }
              if (el.parentElement !== null) {
                el = el.parentElement;
              }
            }
            return false;
          }
        });
      } else {
        bodyScrollLockUpgrade.clearAllBodyScrollLocks();
      }
      return () => {
        bodyScrollLockUpgrade.clearAllBodyScrollLocks();
      };
    }, [children, open]);
    return /* @__PURE__ */ jsxRuntime.jsx(OverlayContext.Provider, { value: { close: () => onClose == null ? void 0 : onClose() }, children: /* @__PURE__ */ jsxRuntime.jsx(framerMotion.AnimatePresence, { children: open && /* @__PURE__ */ jsxRuntime.jsx(OverlayPortal, { ref: overlayRef, children: ({ overlayIndex, portalIndex }) => /* @__PURE__ */ jsxRuntime.jsxs(React.Fragment, { children: [
      hasBackdrop && /* @__PURE__ */ jsxRuntime.jsx(
        Backdrop,
        {
          zIndex: overlayIndex,
          portalIndex,
          onClick: onBackdropClick,
          className: backdropClassName
        }
      ),
      /* @__PURE__ */ jsxRuntime.jsx("div", { "body-scroll-lock-ignore": "true", children: children({ overlayIndex, portalIndex }) })
    ] }) }) }) });
  };
  const OverlayTrigger = React.forwardRef(
    ({
      children,
      className,
      elementType = "span",
      trigger = ["click"],
      onOpen = () => void 0,
      onClose = () => void 0
    }, ref) => {
      const hasTrigger = React.useCallback(
        (type) => {
          if (Array.isArray(trigger)) {
            return trigger.includes(type);
          } else {
            return type === trigger;
          }
        },
        [trigger]
      );
      const onFocus = React.useCallback(
        (event) => {
          if (hasTrigger("focus")) {
            onOpen({ type: "focus", nativeEvent: event });
          }
        },
        [onOpen, hasTrigger]
      );
      const onBlur = React.useCallback(
        (event) => {
          if (hasTrigger("focus")) {
            onClose({ type: "focus", nativeEvent: event });
          }
        },
        [onClose, hasTrigger]
      );
      const onMouseEnter = React.useCallback(
        (event) => {
          if (hasTrigger("hover")) {
            onOpen({ type: "hover", nativeEvent: event });
          }
        },
        [onOpen, hasTrigger]
      );
      const onMouseLeave = React.useCallback(
        (event) => {
          if (hasTrigger("hover")) {
            onClose({ type: "hover", nativeEvent: event });
          }
        },
        [onClose, hasTrigger]
      );
      const onClick = React.useCallback(
        (event) => {
          if (hasTrigger("click")) {
            onOpen({ type: "click", nativeEvent: event });
          }
          if (!hasTrigger("click")) {
            onClose({ type: "hover", nativeEvent: event });
          }
        },
        [onOpen, onClose, hasTrigger]
      );
      const onContextMenu = React.useCallback(
        (event) => {
          if (hasTrigger("contextmenu")) {
            event.preventDefault();
            onOpen({ type: "contextmenu", nativeEvent: event });
          }
        },
        [onOpen]
      );
      const tabIndex = hasTrigger("focus") ? -1 : void 0;
      const Component = elementType;
      return /* @__PURE__ */ jsxRuntime.jsx(
        Component,
        {
          ref,
          tabIndex,
          onMouseEnter,
          onMouseLeave,
          onFocus,
          onBlur,
          onClick,
          onContextMenu,
          className,
          children
        }
      );
    }
  );
  const usePosition = (reference, { followCursor, placement, modifiers } = {}) => {
    const elementRef = React.useRef(null);
    const popper = React.useRef(null);
    const mouse = React.useRef({
      pageX: 0,
      pageY: 0
    });
    const refPointer = reference.current;
    const popperRef = React.useMemo(() => {
      const refObj = reference;
      if (refObj.current !== void 0) {
        return refObj.current;
      }
      const refElement = reference;
      if (followCursor) {
        return {
          getBoundingClientRect: () => ({
            top: mouse.current.pageY,
            right: mouse.current.pageX,
            bottom: mouse.current.pageY,
            left: mouse.current.pageX,
            width: 0,
            height: 0
          }),
          clientWidth: 0,
          clientHeight: 0
        };
      } else if (refElement && !refElement.getBoundingClientRect) {
        const { top, left, width, height } = reference;
        return {
          getBoundingClientRect: () => ({
            top,
            left,
            width,
            bottom: top - height,
            right: left - width,
            height
          }),
          clientWidth: width,
          clientHeight: height
        };
      }
      return refElement;
    }, [followCursor, reference, refPointer, mouse]);
    React.useLayoutEffect(() => {
      let rqf;
      const onMouseMove = ({ pageX, pageY }) => {
        var _a;
        mouse.current = { pageX, pageY };
        (_a = popper.current) == null ? void 0 : _a.scheduleUpdate();
      };
      const onWindowScroll = () => {
        rqf = requestAnimationFrame(() => {
          var _a;
          (_a = popper.current) == null ? void 0 : _a.scheduleUpdate();
        });
      };
      if (elementRef.current && popperRef) {
        popper.current = new PopperJS(popperRef, elementRef.current, {
          placement: placement || "top",
          modifiers: modifiers || {},
          onCreate: () => {
            if (typeof window !== "undefined") {
              window.addEventListener("scroll", onWindowScroll);
              if (followCursor) {
                window.addEventListener("mousemove", onMouseMove);
              }
            }
          }
        });
      }
      return () => {
        var _a;
        if (!elementRef.current) {
          (_a = popper.current) == null ? void 0 : _a.destroy();
          cancelAnimationFrame(rqf);
          if (typeof window !== "undefined") {
            window.removeEventListener("scroll", onWindowScroll);
            if (followCursor) {
              window.removeEventListener("mousemove", onMouseMove);
            }
          }
        }
      };
    }, [elementRef.current]);
    React.useLayoutEffect(() => {
      if (popper.current) {
        popper.current.reference = popperRef;
        popper.current.scheduleUpdate();
      }
    }, [popperRef]);
    return [elementRef, popper];
  };
  const ConnectedOverlayContent = React.forwardRef(
    ({
      triggerRef,
      children,
      portalClassName,
      closeOnBodyClick = true,
      closeOnEscape = true,
      elementType,
      appendToBody = true,
      followCursor,
      modifiers,
      placement = "bottom",
      onClose
    }, ref) => {
      const id2 = useId();
      const [overlayIndex, setOverlayIndex] = React.useState(null);
      const [positionRef, popperRef] = usePosition(triggerRef, {
        followCursor,
        modifiers,
        placement
      });
      React.useImperativeHandle(ref, () => ({
        updatePosition: () => {
          var _a;
          (_a = popperRef == null ? void 0 : popperRef.current) == null ? void 0 : _a.scheduleUpdate();
        }
      }));
      const onClickOutside = React.useCallback(
        (event) => {
          if (closeOnBodyClick) {
            let ref2 = null;
            if (triggerRef.current) {
              ref2 = triggerRef.current;
            } else if (triggerRef.contains !== void 0) {
              ref2 = triggerRef;
            }
            const container = event.target.closest(".rdk-portal");
            const isLast = portals.indexOf(id2) === portals.length - 1;
            if (!(ref2 == null ? void 0 : ref2.contains(event.target)) && (isLast || !container)) {
              onClose == null ? void 0 : onClose(event);
            }
          }
        },
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [closeOnBodyClick, onClose]
      );
      const onEscape = React.useCallback(() => {
        if (closeOnEscape) {
          onClose == null ? void 0 : onClose();
        }
      }, [closeOnEscape, onClose]);
      useExitListener({
        open: true,
        ref: positionRef,
        onClickOutside,
        onEscape
      });
      React.useEffect(() => {
        if (positionRef && overlayIndex) {
          positionRef.current.style.zIndex = overlayIndex;
        }
      }, [positionRef.current, overlayIndex]);
      return /* @__PURE__ */ jsxRuntime.jsx(
        OverlayPortal,
        {
          id: id2,
          ref: positionRef,
          className: portalClassName,
          elementType,
          appendToBody,
          onMount: (event) => setOverlayIndex(event.overlayIndex),
          onUnmount: () => setOverlayIndex(null),
          children
        }
      );
    }
  );
  const ConnectedOverlay = React.forwardRef(
    ({
      reference,
      children,
      open,
      content,
      triggerElement,
      triggerClassName,
      trigger = "click",
      onOpen,
      onClose,
      ...rest
    }, ref) => {
      const mounted = React.useRef(false);
      const overlayTriggerRef = React.useRef(null);
      const contentRef = React.useRef(null);
      const triggerRef = reference || overlayTriggerRef;
      React.useImperativeHandle(ref, () => ({
        updatePosition: () => {
          var _a;
          (_a = contentRef.current) == null ? void 0 : _a.updatePosition();
        }
      }));
      React.useEffect(() => {
        if (mounted.current) {
          if (!open) {
            onClose == null ? void 0 : onClose();
          } else {
            onOpen == null ? void 0 : onOpen();
          }
        }
      }, [open]);
      React.useEffect(() => {
        if (!mounted.current) {
          mounted.current = true;
        }
      });
      const providerValue = React.useMemo(
        () => ({
          close: () => onClose == null ? void 0 : onClose()
        }),
        [onClose]
      );
      return /* @__PURE__ */ jsxRuntime.jsxs(OverlayContext.Provider, { value: providerValue, children: [
        children && /* @__PURE__ */ jsxRuntime.jsx(React.Fragment, { children: trigger ? /* @__PURE__ */ jsxRuntime.jsx(
          OverlayTrigger,
          {
            elementType: triggerElement,
            ref: overlayTriggerRef,
            className: triggerClassName,
            trigger,
            onOpen,
            onClose,
            children
          }
        ) : children }),
        /* @__PURE__ */ jsxRuntime.jsx(framerMotion.AnimatePresence, { children: open && /* @__PURE__ */ jsxRuntime.jsx(
          ConnectedOverlayContent,
          {
            ...rest,
            ref: contentRef,
            triggerRef,
            onClose,
            children: content
          }
        ) })
      ] });
    }
  );
  const useOverlay = () => {
    const context = React.useContext(OverlayContext);
    if (context === void 0) {
      throw new Error(
        "`useOverlay` hook can only be used inside a overlay component."
      );
    }
    return context;
  };
  const baseTheme$H = {
    base: "inline-flex whitespace-no-wrap select-none items-center justify-center px-2.5 py-1 rounded-sm font-sans",
    disabled: "disabled:cursor-not-allowed",
    fullWidth: "flex w-full",
    group: "rounded-none first:rounded-s last:rounded-e border-s-0 first:border-s",
    groupText: "border border-y-transparent border-l-transparent last:border-r-transparent hover:bg-initial",
    adornment: {
      base: "flex",
      start: "pr-1",
      end: "pl-1",
      sizes: {
        small: "[&>svg]:w-3 [&>svg]:h-3",
        medium: "[&>svg]:w-4 [&>svg]:h-4",
        large: "[&>svg]:w-5 [&>svg]:h-5"
      }
    },
    sizes: {
      small: "text-sm px-2 py-1 leading-[normal]",
      medium: "text-base px-4 py-2 leading-[normal]",
      large: "text-xl px-5 py-2.5 leading-[normal]"
    }
  };
  const buttonTheme = {
    base: [baseTheme$H.base, "text-surface-content font-semibold"].join(" "),
    disabled: [
      baseTheme$H.disabled,
      "data-[variant=filled]:disabled:bg-gray-600 disabled:text-gray-400 border-gray-500"
    ].join(" "),
    fullWidth: baseTheme$H.fullWidth,
    group: baseTheme$H.group,
    groupText: baseTheme$H.groupText,
    adornment: baseTheme$H.adornment,
    sizes: baseTheme$H.sizes,
    variants: {
      filled: "bg-secondary hover:bg-border-secondary-hover border-secondary light:text-gray-100",
      outline: "bg-opacity-0 border-grey border",
      text: "bg-opacity-0 border-0"
    },
    colors: {
      default: {
        filled: "bg-gray-800 hover:bg-gray-700 border-gray-800",
        outline: "border-secondary border",
        text: "text-surface-content"
      },
      primary: {
        filled: "bg-primary hover:bg-primary-hover border-primary text-surface-content",
        outline: "border border-primary",
        text: "text-primary hover:text-primary-hover"
      },
      secondary: {
        filled: "bg-secondary hover:bg-secondary-hover !text-surface-content",
        outline: "border border-secondary",
        text: "text-secondary hover:text-secondary-hover"
      },
      success: {
        filled: "bg-success hover:bg-success-hover border-success text-surface-content",
        outline: "border border-success",
        text: "text-success hover:text-success-hover"
      },
      warning: {
        filled: "bg-warning hover:bg-warning-hover border-warning text-surface-content",
        outline: "border border-warning",
        text: "text-warning hover:text-warning-hover"
      },
      error: {
        filled: "bg-error hover:bg-error-hover border-error text-surface-content",
        outline: "border border-error",
        text: "text-error hover:text-error-hover"
      }
    }
  };
  const legacyButtonTheme = {
    base: [
      baseTheme$H.base,
      "[border:_var(--button-border)] rounded-[var(--button-border)] [font-family:_var(--button-font-family)] [font-weight:_var(--button-font-weight)]"
    ].join(" "),
    disabled: [
      baseTheme$H.disabled,
      "data-[variant=filled]:disabled:bg-[var(--disabled-background)] disabled:text-[var(--button-disabled-color-on-background)] border-[var(--disabled-background)]"
    ].join(" "),
    fullWidth: baseTheme$H.fullWidth,
    group: baseTheme$H.group,
    groupText: baseTheme$H.groupText,
    sizes: {
      small: "[font-size:_var(--font-size-sm)] p-[var(--button-spacing-sm)]",
      medium: "[font-size:_var(--font-size-md)] p-[var(--button-spacing-md)]",
      large: "[font-size:_var(--font-size-lg)] p-[var(--button-spacing-lg)]"
    },
    adornment: {
      ...baseTheme$H.adornment,
      start: [
        baseTheme$H.adornment.start,
        "[padding-right:_calc(var(--list-item-spacing)_/_2)]"
      ].join(" "),
      end: [
        baseTheme$H.adornment.start,
        "[padding-left:_calc(var(--list-item-spacing)_/_2)]"
      ].join(" "),
      sizes: {
        small: "[&>svg]:w-[var(--button-adornment-size-sm)] [&>svg]:h-[var(--button-adornment-size-sm)]",
        medium: "[&>svg]:w-[var(--button-adornment-size-md)] [&>svg]:h-[var(--button-adornment-size-md)]",
        large: "[&>svg]:w-[var(--button-adornment-size-lg)] [&>svg]:h-[var(--button-adornment-size-lg)]"
      }
    },
    variants: {
      filled: "bg-[var(--button-background)] text-[var(--button-color-on-background)] hover:bg-[var(--button-background-hover)] border-[var(--button-background)] hover:border-[var(--button-background-hover)]",
      outline: "bg-opacity-0 border-[var(--button-background)] hover:border-[var(--button-background-hover)] text-[var(--button-color)] hover:text-[var(--button-color-hover)] border",
      text: "bg-opacity-0 border-0"
    },
    colors: {
      default: {
        filled: "bg-[var(--button-background)] text-[var(--button-color-on-background)] hover:bg-[var(--button-background-hover)] border-[var(--button-background)] hover:border-[var(--button-background-hover)]",
        outline: "",
        text: "text-[var(--button-color)] hover:text-[var(--button-color-hover)]"
      },
      primary: {
        filled: "bg-[var(--primary-background)] hover:bg-[var(--primary-background-hover)] border-[var(--primary-background)] border-[var(--primary-background-hover)] text-[var(--button-color-on-background)]",
        outline: "",
        text: "text-[var(--primary-color)] hover:text-[var(--primary-color-hover)]"
      },
      secondary: {
        filled: "bg-[var(--secondary-background)] hover:bg-[var(--secondary-background-hover)] border-[var(--secondary-background)] hover:border-[var(--secondary-background-hover)] text-[var(--button-color-on-background)]",
        outline: "",
        text: "text-[var(--secondary-color)] hover:text-[var(--secondary-color-hover)]"
      },
      success: {
        filled: "bg-[var(--success-background)] hover:bg-[var(--success-background-hover)] border-[var(--success-background)] hover:border-[var(--success-background-hover)] text-[var(--button-color-on-background)]",
        outline: "",
        text: "text-[var(--success-color)] hover:text-[var(--success-color-hover)]"
      },
      warning: {
        filled: "bg-[var(--warning-background)] hover:bg-[var(--warning-background-hover)] border-[var(--warning-background)] hover:border-[var(--warning-background-hover)] text-[var(--button-color-on-background)]",
        outline: "",
        text: "text-[var(--warning-color)] hover:text-[var(--warning-color-hover)]"
      },
      error: {
        filled: "bg-[var(--error-background)] hover:bg-[var(--error-background-hover)] border-[var(--error-background)] hover:border-[var(--error-background-hover)] text-[var(--button-color-on-background)]",
        outline: "",
        text: "text-[var(--error-color)] hover:text-[var(--warning-error-hover)]"
      }
    }
  };
  const ButtonGroupContext = React.createContext({
    variant: null,
    size: null
  });
  const Button = React.forwardRef(
    ({
      color: color2 = "default",
      variant = "filled",
      children,
      fullWidth,
      size = "medium",
      disableAnimation,
      className,
      disableMargins,
      disablePadding,
      disabled,
      startAdornment,
      endAdornment,
      theme: customTheme,
      type = "button",
      ...rest
    }, ref) => {
      const theme2 = useComponentTheme("button", customTheme);
      const { variant: groupVariant, size: groupSize } = React.useContext(ButtonGroupContext);
      const isGroup = !!groupVariant && !!groupSize;
      return /* @__PURE__ */ jsxRuntime.jsxs(
        framerMotion.motion.button,
        {
          ...rest,
          type,
          disabled,
          ref,
          whileTap: { scale: disabled || disableAnimation ? 1 : 0.9 },
          "data-variant": groupVariant || variant,
          className: tailwindMerge.twMerge(
            theme2.base,
            theme2.disabled,
            fullWidth && theme2.fullWidth,
            theme2.variants[groupVariant || variant],
            theme2.colors[color2][groupVariant || variant],
            theme2.sizes[groupSize || size],
            isGroup && theme2.group,
            isGroup && groupVariant === "text" && theme2.groupText,
            disableMargins && "m-0",
            disablePadding && "p-0",
            className
          ),
          children: [
            startAdornment && /* @__PURE__ */ jsxRuntime.jsx(
              "div",
              {
                className: tailwindMerge.twMerge(
                  theme2.adornment.base,
                  theme2.adornment.start,
                  theme2.adornment.sizes[size]
                ),
                children: startAdornment
              }
            ),
            children,
            endAdornment && /* @__PURE__ */ jsxRuntime.jsx(
              "div",
              {
                className: tailwindMerge.twMerge(
                  theme2.adornment.base,
                  theme2.adornment.end,
                  theme2.adornment.sizes[size]
                ),
                children: endAdornment
              }
            )
          ]
        }
      );
    }
  );
  const ButtonGroup = ({
    children,
    className,
    variant,
    size
  }) => {
    const values = React.useMemo(
      () => ({
        variant: variant || "filled",
        size: size || "medium"
      }),
      [size, variant]
    );
    return /* @__PURE__ */ jsxRuntime.jsx(ButtonGroupContext.Provider, { value: values, children: /* @__PURE__ */ jsxRuntime.jsx("div", { className, children }) });
  };
  const Chip = React.forwardRef(
    ({
      children,
      color: color2 = "default",
      variant = "filled",
      size = "medium",
      selected,
      disabled,
      className,
      disableMargins,
      start,
      end,
      onClick,
      theme: customTheme,
      ...rest
    }, ref) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m;
      const theme2 = useComponentTheme("chip", customTheme);
      return /* @__PURE__ */ jsxRuntime.jsxs(
        "div",
        {
          ...rest,
          ref,
          tabIndex: onClick ? 0 : -1,
          onClick: !disabled ? onClick : void 0,
          className: tailwindMerge.twMerge(
            theme2.base,
            theme2.variants[variant],
            (_a = theme2.colors[color2]) == null ? void 0 : _a.base,
            (_c = (_b = theme2.colors[color2]) == null ? void 0 : _b.variants) == null ? void 0 : _c[variant],
            theme2.sizes[size],
            theme2.focus,
            !!onClick && !disabled && ((_e = (_d = theme2.colors[color2]) == null ? void 0 : _d.selectable) == null ? void 0 : _e.base),
            !!onClick && !disabled && ((_i = (_h = (_g = (_f = theme2.colors[color2]) == null ? void 0 : _f.selectable) == null ? void 0 : _g.variants) == null ? void 0 : _h[variant]) == null ? void 0 : _i.base),
            selected && ((_m = (_l = (_k = (_j = theme2.colors[color2]) == null ? void 0 : _j.selectable) == null ? void 0 : _k.variants) == null ? void 0 : _l[variant]) == null ? void 0 : _m.selected),
            disableMargins && "m-0",
            "transition-colors duration-300 ease [&>svg]:transition-[fill] [&>svg]:will-change-[fill]",
            className,
            disabled && theme2.disabled
          ),
          "aria-disabled": disabled,
          children: [
            start && /* @__PURE__ */ jsxRuntime.jsx(
              "div",
              {
                className: tailwindMerge.twMerge(
                  theme2.adornment.base,
                  theme2.adornment.start,
                  theme2.adornment.sizes[size]
                ),
                children: start
              }
            ),
            /* @__PURE__ */ jsxRuntime.jsx("div", { className: "flex items-center", children }),
            end && /* @__PURE__ */ jsxRuntime.jsx(
              "div",
              {
                className: tailwindMerge.twMerge(
                  theme2.adornment.base,
                  theme2.adornment.end,
                  theme2.adornment.sizes[size]
                ),
                children: end
              }
            )
          ]
        }
      );
    }
  );
  function getMonthNames(locale, format2 = "short") {
    if (!locale && typeof window !== "undefined") {
      locale = navigator.language;
    }
    const formatter = new Intl.DateTimeFormat(locale, {
      month: format2,
      timeZone: "UTC"
    });
    const months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((month) => {
      const mm = month < 10 ? `0${month}` : month;
      return /* @__PURE__ */ new Date(`2017-${mm}-01T00:00:00+00:00`);
    });
    return months.map((date) => formatter.format(date));
  }
  const monthNames = getMonthNames();
  function getDayLabels(locale) {
    return Array.from({ length: 7 }, (_, i) => {
      if (!locale && typeof window !== "undefined") {
        locale = navigator.language;
      }
      return new Intl.DateTimeFormat(locale, {
        weekday: "short"
      }).format(new Date(1970, 0, 4 + i));
    });
  }
  const daysOfWeek = getDayLabels();
  function getWeeks(date, options = { format: "MM/dd/yyyy" }) {
    if (!date) {
      throw new Error("A date is required");
    } else if (!dateFns.isValid(date)) {
      console.warn("Invalid date - setting to today", date);
      date = /* @__PURE__ */ new Date();
    }
    const daysInMonth = dateFns.getDaysInMonth(date);
    let day = dateFns.startOfMonth(date);
    let offset = dateFns.getDay(day);
    const numOfWeeks = Math.ceil((daysInMonth + offset) / 7);
    const weeks = Array.apply(null, {
      length: numOfWeeks
    }).map(() => []);
    const current = /* @__PURE__ */ new Date();
    const [firstWeek] = weeks;
    for (let i = offset; i > 0; i--) {
      const offsetDay = dateFns.subDays(day, i);
      firstWeek.push({
        date: offsetDay,
        dayOfMonth: dateFns.getDate(offsetDay),
        isWeekendDay: dateFns.getISODay(offsetDay) > 5,
        isPreviousMonth: true,
        isNextMonth: false,
        isToday: false,
        formattedDate: dateFns.format(offsetDay, options.format)
      });
    }
    for (let i = 0, week = weeks[i]; i < numOfWeeks; i++, week = weeks[i]) {
      for (let dayOfWeek = offset; dayOfWeek < 7; dayOfWeek++) {
        week.push({
          date: day,
          dayOfMonth: dateFns.getDate(day),
          isPreviousMonth: false,
          isToday: dateFns.isSameDay(day, current),
          isNextMonth: !dateFns.isSameMonth(day, date),
          isWeekendDay: dateFns.getISODay(day) > 5,
          formattedDate: dateFns.format(day, options.format)
        });
        day = dateFns.addDays(day, 1);
      }
      offset = 0;
    }
    return weeks;
  }
  function getDayAttributes(day, current, hover, isRange) {
    let isActive = false;
    let isRangeStart = false;
    let isRangeEnd = false;
    const isInRange = (date, range) => {
      const startDate = dateFns.min(range);
      const endDate = dateFns.max(range);
      return dateFns.isAfter(date, dateFns.addDays(startDate, -1)) && dateFns.isBefore(date, dateFns.addDays(endDate, 1));
    };
    const isSelectionStarted = Array.isArray(current) && dateFns.isValid(current[0]);
    const isSelectionComplete = isSelectionStarted && dateFns.isValid(current[1]);
    if (!isRange && dateFns.isValid(current)) {
      isActive = dateFns.isSameDay(day, current);
    } else if (!isSelectionStarted) {
      isActive = dateFns.isSameDay(day, hover);
      isRangeStart = isActive;
      isRangeEnd = isActive;
    } else if (isSelectionComplete) {
      isActive = isInRange(day, current);
      isRangeStart = dateFns.isSameDay(day, current[0]);
      isRangeEnd = dateFns.isSameDay(day, current[1]);
    } else {
      const activeRange = [current[0], hover ?? current[0]];
      isActive = isInRange(day, activeRange);
      isRangeStart = dateFns.isSameDay(day, dateFns.min(activeRange));
      isRangeEnd = dateFns.isSameDay(day, dateFns.max(activeRange));
    }
    return { isActive, isRangeStart, isRangeEnd };
  }
  function isNextWeekEmpty(day, range, hideNextMonth) {
    const nextWeek = dateFns.addDays(day, 7);
    const nextWeekInRange = dateFns.isBefore(nextWeek, dateFns.max(range)) || dateFns.isSameDay(nextWeek, dateFns.max(range));
    return !(nextWeekInRange && (dateFns.isSameMonth(day, nextWeek) || !hideNextMonth));
  }
  function isPreviousWeekEmpty(day, range, hidePrevMonth) {
    const prevWeek = dateFns.addDays(day, -7);
    const prevWeekInRange = dateFns.isAfter(prevWeek, dateFns.min(range)) || dateFns.isSameDay(prevWeek, dateFns.min(range));
    return !(prevWeekInRange && (dateFns.isSameMonth(day, prevWeek) || !hidePrevMonth));
  }
  const CalendarDays = ({
    value,
    current,
    hover = null,
    isRange,
    disabled,
    min: minLimit,
    max,
    animated,
    xAnimation = 0,
    showDayOfWeek,
    dayOfWeekLabels = daysOfWeek,
    hidePrevMonthDays,
    hideNextMonthDays,
    onChange,
    onHover,
    theme: customTheme
  }) => {
    const { days } = useComponentTheme("calendar", customTheme);
    const [hoveringDate, setHoveringDate] = React.useState(hover);
    const weeks = React.useMemo(() => getWeeks(value), [value]);
    const maxLimit = React.useMemo(() => max === "now" ? /* @__PURE__ */ new Date() : max, [max]);
    const renderDay = React.useCallback(
      (day) => {
        if (day.isPreviousMonth && hidePrevMonthDays || day.isNextMonth && hideNextMonthDays) {
          return /* @__PURE__ */ jsxRuntime.jsx("div", {}, day.dayOfMonth);
        }
        const handleHover = (value2) => {
          if (onHover) {
            onHover(value2);
          } else {
            setHoveringDate(value2);
          }
        };
        const isDisabled = disabled || minLimit && dateFns.isBefore(day.date, minLimit) || maxLimit && dateFns.isAfter(day.date, maxLimit);
        const currentHover = hover || hoveringDate;
        const { isActive, isRangeStart, isRangeEnd } = getDayAttributes(
          day.date,
          current,
          currentHover,
          isRange
        );
        const currentRange = Array.isArray(current) ? [current[0], current[1] ?? currentHover] : [current ?? hoveringDate, current ?? hoveringDate];
        const isRangeMiddle = isRange && isActive && !isRangeStart && !isRangeEnd;
        const rangeConnectsBottom = isRangeStart && isNextWeekEmpty(day.date, currentRange, hideNextMonthDays);
        const rangeConnectsTop = isRangeEnd && isPreviousWeekEmpty(day.date, currentRange, hidePrevMonthDays);
        const colorVariant = isActive ? "primary" : "default";
        const buttonVariant = isActive ? "filled" : "text";
        return /* @__PURE__ */ jsxRuntime.jsx(
          Button,
          {
            className: tailwindMerge.twMerge(
              days.day,
              !isActive && (day.isNextMonth || day.isPreviousMonth) && days.outside,
              isRangeMiddle && days.range,
              isRange && isRangeStart && !isRangeEnd && days.startRangeDate,
              isRange && !rangeConnectsBottom && days.cornerStartDateBottom,
              isRange && isRangeEnd && !isRangeStart && days.endRangeDate,
              isRange && !rangeConnectsTop && days.cornerEndDateTop
            ),
            onMouseEnter: () => handleHover(day.date),
            onMouseLeave: () => handleHover(null),
            variant: buttonVariant,
            color: colorVariant,
            disableMargins: true,
            disabled: isDisabled,
            title: day.formattedDate,
            onClick: () => onChange(day.date),
            children: day.dayOfMonth
          },
          day.formattedDate
        );
      },
      [
        disabled,
        minLimit,
        maxLimit,
        current,
        hover,
        isRange,
        onChange,
        onHover,
        hoveringDate,
        days,
        hideNextMonthDays,
        hidePrevMonthDays
      ]
    );
    return /* @__PURE__ */ jsxRuntime.jsx(framerMotion.AnimatePresence, { mode: "popLayout", children: /* @__PURE__ */ jsxRuntime.jsxs(
      framerMotion.motion.div,
      {
        initial: { opacity: 0, x: xAnimation },
        animate: { opacity: 1, x: 0 },
        transition: {
          x: { type: animated ? "keyframes" : false },
          opacity: { duration: 0.2, type: animated ? "tween" : false }
        },
        children: [
          showDayOfWeek && /* @__PURE__ */ jsxRuntime.jsx("div", { className: tailwindMerge.twMerge(days.header), children: dayOfWeekLabels.map((day) => /* @__PURE__ */ jsxRuntime.jsx("div", { className: tailwindMerge.twMerge(days.dayOfWeek), children: day.substring(0, 2) }, `day-${day}`)) }),
          weeks.map((week, i) => /* @__PURE__ */ jsxRuntime.jsx("div", { className: tailwindMerge.twMerge(days.week), children: week.map(renderDay) }, `week-${i}`))
        ]
      },
      value.toString()
    ) });
  };
  const CalendarMonths = ({
    value,
    onChange,
    theme: customTheme
  }) => {
    const { months } = useComponentTheme("calendar", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsx("div", { className: tailwindMerge.twMerge(months.root), children: monthNames.map((month, i) => /* @__PURE__ */ jsxRuntime.jsx(
      Button,
      {
        className: tailwindMerge.twMerge(months.month),
        color: value === i ? "primary" : "default",
        variant: value === i ? "filled" : "text",
        disableMargins: true,
        title: month,
        onClick: () => onChange(i),
        children: month
      },
      month
    )) });
  };
  const CalendarYears = ({
    decadeStart,
    decadeEnd,
    value,
    animated,
    xAnimation = 0,
    onChange,
    theme: customTheme
  }) => {
    const { years } = useComponentTheme("calendar", customTheme);
    const yearDates = React.useMemo(() => {
      const arr = [];
      const start = decadeStart.getFullYear();
      const end = decadeEnd.getFullYear();
      for (let i = start - 1; i < end + 2; i++) {
        arr.push(i);
      }
      return arr;
    }, [decadeEnd, decadeStart]);
    return /* @__PURE__ */ jsxRuntime.jsx(framerMotion.AnimatePresence, { mode: "popLayout", children: /* @__PURE__ */ jsxRuntime.jsx(
      framerMotion.motion.div,
      {
        className: tailwindMerge.twMerge(years.root),
        initial: { opacity: 0, x: xAnimation },
        animate: { opacity: 1, x: 0 },
        transition: {
          x: { type: animated ? "keyframes" : false },
          opacity: { duration: 0.2, type: animated ? "tween" : false }
        },
        children: yearDates.map((year) => /* @__PURE__ */ jsxRuntime.jsx(
          Button,
          {
            className: tailwindMerge.twMerge(years.year),
            color: value === year ? "primary" : "default",
            variant: value === year ? "filled" : "text",
            disableMargins: true,
            title: year,
            onClick: () => onChange(year),
            children: year
          },
          year
        ))
      },
      `${decadeStart.toString()}-${decadeEnd.toString()}`
    ) });
  };
  const PageTitle = React.forwardRef(
    ({
      children,
      color: color2 = "default",
      variant = "default",
      disableMargins = false,
      className,
      theme: customTheme,
      ...rest
    }, ref) => {
      const theme2 = useComponentTheme("typography", customTheme);
      return /* @__PURE__ */ jsxRuntime.jsx(
        "h1",
        {
          ref,
          className: tailwindMerge.twMerge(
            theme2.colors[color2],
            theme2.variant[variant],
            theme2.pageTitle,
            disableMargins && theme2.disableMargins,
            className
          ),
          ...rest,
          children
        }
      );
    }
  );
  const PrimaryHeading = React.forwardRef(
    ({
      children,
      color: color2 = "default",
      variant = "default",
      disableMargins = false,
      className,
      theme: customTheme,
      ...rest
    }, ref) => {
      const theme2 = useComponentTheme(
        "typography",
        customTheme
      );
      return /* @__PURE__ */ jsxRuntime.jsx(
        "h2",
        {
          ref,
          className: tailwindMerge.twMerge(
            theme2.colors[color2],
            theme2.variant[variant],
            theme2.primaryHeading,
            disableMargins && theme2.disableMargins,
            className
          ),
          ...rest,
          children
        }
      );
    }
  );
  const SecondaryHeading = React.forwardRef(
    ({
      children,
      color: color2 = "default",
      variant = "default",
      disableMargins = false,
      className,
      theme: customTheme,
      ...rest
    }, ref) => {
      const theme2 = useComponentTheme(
        "typography",
        customTheme
      );
      return /* @__PURE__ */ jsxRuntime.jsx(
        "h3",
        {
          ref,
          className: tailwindMerge.twMerge(
            theme2.colors[color2],
            theme2.variant[variant],
            theme2.secondaryHeading,
            disableMargins && theme2.disableMargins,
            className
          ),
          ...rest,
          children
        }
      );
    }
  );
  const SmallHeading = React.forwardRef(
    ({
      children,
      color: color2 = "default",
      variant = "default",
      disableMargins = false,
      className,
      theme: customTheme,
      ...rest
    }, ref) => {
      const theme2 = useComponentTheme("typography", customTheme);
      return /* @__PURE__ */ jsxRuntime.jsx(
        "h5",
        {
          ref,
          className: tailwindMerge.twMerge(
            theme2.colors[color2],
            theme2.variant[variant],
            theme2.smallHeading,
            disableMargins && theme2.disableMargins,
            className
          ),
          ...rest,
          children
        }
      );
    }
  );
  const Sub = React.forwardRef(
    ({
      color: color2 = "default",
      variant = "default",
      disableMargins = false,
      children,
      className,
      theme: customTheme,
      ...rest
    }, ref) => {
      const theme2 = useComponentTheme("typography", customTheme);
      return /* @__PURE__ */ jsxRuntime.jsx(
        "h6",
        {
          ref,
          className: tailwindMerge.twMerge(
            theme2.colors[color2],
            theme2.variant[variant],
            theme2.sub,
            disableMargins && theme2.disableMargins,
            className
          ),
          ...rest,
          children
        }
      );
    }
  );
  const Text = React.forwardRef(
    ({
      color: color2 = "default",
      variant = "default",
      fontStyle = "default",
      children,
      className,
      theme: customTheme,
      ...rest
    }, ref) => {
      const theme2 = useComponentTheme("typography", customTheme);
      return /* @__PURE__ */ jsxRuntime.jsx(
        "span",
        {
          ref,
          className: tailwindMerge.twMerge(
            theme2.colors[color2],
            theme2.variant[variant],
            theme2.text[fontStyle],
            className
          ),
          ...rest,
          children
        }
      );
    }
  );
  const baseTheme$G = {
    text: {
      thin: "font-thin",
      bold: "font-semibold",
      extraBold: "font-extrabold",
      italic: "italic"
    },
    variant: {
      default: "",
      mono: "font-mono"
    },
    colors: {
      primary: "text-primary",
      secondary: "text-secondary",
      success: "text-success",
      warning: "text-warning",
      error: "text-error",
      info: "text-info"
    },
    sub: "text-xs font-semibold mb-0.5",
    smallHeading: "text-base font-normal mb-1",
    secondaryHeading: "text-3xl font-normal mb-1",
    primaryHeading: "text-3xl font-extrabold mb-1",
    pageTitle: "text-[40px] font-semibold mb-5",
    disableMargins: "m-0"
  };
  const typographyTheme = {
    ...baseTheme$G
  };
  const legacyTypographyTheme = {
    ...baseTheme$G,
    colors: {
      primary: "text-[var(--primary-color)]",
      secondary: "text-[var(--secondary-color)]",
      success: "text-[var(--success-color)]",
      warning: "text-[var(--warning-color)]",
      error: "text-[var(--error-color)]",
      info: "text-[var(--info-color)]"
    },
    pageTitle: "[font-family:_var(--font-family)] [font-size:_var(--page-title-font-size)] [font-weight:_var(--page-title-font-weight)] color-[var(--page-title-color)] m-[var(--page-title-margin)]",
    primaryHeading: "[font-family:_var(--font-family)] [font-size:_var(--primary-heading-font-size)] [font-weight:_var(--primary-heading-font-weight)] text-[var(--primary-heading-color)] m-[var(--primary-heading-margin)]",
    secondaryHeading: "[font-family:_var(--font-family)] [font-size:_var(--secondary-heading-font-size)] [font-weight:_var(--secondary-heading-font-weight)] text-[var(--secondary-heading-color)] m-[var(--secondary-heading-margin)]",
    smallHeading: "[font-family:_var(--font-family)] [font-size:_var(--small-heading-font-size)] [font-weight:_var(--small-heading-font-weight)] text-[var(--small-heading-color)] m-[var(--small-heading-margin)]",
    sub: "[font-size:_var(--sub-font-size)] [font-weight:_var(--sub-font-weight)] text-[var(--sub-color)] m-[var(--sub-margin)]",
    text: {
      ...baseTheme$G.text,
      thin: "[font-weight:_var(--font-weight-thin)]",
      bold: "[font-weight:_var(--font-weight-bold)]",
      extraBold: "[font-weight:_var(--font-weight-extraBold)]"
    }
  };
  const Divider = ({
    className,
    disableMargins = false,
    orientation = "horizontal",
    variant = "primary",
    theme: customTheme,
    ...rest
  }) => {
    const theme2 = useComponentTheme("divider", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsx(
      "hr",
      {
        ...rest,
        className: tailwindMerge.twMerge(
          theme2.base,
          theme2.variant[variant],
          theme2.orientation[orientation],
          disableMargins && theme2.disableMargins,
          className
        )
      }
    );
  };
  const baseTheme$F = {
    base: "border-none",
    orientation: {
      horizontal: "h-px w-full my-2.5",
      vertical: "w-px h-full mx-2.5"
    },
    variant: {
      primary: "bg-surface",
      secondary: "bg-gradient-to-r from-transparent to-transparent via-blue-500"
    },
    disableMargins: "my-0 mx-0"
  };
  const dividerTheme = {
    ...baseTheme$F
  };
  const legacyDividerTheme = {
    ...baseTheme$F,
    base: [baseTheme$F.base, "bg-[var(--divider-background)]"].join(" "),
    orientation: {
      horizontal: [
        baseTheme$F.orientation.horizontal,
        "my-[var(--divider-spacing)]"
      ].join(" "),
      vertical: [
        baseTheme$F.orientation.vertical,
        " mx-[var(--divider-spacing)]"
      ].join(" ")
    }
  };
  const Calendar = ({
    min,
    max,
    value,
    disabled,
    isRange,
    previousArrow = "←",
    nextArrow = "→",
    showDayOfWeek,
    animated = true,
    onChange,
    onViewChange,
    theme: customTheme
  }) => {
    const theme2 = useComponentTheme("calendar", customTheme);
    const date = React.useMemo(
      () => Array.isArray(value) ? value[0] : value ?? /* @__PURE__ */ new Date(),
      [value]
    );
    const rangeStart = React.useMemo(
      () => isRange && Array.isArray(value) ? value == null ? void 0 : value[0] : void 0,
      [isRange, value]
    );
    const rangeEnd = React.useMemo(
      () => isRange && Array.isArray(value) ? value == null ? void 0 : value[1] : void 0,
      [isRange, value]
    );
    const [viewValue, setViewValue] = React.useState(date);
    const [monthValue, setMonthValue] = React.useState(dateFns.getMonth(date));
    const [yearValue, setYearValue] = React.useState(dateFns.getYear(date));
    const [decadeStart, setDecadeStart] = React.useState(dateFns.startOfDecade(date));
    const [decadeEnd, setDecadeEnd] = React.useState(dateFns.endOfDecade(date));
    const [view, setView] = React.useState("days");
    const [scrollDirection, setScrollDirection] = React.useState(null);
    const previousClickHandler = React.useCallback(() => {
      setScrollDirection("back");
      if (view === "days") {
        setViewValue(dateFns.sub(viewValue, { months: 1 }));
      } else if (view === "months") {
        setYearValue(yearValue - 1);
      } else {
        setDecadeStart(dateFns.subYears(decadeStart, 10));
        setDecadeEnd(dateFns.subYears(decadeEnd, 10));
      }
    }, [decadeEnd, decadeStart, view, viewValue, yearValue]);
    const nextClickHandler = React.useCallback(() => {
      setScrollDirection("forward");
      if (view === "days") {
        setViewValue(dateFns.add(viewValue, { months: 1 }));
      } else if (view === "months") {
        setYearValue(yearValue + 1);
      } else {
        setDecadeStart(dateFns.addYears(decadeStart, 10));
        setDecadeEnd(dateFns.addYears(decadeEnd, 10));
      }
    }, [decadeEnd, decadeStart, view, viewValue, yearValue]);
    const headerClickHandler = React.useCallback(() => {
      const newView = view === "days" ? "months" : "years";
      setScrollDirection(null);
      setView(newView);
      onViewChange == null ? void 0 : onViewChange(newView);
    }, [onViewChange, view]);
    const dateChangeHandler = React.useCallback(
      (date2) => {
        if (!isRange) {
          onChange == null ? void 0 : onChange(date2);
          setMonthValue(dateFns.getMonth(date2));
          setYearValue(dateFns.getYear(date2));
        } else if (!rangeStart) {
          onChange == null ? void 0 : onChange([date2, void 0]);
        } else if (!rangeEnd) {
          const range = [rangeStart, date2];
          onChange == null ? void 0 : onChange([dateFns.min(range), dateFns.max(range)]);
        } else {
          onChange == null ? void 0 : onChange([date2, void 0]);
        }
      },
      [isRange, onChange, rangeEnd, rangeStart]
    );
    const monthsChangeHandler = React.useCallback(
      (month) => {
        setViewValue(dateFns.setMonth(dateFns.setYear(min || /* @__PURE__ */ new Date(), yearValue), month));
        setMonthValue(month);
        setView("days");
        onViewChange == null ? void 0 : onViewChange("days");
      },
      [min, yearValue, onViewChange]
    );
    const yearChangeHandler = React.useCallback(
      (year) => {
        setViewValue(dateFns.setYear(min || /* @__PURE__ */ new Date(), year));
        setYearValue(year);
        setView("months");
        onViewChange == null ? void 0 : onViewChange("months");
      },
      [min, onViewChange]
    );
    const xAnimation = React.useMemo(() => {
      switch (scrollDirection) {
        case "forward":
          return "100%";
        case "back":
          return "-100%";
        default:
          return 0;
      }
    }, [scrollDirection]);
    return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: tailwindMerge.twMerge(theme2.base), children: [
      /* @__PURE__ */ jsxRuntime.jsxs("header", { className: tailwindMerge.twMerge(theme2.header.base), children: [
        /* @__PURE__ */ jsxRuntime.jsx(
          Button,
          {
            variant: "text",
            disabled,
            onClick: previousClickHandler,
            className: tailwindMerge.twMerge(theme2.header.prev),
            disablePadding: true,
            children: previousArrow
          }
        ),
        /* @__PURE__ */ jsxRuntime.jsx(
          Button,
          {
            disabled,
            variant: "text",
            onClick: headerClickHandler,
            className: tailwindMerge.twMerge(theme2.header.mid),
            disablePadding: true,
            fullWidth: true,
            children: /* @__PURE__ */ jsxRuntime.jsxs(SmallHeading, { disableMargins: true, className: tailwindMerge.twMerge(theme2.title), children: [
              view === "days" && dateFns.format(viewValue, "MMMM"),
              view === "months" && /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: yearValue }),
              view === "years" && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
                decadeStart.getFullYear(),
                "-",
                decadeEnd.getFullYear()
              ] })
            ] })
          }
        ),
        /* @__PURE__ */ jsxRuntime.jsx(
          Button,
          {
            variant: "text",
            disabled,
            onClick: nextClickHandler,
            className: tailwindMerge.twMerge(theme2.header.next),
            disablePadding: true,
            children: nextArrow
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntime.jsx(Divider, {}),
      /* @__PURE__ */ jsxRuntime.jsx(framerMotion.AnimatePresence, { initial: false, mode: "wait", children: /* @__PURE__ */ jsxRuntime.jsxs(
        framerMotion.motion.div,
        {
          className: tailwindMerge.twMerge(theme2.content),
          initial: { scale: 0, opacity: 0 },
          animate: { scale: 1, opacity: 1 },
          exit: { scale: 0, opacity: 1 },
          transition: {
            x: { type: animated ? "keyframes" : false },
            opacity: { duration: 0.2, type: animated ? "tween" : false },
            scale: { type: animated ? "tween" : false }
          },
          children: [
            view === "days" && /* @__PURE__ */ jsxRuntime.jsx(
              CalendarDays,
              {
                value: viewValue,
                min,
                max,
                disabled,
                isRange,
                current: isRange ? [rangeStart, rangeEnd] : value,
                showDayOfWeek,
                xAnimation,
                animated,
                onChange: dateChangeHandler
              }
            ),
            view === "months" && /* @__PURE__ */ jsxRuntime.jsx(
              CalendarMonths,
              {
                value: monthValue,
                animated,
                onChange: monthsChangeHandler
              }
            ),
            view === "years" && /* @__PURE__ */ jsxRuntime.jsx(
              CalendarYears,
              {
                decadeStart,
                decadeEnd,
                animated,
                value: yearValue,
                xAnimation,
                onChange: yearChangeHandler
              }
            )
          ]
        },
        view
      ) })
    ] });
  };
  const VARIANTS$1 = {
    open: {
      opacity: 1,
      height: "auto"
    },
    collapsed: {
      opacity: 0,
      height: 0
    }
  };
  const TRANSITION = {
    duration: 0.5,
    ease: [0.04, 0.62, 0.23, 0.98],
    when: "beforeChildren"
  };
  const Collapse = ({
    children,
    expanded,
    className,
    theme: customTheme,
    ...rest
  }) => {
    const theme2 = useComponentTheme("collapse", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsx(framerMotion.AnimatePresence, { initial: false, children: expanded && /* @__PURE__ */ React.createElement(
      framerMotion.motion.section,
      {
        ...rest,
        className: tailwindMerge.twMerge(theme2.base, className),
        key: "content",
        initial: "collapsed",
        animate: "open",
        exit: "collapsed",
        variants: VARIANTS$1,
        transition: TRANSITION
      },
      typeof children === "function" ? children() : children
    ) });
  };
  const baseTheme$E = {
    base: "will-change-[height,opacity] overflow-hidden"
  };
  const collapseTheme = {
    ...baseTheme$E
  };
  const legacyCollapseTheme = {
    ...baseTheme$E
  };
  const groupVariants = {
    initial: {
      transition: {
        staggerChildren: 0.05,
        staggerDirection: -1
      }
    },
    animate: {
      transition: {
        staggerChildren: 0.07,
        delayChildren: 0.2
      }
    }
  };
  const MotionGroup = ({ children, ...rest }) => /* @__PURE__ */ jsxRuntime.jsx(
    framerMotion.motion.div,
    {
      variants: groupVariants,
      initial: "initial",
      animate: "animate",
      ...rest,
      children
    }
  );
  const verticalVariant = {
    initial: {
      y: -20,
      opacity: 0,
      transition: {
        when: "beforeChildren"
      }
    },
    animate: {
      y: 0,
      opacity: 1,
      transition: {
        when: "beforeChildren"
      }
    },
    exit: {
      y: -20,
      opacity: 0
    }
  };
  const horizontalVariants = {
    initial: {
      x: "-100%",
      opacity: 0,
      transition: {
        when: "beforeChildren",
        x: { stiffness: 10 }
      }
    },
    animate: {
      x: "0%",
      opacity: 1,
      transition: {
        x: { stiffness: 10, velocity: -100 },
        when: "beforeChildren",
        opacity: { duration: 1 }
      }
    },
    exit: {
      x: "-100%",
      opacity: 0,
      transition: {
        x: { stiffness: 10 }
      }
    }
  };
  const MotionItem = ({
    children,
    direction = "vertical",
    ...rest
  }) => /* @__PURE__ */ jsxRuntime.jsx(
    framerMotion.motion.div,
    {
      variants: direction === "vertical" ? verticalVariant : horizontalVariants,
      ...rest,
      children
    }
  );
  const List = React.forwardRef(({ className, children, theme: customTheme, ...rest }, ref) => {
    const theme2 = useComponentTheme("list", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        ...rest,
        ref,
        role: "list",
        className: tailwindMerge.twMerge(theme2.base, className),
        children
      }
    );
  });
  const ListItem = React.forwardRef(
    ({
      className,
      children,
      active,
      disabled,
      disablePadding,
      disableGutters,
      start,
      end,
      dense,
      onClick,
      theme: customTheme,
      ...rest
    }, ref) => {
      const theme2 = useComponentTheme("list", customTheme);
      return /* @__PURE__ */ jsxRuntime.jsxs(
        "div",
        {
          ...rest,
          ref,
          role: onClick ? "button" : "listitem",
          tabIndex: onClick ? 0 : void 0,
          onClick: (e) => !disabled && (onClick == null ? void 0 : onClick(e)),
          className: tailwindMerge.twMerge(
            theme2.listItem.base,
            dense && theme2.listItem.dense.base,
            disabled && theme2.listItem.disabled,
            active && theme2.listItem.active,
            onClick && !disabled && theme2.listItem.clickable,
            disablePadding && theme2.listItem.disablePadding,
            disableGutters && theme2.listItem.disableGutters,
            className
          ),
          children: [
            start && /* @__PURE__ */ jsxRuntime.jsx(
              "div",
              {
                className: tailwindMerge.twMerge(
                  theme2.listItem.adornment.base,
                  theme2.listItem.adornment.start,
                  dense && theme2.listItem.dense.startAdornment
                ),
                children: start
              }
            ),
            /* @__PURE__ */ jsxRuntime.jsx(
              "div",
              {
                className: tailwindMerge.twMerge(
                  theme2.listItem.content,
                  dense && theme2.listItem.dense.content
                ),
                children
              }
            ),
            end && /* @__PURE__ */ jsxRuntime.jsx(
              "div",
              {
                className: tailwindMerge.twMerge(
                  theme2.listItem.adornment.base,
                  theme2.listItem.adornment.end,
                  dense && theme2.listItem.dense.endAdornment
                ),
                children: end
              }
            )
          ]
        }
      );
    }
  );
  const ListHeader = ({
    className,
    children,
    theme: customTheme,
    ...rest
  }) => {
    const theme2 = useComponentTheme("list", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsx(Sub, { ...rest, className: tailwindMerge.twMerge(className, theme2.header), children });
  };
  const baseTheme$D = {
    base: "flex flex-col",
    header: "pl-2 pr-2",
    listItem: {
      base: "items-center flex p-2.5 relative rounded-none",
      disabled: "cursor-not-allowed",
      active: "underline",
      clickable: "cursor-pointer transition-color duration-300 ease-linear transition-bg duration-300 ease-linear hover:color-inherit hover:bg-transparent",
      disablePadding: "p-0",
      disableGutters: "pl-0 pr-0",
      dense: {
        base: "p-1",
        content: "text-xs",
        startAdornment: "pr-[calc(5/2)]",
        endAdornment: "pl-[calc(5/2)]"
      },
      adornment: {
        base: "items-center flex",
        start: "pr-1",
        end: "pl-1",
        svg: "fill-current"
      },
      content: "text-sm overflow-wrap break-word word-wrap break-all flex-1"
    }
  };
  const listTheme = {
    ...baseTheme$D,
    base: [baseTheme$D.base, "text-surface-content"].join(" "),
    header: [baseTheme$D.header, "text-surface-content"].join(" ")
  };
  const legacyListTheme = {
    ...baseTheme$D,
    base: [baseTheme$D.base, "text-[var(--list-item-color)]"].join(" "),
    header: [
      baseTheme$D.header,
      "pl-[var(--spacing-md)] pr-[var(--spacing-md)]"
    ].join(" "),
    listItem: {
      ...baseTheme$D.listItem,
      base: [
        baseTheme$D.listItem.base,
        "p-[var(--list-item-spacing)] text-[var(--list-item-color)] rounded-[var(--list-item-border-radius)]"
      ].join(" "),
      clickable: [
        baseTheme$D.listItem.clickable,
        "hover:text-[var(--list-item-color-active)] hover:bg-[var(--list-item-background-active)]"
      ].join(" "),
      dense: {
        ...baseTheme$D.listItem.dense,
        base: [
          baseTheme$D.listItem.dense.base,
          "[padding:_var(--list-item-dense-spacing)]"
        ].join(" "),
        startAdornment: [
          baseTheme$D.listItem.dense.startAdornment,
          "[padding-right:_calc(var(--spacing-md)_/_2)]"
        ].join(" "),
        endAdornment: [
          baseTheme$D.listItem.dense.endAdornment,
          "[padding-left:_calc(var(--spacing-md)_/_2)]"
        ].join(" ")
      },
      adornment: {
        ...baseTheme$D.listItem.adornment,
        start: [
          baseTheme$D.listItem.adornment.start,
          "[padding-right:_calc(var(--spacing-sm)_/_2)]"
        ].join(" "),
        end: [
          baseTheme$D.listItem.adornment.start,
          "[padding-left:_calc(var(--spacing-sm)_/_2)]"
        ].join(" "),
        svg: [
          baseTheme$D.listItem.adornment.svg,
          "fill:[var(--list-item-adornment-fill)]"
        ].join(" ")
      }
    }
  };
  const Block = ({
    label,
    children,
    disableMargin,
    labelClassName,
    className,
    required,
    direction = "vertical",
    alignment = "start",
    onTitleClick,
    theme: customTheme,
    ...rest
  }) => {
    const theme2 = useComponentTheme("block", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "section",
      {
        ...rest,
        className: tailwindMerge.twMerge(
          theme2.base,
          disableMargin && theme2.disableMargin,
          direction === "horizontal" && theme2.horizontal.base,
          direction === "vertical" && theme2.vertical.base,
          alignment === "end" && theme2.endAlign,
          alignment === "center" && theme2.centerAlign,
          className
        ),
        children: [
          label && /* @__PURE__ */ jsxRuntime.jsxs(
            "label",
            {
              className: tailwindMerge.twMerge(
                theme2.label,
                direction === "horizontal" && theme2.horizontal.label,
                direction === "vertical" && theme2.vertical.label,
                labelClassName
              ),
              onClick: onTitleClick,
              children: [
                label,
                `${required ? " *" : ""}`
              ]
            }
          ),
          children
        ]
      }
    );
  };
  const baseTheme$C = {
    base: "mb-2.5",
    disableMargin: "mb-0",
    label: "text-xs",
    centerAlign: "items-center",
    endAlign: "items-end",
    horizontal: {
      base: "flex flex-row items-baseline",
      label: "mr-0.5 whitespace-nowrap"
    },
    vertical: {
      base: "block",
      label: "block mb-0.5"
    }
  };
  const blockTheme = {
    ...baseTheme$C
  };
  const legacyBlockTheme = {
    ...baseTheme$C,
    base: "mb-[var(--block-spacing)]",
    label: [
      baseTheme$C.label,
      "[font-size:_var(--block-label-size)] [font-weight:_var(--block-label-weight)]"
    ].join(" "),
    horizontal: {
      ...baseTheme$C.horizontal,
      label: [baseTheme$C.horizontal.label, "mr-[var(--block-label-spacing)]"].join(
        " "
      )
    },
    vertical: {
      ...baseTheme$C.vertical,
      label: [baseTheme$C.vertical.label, "mb-[var(--block-label-spacing)]"].join(
        " "
      )
    }
  };
  const baseTheme$B = {
    base: "relative flex flex-col p-7 rounded-sm",
    disablePadding: "p-0",
    header: "flex items-center",
    headerText: "text-sm font-medium mt-0 mb-1",
    content: "flex-1"
  };
  const cardTheme = {
    ...baseTheme$B,
    base: [
      baseTheme$B.base,
      "bg-panel border border-panel-accent text-panel-content"
    ].join(" ")
  };
  const legacyCardTheme = {
    ...baseTheme$B,
    base: [
      baseTheme$B.base,
      "[padding:_var(--card-spacing)] bg-[var(--card-background)] text-[var(--card-color)] [border:_var(--card-border)] rounded-[var(--card-border-radius)]"
    ].join(" "),
    headerText: [baseTheme$B.headerText, "mb-[var(--spacing-md)]"].join(" ")
  };
  const Card = React.forwardRef(
    ({
      children,
      disablePadding,
      className,
      header,
      headerClassName,
      contentClassName,
      theme: customTheme,
      ...rest
    }, ref) => {
      const theme2 = useComponentTheme("card", customTheme);
      return /* @__PURE__ */ jsxRuntime.jsxs(
        "section",
        {
          ...rest,
          ref,
          className: tailwindMerge.twMerge(
            theme2.base,
            disablePadding && theme2.disablePadding,
            className
          ),
          children: [
            header && /* @__PURE__ */ jsxRuntime.jsx("header", { className: tailwindMerge.twMerge(theme2.header, headerClassName), children: header && typeof header === "string" ? /* @__PURE__ */ jsxRuntime.jsx("h3", { className: theme2.headerText, children: header }) : header }),
            /* @__PURE__ */ jsxRuntime.jsx("div", { className: tailwindMerge.twMerge(theme2.content, contentClassName), children })
          ]
        }
      );
    }
  );
  const Stack = React.forwardRef(
    ({
      children,
      className,
      direction = "row",
      dense = false,
      inline = false,
      alignItems = "center",
      justifyContent = "start",
      theme: customTheme,
      ...otherProps
    }, ref) => {
      const theme2 = useComponentTheme("stack", customTheme);
      return /* @__PURE__ */ jsxRuntime.jsx(
        "div",
        {
          className: tailwindMerge.twMerge(
            theme2.base,
            dense && theme2.dense,
            inline && theme2.inline,
            theme2.direction[direction],
            theme2.alignItems[alignItems],
            theme2.justifyContent[justifyContent],
            className
          ),
          ref,
          ...otherProps,
          children
        }
      );
    }
  );
  const baseTheme$A = {
    base: "flex items-center gap-2.5",
    dense: "gap-1",
    inline: "inline-flex",
    direction: {
      row: "flex-row",
      column: "flex-col",
      rowReverse: "flex-row-reverse",
      columnReverse: "flex-col-reverse"
    },
    alignItems: {
      start: "items-start",
      end: "items-end",
      center: "items-center",
      stretch: "items-stretch"
    },
    justifyContent: {
      start: "justify-start",
      end: "justify-end",
      center: "justify-center",
      spaceBetween: "justify-between"
    }
  };
  const stackTheme = {
    ...baseTheme$A,
    base: [baseTheme$A.base, "text-surface-content"].join(" ")
  };
  const legacyStackTheme = {
    ...baseTheme$A,
    base: [baseTheme$A.base, "gap-[var(--stack-gap)]"].join(" "),
    dense: [baseTheme$A.dense, "gap-[var(--stack-dense-gap)]"].join(" ")
  };
  const Arrow = ({
    direction = "down",
    className,
    theme: customTheme
  }) => {
    const theme2 = useComponentTheme("arrow", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsx(
      "svg",
      {
        className: tailwindMerge.twMerge(theme2.base, theme2[direction], className),
        xmlns: "http://www.w3.org/2000/svg",
        x: "0px",
        y: "0px",
        width: "50",
        height: "50",
        viewBox: "0 0 32 32",
        fill: "currentColor",
        children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M 4.21875 10.78125 L 2.78125 12.21875 L 15.28125 24.71875 L 16 25.40625 L 16.71875 24.71875 L 29.21875 12.21875 L 27.78125 10.78125 L 16 22.5625 Z" })
      }
    );
  };
  const baseTheme$z = {
    base: "",
    up: "rotate-180",
    down: "",
    left: "rotate-90",
    right: "-rotate-90"
  };
  const arrowTheme = {
    ...baseTheme$z,
    base: [baseTheme$z.base, "text-surface-content"].join(" ")
  };
  const legacyArrowTheme = {
    ...baseTheme$z,
    base: [baseTheme$z.base].join(" ")
  };
  const TreeContext = React.createContext({
    collapsedIcon: null,
    expandedIcon: null
  });
  const Tree = ({
    children,
    className,
    expandedIcon,
    collapsedIcon,
    theme: customTheme,
    ...rest
  }) => {
    const theme2 = useComponentTheme("tree", customTheme);
    expandedIcon = expandedIcon ?? /* @__PURE__ */ jsxRuntime.jsx(Arrow, { direction: "down", className: theme2.arrow });
    collapsedIcon = collapsedIcon ?? /* @__PURE__ */ jsxRuntime.jsx(Arrow, { direction: "right", className: theme2.arrow });
    const values = React.useMemo(
      () => ({
        expandedIcon,
        collapsedIcon
      }),
      [collapsedIcon, expandedIcon]
    );
    return /* @__PURE__ */ jsxRuntime.jsx(TreeContext.Provider, { value: values, children: /* @__PURE__ */ jsxRuntime.jsx("div", { className: tailwindMerge.twMerge(theme2.tree, className), ...rest, children: /* @__PURE__ */ jsxRuntime.jsx("ul", { className: theme2.base, children }) }) });
  };
  const TreeNode = ({
    children,
    className,
    label,
    disabled,
    expanded: expandedProp,
    onExpand,
    onCollapse,
    theme: customTheme
  }) => {
    const { expandedIcon, collapsedIcon } = React.useContext(TreeContext);
    const [expanded, setExpanded] = React.useState(expandedProp);
    const hasChildren = children && React.Children.toArray(children).length > 0;
    React.useEffect(() => {
      setExpanded(expandedProp);
    }, [expandedProp]);
    const onButtonClick = React.useCallback(() => {
      const newState = !expanded;
      setExpanded(newState);
      if (newState) {
        onExpand == null ? void 0 : onExpand();
      } else {
        onCollapse == null ? void 0 : onCollapse();
      }
    }, [expanded, onCollapse, onExpand]);
    const theme2 = useComponentTheme("tree", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsxs("li", { className: tailwindMerge.twMerge(theme2.node.base, className), children: [
      /* @__PURE__ */ jsxRuntime.jsxs("div", { className: theme2.nodeBlock, children: [
        hasChildren && /* @__PURE__ */ jsxRuntime.jsx(
          Button,
          {
            size: "small",
            disabled,
            variant: "text",
            title: expanded ? "Collapse" : "Expand",
            className: tailwindMerge.twMerge(
              theme2.node.button.base,
              disabled && theme2.node.disabled
            ),
            onClick: onButtonClick,
            children: expanded ? expandedIcon : collapsedIcon
          }
        ),
        /* @__PURE__ */ jsxRuntime.jsx(
          "span",
          {
            className: tailwindMerge.twMerge(
              theme2.node.label,
              !hasChildren && theme2.node.leaf,
              disabled && theme2.node.disabled
            ),
            children: label
          }
        )
      ] }),
      hasChildren && /* @__PURE__ */ jsxRuntime.jsx(Collapse, { expanded, children: () => /* @__PURE__ */ jsxRuntime.jsx("ul", { className: theme2.subtree, children }) })
    ] });
  };
  const baseTheme$y = {
    base: "relative m-0 p-0 list-none",
    tree: "border pt-1 pb-1 px-3 border-solid border-transparent",
    arrow: "w-3 h-3",
    node: {
      base: "pt-0.5 m-0 list-style-none first:pt-0 last:pb-0",
      collapsed: "-rotate-90",
      disabled: "opacity-60",
      leaf: "pl-4",
      label: "",
      button: {
        base: "min-w-[auto] min-h-[auto] w-auto h-auto transition-transform duration-100 ease-in-out ml-0 mr-1 my-0 p-0",
        icon: "align-middle block h-2 w-2 m-0.5"
      }
    },
    nodeBlock: "flex items-center",
    subtree: "relative ml-5 mr-0 mt-1 mb-0 p-0"
  };
  const treeTheme = {
    ...baseTheme$y,
    arrow: [baseTheme$y.arrow, "fill-surface-content"].join(" "),
    node: {
      ...baseTheme$y.node,
      base: [baseTheme$y.node.base, "text-surface-content"].join(" "),
      button: {
        ...baseTheme$y.node.button,
        icon: [baseTheme$y.node.button.icon, "fill-surface-content"].join(" ")
      }
    }
  };
  const legacyTreeTheme = {
    ...baseTheme$y,
    node: {
      ...baseTheme$y.node,
      button: {
        ...baseTheme$y.node.button,
        icon: [baseTheme$y.node.button.icon, "fill-[var(--white)]"].join(" ")
      }
    }
  };
  function isObject$1(item) {
    return item !== null && typeof item === "object" && item.constructor === Object;
  }
  function cloneDeep$1(source) {
    if (!isObject$1(source)) {
      return source;
    }
    const output = {};
    for (const key in source) {
      output[key] = cloneDeep$1(source[key]);
    }
    return output;
  }
  function mergeDeep(target, source) {
    if (isObject$1(source) && Object.keys(source).length === 0) {
      return cloneDeep$1({ ...target, ...source });
    }
    const output = { ...target, ...source };
    if (isObject$1(source) && isObject$1(target)) {
      for (const key in source) {
        if (isObject$1(source[key]) && key in target && isObject$1(target[key])) {
          output[key] = mergeDeep(
            target[key],
            source[key]
          );
        } else {
          output[key] = isObject$1(source[key]) ? cloneDeep$1(source[key]) : source[key];
        }
      }
    }
    return output;
  }
  function cn(...args) {
    return tailwindMerge.twMerge(classNames(args));
  }
  const ThemeContext = React.createContext(null);
  const ThemeProvider = ({ children, theme: theme$1 }) => {
    const [activeTheme, setActiveTheme] = React.useState(theme$1);
    React.useEffect(() => {
      if (theme$1) {
        setActiveTheme(mergeDeep(theme, theme$1));
      }
    }, [theme$1]);
    const updateTheme = (newTheme) => {
      setActiveTheme({ ...activeTheme, ...newTheme });
    };
    return /* @__PURE__ */ jsxRuntime.jsx(ThemeContext.Provider, { value: { theme: activeTheme, updateTheme }, children });
  };
  const useTheme = () => {
    const context = React.useContext(ThemeContext);
    if (!context) {
      return null;
    }
    return context;
  };
  const useComponentTheme = (component, customTheme) => {
    const context = useTheme();
    if (customTheme) {
      return customTheme;
    }
    if (!context) {
      throw new Error("useTheme must be used within a ThemeProvider");
    }
    const componentTheme = context.theme.components[component];
    if (!componentTheme) {
      throw new Error(`Component ${component} does not exist in theme`);
    }
    return componentTheme;
  };
  const Ellipsis = ({
    value,
    className,
    title,
    removeLinebreaks = true,
    expandable = true,
    limit = 256,
    theme: customTheme
  }) => {
    const [expanded, setExpanded] = React.useState(false);
    const substr = React.useMemo(() => {
      const formatted = removeLinebreaks ? value.replace(/(\r\n|\n|\r)/gm, " ") : value;
      return ellipsize(formatted, limit, { ellipse: expandable ? "" : "..." });
    }, [expandable, limit, value, removeLinebreaks]);
    const theme2 = useComponentTheme("ellipsis", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsxs("span", { className, children: [
      expanded ? value : /* @__PURE__ */ jsxRuntime.jsx("span", { title: title !== false ? title || value : void 0, children: substr }),
      expandable && !expanded && value.length > limit && /* @__PURE__ */ jsxRuntime.jsx(
        "button",
        {
          type: "button",
          title: "Click to view rest of content",
          className: theme2.dots,
          onClick: (event) => {
            event.stopPropagation();
            setExpanded(true);
          },
          children: "..."
        }
      )
    ] });
  };
  const baseTheme$x = {
    dots: "cursor-pointer opacity-50 text-[unset] p-0 border-[none] outline-none"
  };
  const ellipsisTheme = {
    ...baseTheme$x
  };
  const legacyEllipsisTheme = {
    ...baseTheme$x
  };
  const useInfinityList = ({
    items,
    threshold = 3,
    size = 10,
    nextSize
  }) => {
    const [index, setIndex] = React.useState(0);
    const data = React.useMemo(() => [...items].slice(0, index), [index, items]);
    const hasMore = index < items.length;
    const remaining = items.length - index;
    const showNext = React.useCallback(
      (amount) => {
        if (hasMore) {
          const nextAmount = nextSize === Infinity ? remaining : nextSize || amount || size;
          const newIndex = Math.min(items.length, index + nextAmount);
          setIndex(newIndex);
        }
      },
      [hasMore, index, size, items, remaining, nextSize]
    );
    React.useEffect(() => {
      const len = (items == null ? void 0 : items.length) || 0;
      const endIdx = len <= size + threshold ? size + threshold : Math.min(len, size);
      setIndex(endIdx);
    }, [items.length, size, threshold]);
    return {
      data,
      hasMore,
      remaining,
      showNext
    };
  };
  const InfinityList = ({
    children,
    size = 10,
    threshold = 3,
    nextSize,
    buttonClassName
  }) => {
    const arr = React.Children.toArray(children);
    const { data, hasMore, remaining, showNext } = useInfinityList({
      items: arr,
      size,
      threshold,
      nextSize
    });
    return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
      data.map((child, i) => /* @__PURE__ */ jsxRuntime.jsx(React.Fragment, { children: child }, i)),
      hasMore && /* @__PURE__ */ jsxRuntime.jsxs(
        "button",
        {
          className: buttonClassName,
          onClick: (event) => {
            event.stopPropagation();
            showNext();
          },
          children: [
            "Show ",
            Math.min(size, remaining),
            " more"
          ]
        }
      )
    ] });
  };
  const JsonTreeNode = ({
    depth,
    data,
    expandDepth,
    className,
    showCount,
    showEmpty,
    showAllLimit,
    ellipsisText,
    ellipsisTextLength,
    theme: customTheme
  }) => {
    const theme2 = useComponentTheme("jsonTree", customTheme);
    const type = data.type;
    const isList = type === "array" || type === "object";
    const {
      data: listData,
      hasMore,
      showNext
    } = useInfinityList({
      items: isList ? data.data : [],
      size: showAllLimit,
      threshold: 3,
      nextSize: Infinity
    });
    const renderExpandableNode = React.useCallback(() => {
      const label = type === "array" ? "items" : "keys";
      const symbol = type === "array" ? "[]" : "{}";
      return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
        /* @__PURE__ */ jsxRuntime.jsx("span", { className: tailwindMerge.twMerge(theme2.node.label), children: data.label }),
        /* @__PURE__ */ jsxRuntime.jsx("span", { className: tailwindMerge.twMerge(theme2.node.symbol), children: symbol }),
        showCount && /* @__PURE__ */ jsxRuntime.jsx("span", { className: tailwindMerge.twMerge(theme2.node.count), children: `(${data.data.length.toLocaleString()} ${label})` })
      ] });
    }, [data, theme2, type, showCount]);
    const renderPrimativeNode = React.useCallback(() => {
      var _a;
      const ellipsis = type === "string" && ellipsisText;
      const showDelimeter = data.label !== null && data.label !== void 0;
      const isEmpty = data.data === null || data.data === void 0;
      const isEmptyString = data.data === "";
      let valueLabel = (_a = data.data) == null ? void 0 : _a.toString();
      if (showEmpty) {
        if (isEmptyString) {
          valueLabel = '""';
        } else if (isEmpty) {
          valueLabel = "null";
        }
      }
      if (!showEmpty && (isEmpty || isEmptyString)) {
        return null;
      }
      return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
        /* @__PURE__ */ jsxRuntime.jsx("span", { className: tailwindMerge.twMerge(theme2.node.label), children: data.label }),
        showDelimeter && /* @__PURE__ */ jsxRuntime.jsx("span", { className: tailwindMerge.twMerge(theme2.node.delimiter), children: ":" }),
        /* @__PURE__ */ jsxRuntime.jsx("span", { className: tailwindMerge.twMerge(theme2.node.value), children: ellipsis && !isEmptyString ? /* @__PURE__ */ jsxRuntime.jsx(Ellipsis, { value: data.data, limit: ellipsisTextLength }) : valueLabel })
      ] });
    }, [data, showEmpty, ellipsisText, ellipsisTextLength, theme2, type]);
    const isNestedData = React.useMemo(
      () => data.type === "array" || data.type === "object",
      [data.type]
    );
    const isNestedDataEmpty = React.useMemo(() => {
      if (isNestedData) {
        return data.type === "array" ? data.data.length === 0 : Object.keys(data.data).length === 0;
      }
      return false;
    }, [data.data, data.type, isNestedData]);
    if (!showEmpty && isNestedDataEmpty) {
      return null;
    }
    return /* @__PURE__ */ jsxRuntime.jsxs(
      TreeNode,
      {
        className,
        expanded: depth < expandDepth,
        label: /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: type === "array" || type === "object" ? renderExpandableNode() : renderPrimativeNode() }),
        children: [
          isNestedData && !isNestedDataEmpty && /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: listData.map((item) => /* @__PURE__ */ jsxRuntime.jsx(
            JsonTreeNode,
            {
              data: item,
              depth: depth + 1,
              expandDepth,
              type: item.type,
              ellipsisText,
              ellipsisTextLength,
              showCount,
              showEmpty
            },
            item.id
          )) }),
          isList && hasMore && /* @__PURE__ */ jsxRuntime.jsx("span", { className: tailwindMerge.twMerge(theme2.pager), onClick: () => showNext(), children: "Show all" })
        ]
      }
    );
  };
  function getDataType(data) {
    if (data === null || data === void 0) {
      return "nil";
    }
    if (data instanceof Date) {
      return "date";
    }
    if (Array.isArray(data)) {
      return "array";
    }
    if (data != null && data.constructor.name === "Object") {
      return "object";
    }
    if (typeof data === "string") {
      return "string";
    }
    if (typeof data === "number") {
      return "number";
    }
    if (typeof data === "boolean") {
      return "boolean";
    }
    return "unknown";
  }
  function parseJsonTree({
    id: id2 = "root",
    data,
    index,
    label,
    showEmpty = true
  }) {
    const type = getDataType(data);
    if (type === "object") {
      const keys2 = Object.keys(data);
      const result = keys2.reduce((parsedItems, key, idx) => {
        const value = data[key];
        const childParsed = parseJsonTree({
          data: value,
          id: `${id2}.${key}`,
          index: idx,
          label: key,
          showEmpty
        });
        if (showEmpty || !showEmpty && childParsed !== null) {
          parsedItems.push(childParsed);
        }
        return parsedItems;
      }, []);
      let labelValue = index !== void 0 ? `${index}` : "root";
      if (label !== void 0) {
        labelValue = label;
      }
      return {
        type,
        id: id2,
        data: result,
        label: labelValue,
        index
      };
    } else if (type === "array") {
      const result = data.map(
        (item, idx) => parseJsonTree({
          data: item,
          id: `${id2}[${idx}]`,
          index: idx,
          showEmpty
        })
      );
      return {
        type,
        id: id2,
        data: result,
        label,
        index
      };
    } else {
      return {
        type,
        id: id2,
        data,
        label,
        index
      };
    }
  }
  const JsonTree = ({
    data,
    className,
    expandDepth = 2,
    showEmpty = true,
    showCount = true,
    showAll = false,
    showAllLimit = 10,
    ellipsisText = true,
    ellipsisTextLength = 150,
    ...rest
  }) => {
    const tree = parseJsonTree({ data, showEmpty });
    return /* @__PURE__ */ jsxRuntime.jsx("div", { tabIndex: -1, children: /* @__PURE__ */ jsxRuntime.jsx(Tree, { className, ...rest, children: /* @__PURE__ */ jsxRuntime.jsx(
      JsonTreeNode,
      {
        depth: 1,
        data: tree,
        showEmpty,
        showCount,
        expandDepth,
        ellipsisText,
        ellipsisTextLength,
        showAll,
        showAllLimit
      },
      `node-${tree.id}`
    ) }) });
  };
  const jsonTreeTheme = {
    node: {
      label: "font-mono text-anakiwa light:text-blue-500",
      delimiter: "pr-1",
      symbol: "px-1 opacity-50 font-mono",
      value: "",
      count: "opacity-50"
    },
    pager: "opacity-50 cursor-pointer pl-4"
  };
  const legacyJsonTreeTheme = {
    ...jsonTreeTheme
  };
  const VerticalSpacer = React.forwardRef(
    ({ space = "md", className, theme: customTheme, ...rest }, ref) => {
      const theme2 = useComponentTheme(
        "verticalSpacer",
        customTheme
      );
      return /* @__PURE__ */ jsxRuntime.jsx(
        "div",
        {
          className: tailwindMerge.twMerge(className, theme2.base, theme2.size[space]),
          ref,
          ...rest
        }
      );
    }
  );
  const baseTheme$w = {
    base: "",
    size: {
      xs: "h-0.5",
      sm: "h-1.5",
      md: "h-2.5",
      lg: "h-5",
      xl: "h-6",
      xxl: "h-8"
    }
  };
  const verticalSpacerTheme = {
    ...baseTheme$w
  };
  const legacyVerticalSpacerTheme = {
    ...baseTheme$w,
    size: {
      xs: "h-[var(--spacing-xs)]",
      sm: "h-[var(--spacing-sm)]",
      md: "h-[var(--spacing-md)]",
      lg: "h-[var(--spacing-lg)]",
      xl: "h-[var(--spacing-xl)]",
      xxl: "h-[var(--spacing-xxl)]"
    }
  };
  const TabPanel = ({
    children,
    className,
    theme: customTheme
  }) => {
    const theme2 = useComponentTheme("tabs", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsx("section", { role: "tabpanel", className: tailwindMerge.twMerge(theme2.panel, className), children });
  };
  const Tab = ({
    children,
    id: id2,
    selected,
    containerClassName,
    className,
    disabled,
    onSelect,
    size = "medium",
    theme: customTheme
  }) => {
    var _a, _b, _c, _d;
    const theme2 = useComponentTheme("tabs", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsxs("span", { className: cn(theme2.list.tab.base, containerClassName), children: [
      /* @__PURE__ */ jsxRuntime.jsx(
        Button,
        {
          className: cn(
            theme2.list.tab.button,
            className,
            {
              [theme2.list.tab.disabled]: disabled,
              [theme2.list.tab.selected]: selected
            },
            (_a = theme2.list.tab.size) == null ? void 0 : _a[size]
          ),
          disabled,
          role: "tab",
          variant: "text",
          "aria-selected": selected ? "true" : "false",
          "aria-disabled": disabled ? "true" : "false",
          onClick: () => {
            if (!disabled && onSelect) {
              onSelect();
            }
          },
          children
        }
      ),
      selected && /* @__PURE__ */ jsxRuntime.jsx(
        framerMotion.motion.div,
        {
          className: cn(
            (_b = theme2.list.indicator) == null ? void 0 : _b.base,
            (_d = (_c = theme2.list.indicator) == null ? void 0 : _c.size) == null ? void 0 : _d[size]
          ),
          layoutId: `${id2}-tabs-underline`
        }
      )
    ] });
  };
  const TabList = ({
    id: id2,
    children,
    direction,
    className,
    selectedIndex,
    onSelect,
    variant = "primary",
    size = "medium",
    theme: customTheme
  }) => {
    const theme2 = useComponentTheme("tabs", customTheme);
    const childs = React.Children.toArray(children).filter((child) => {
      var _a;
      return ((_a = child.type) == null ? void 0 : _a.name) === Tab.name;
    }).map((child) => child.props);
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "nav",
      {
        role: "tablist",
        className: tailwindMerge.twMerge(
          classNames(className, theme2.list.base, {
            "justify-end": direction === "rtl"
          })
        ),
        children: [
          childs.map(({ children: children2, ...rest }, index) => /* @__PURE__ */ jsxRuntime.jsx(
            Tab,
            {
              ...rest,
              id: id2,
              selected: index === selectedIndex,
              onSelect: () => onSelect(index),
              size,
              children: children2
            },
            index
          )),
          /* @__PURE__ */ jsxRuntime.jsx(
            "hr",
            {
              className: cn(theme2.list.divider, theme2.list.variant[variant].divider)
            }
          )
        ]
      }
    );
  };
  const Tabs = ({
    children,
    className,
    style,
    variant = "primary",
    size = "medium",
    direction = "ltr",
    defaultIndex = 0,
    selectedIndex,
    onSelect,
    theme: customTheme
  }) => {
    const id2 = useId();
    const theme2 = useComponentTheme("tabs", customTheme);
    const [internalActive, setInternalActive] = React.useState(
      selectedIndex || defaultIndex
    );
    React.useEffect(() => {
      if (selectedIndex !== void 0) {
        setInternalActive(selectedIndex);
      }
    }, [selectedIndex]);
    const [tabList, panels] = React.useMemo(() => {
      const childs = React.Children.toArray(children);
      const [tabList2] = childs.filter((child) => {
        var _a;
        return ((_a = child.type) == null ? void 0 : _a.name) === TabList.name;
      }).map((child) => child.props);
      const panels2 = childs.filter((child) => {
        var _a;
        return ((_a = child.type) == null ? void 0 : _a.name) === TabPanel.name;
      }).map((child) => child.props);
      return [tabList2, panels2];
    }, [children]);
    return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: tailwindMerge.twMerge(theme2.base, className), style, children: [
      /* @__PURE__ */ jsxRuntime.jsx(
        TabList,
        {
          ...tabList,
          variant,
          size,
          direction,
          id: id2,
          selectedIndex: internalActive,
          onSelect: (idx) => {
            setInternalActive(idx);
            onSelect == null ? void 0 : onSelect(idx);
          }
        }
      ),
      /* @__PURE__ */ jsxRuntime.jsx(framerMotion.AnimatePresence, { children: panels.map(({ children: children2, ...rest }, index) => /* @__PURE__ */ jsxRuntime.jsx(React.Fragment, { children: internalActive === index && /* @__PURE__ */ jsxRuntime.jsx(TabPanel, { ...rest, children: children2 }) }, index)) })
    ] });
  };
  const baseTheme$v = {
    base: "flex flex-col",
    list: {
      base: "flex text-center flex-wrap -mb-px",
      indicator: {
        base: "bg-primary absolute bottom-0 left-0 right-0",
        size: {
          small: "h-0.5",
          medium: "h-0.5",
          large: "h-1"
        }
      },
      divider: "w-full h-px border-0",
      variant: {
        primary: {
          divider: "bg-surface"
        },
        secondary: {
          divider: "bg-gradient-to-r from-transparent to-transparent via-primary"
        }
      },
      tab: {
        base: "relative",
        button: "transition-colors text-panel-secondary-content font-bold hover:text-primary-hover",
        selected: "text-panel-content",
        disabled: "cursor-not-allowed opacity-40",
        size: {
          small: "pb-1 text-sm",
          medium: "pb-2 text-lg",
          large: "pb-4 text-xl"
        }
      }
    },
    panel: "mt-2"
  };
  const tabsTheme = baseTheme$v;
  const legacyTabsTheme = baseTheme$v;
  const Breadcrumbs = ({
    theme: customTheme,
    className,
    ...rest
  }) => {
    const theme2 = useComponentTheme("breadcrumbs", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsx(
      "nav",
      {
        className: cn(theme2.base, className),
        "aria-label": (rest == null ? void 0 : rest["aria-label"]) ?? "breadcrumbs",
        ...rest
      }
    );
  };
  const breadcrumbsTheme = {
    base: "",
    separator: "[&>svg]:size-3.5",
    list: "flex gap-2 items-center",
    link: "hover:text-panel-content text-panel-secondary-content transition-colors",
    activePage: "text-primary pointer-events-none"
  };
  const legacyBreadcrumbTheme = breadcrumbsTheme;
  const BreadcrumbItem = ({
    className,
    ...rest
  }) => /* @__PURE__ */ jsxRuntime.jsx("li", { className: cn("flex gap-2 items-center", className), ...rest });
  const BreadcrumbLink = ({
    className,
    theme: customTheme,
    href,
    ...rest
  }) => {
    const theme2 = useComponentTheme("breadcrumbs", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsx("a", { className: cn(theme2.link, className), href, ...rest });
  };
  const BreadcrumbList = ({
    className,
    theme: customTheme,
    ...rest
  }) => {
    const theme2 = useComponentTheme("breadcrumbs", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsx("ol", { className: cn(theme2.list, className), ...rest });
  };
  const BreadcrumbSeparator = ({
    children = /* @__PURE__ */ jsxRuntime.jsx(Arrow, { direction: "right" }),
    className,
    theme: customTheme,
    ...rest
  }) => {
    const theme2 = useComponentTheme("breadcrumbs", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsx(
      "li",
      {
        role: "presentation",
        "aria-hidden": true,
        className: cn(theme2.separator, className),
        ...rest,
        children
      }
    );
  };
  const BreadcrumbPage = ({
    theme: customTheme,
    className,
    ...rest
  }) => {
    const theme2 = useComponentTheme("breadcrumbs", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsx(
      "span",
      {
        role: "link",
        "aria-disabled": "true",
        "aria-current": "page",
        className: cn(theme2.activePage, className),
        ...rest
      }
    );
  };
  const CalendarRange = ({
    min,
    max,
    value,
    disabled,
    previousArrow = "‹",
    previousYearArrow = "«",
    nextArrow = "›",
    nextYearArrow = "»",
    showDayOfWeek,
    animated = true,
    onChange,
    monthsToDisplay = 2,
    direction = "future",
    theme: customTheme,
    ...rest
  }) => {
    const theme2 = useComponentTheme(
      "calendarRange",
      customTheme
    );
    const date = React.useMemo(
      () => Array.isArray(value) ? value[0] : /* @__PURE__ */ new Date(),
      [value]
    );
    const rangeStart = React.useMemo(() => value ? value[0] : void 0, [value]);
    const rangeEnd = React.useMemo(() => value ? value[1] : void 0, [value]);
    const [viewValue, setViewValue] = React.useState(date || /* @__PURE__ */ new Date());
    const [scrollDirection, setScrollDirection] = React.useState(null);
    const [hoveringDate, setHoveringDate] = React.useState(null);
    const displayMonths = Array.from(Array(monthsToDisplay).keys());
    const showPast = direction === "past";
    if (direction === "past") {
      displayMonths.reverse();
    }
    const dateChangeHandler = React.useCallback(
      (date2) => {
        if (!rangeStart) {
          onChange == null ? void 0 : onChange([date2, void 0]);
        } else if (!rangeEnd) {
          const range = [rangeStart, date2];
          onChange == null ? void 0 : onChange([dateFns.min(range), dateFns.max(range)]);
        } else {
          onChange == null ? void 0 : onChange([date2, void 0]);
        }
      },
      [onChange, rangeEnd, rangeStart]
    );
    const previousClickHandler = React.useCallback(() => {
      setScrollDirection("back");
      setViewValue(dateFns.sub(viewValue, { months: 1 }));
    }, [viewValue]);
    const previousYearClickHandler = React.useCallback(() => {
      setScrollDirection("back");
      setViewValue(dateFns.sub(viewValue, { years: 1 }));
    }, [viewValue]);
    const nextClickHandler = React.useCallback(() => {
      setScrollDirection("forward");
      setViewValue(dateFns.add(viewValue, { months: 1 }));
    }, [viewValue]);
    const nextYearClickHandler = React.useCallback(() => {
      setScrollDirection("forward");
      setViewValue(dateFns.add(viewValue, { years: 1 }));
    }, [viewValue]);
    const xAnimation = React.useMemo(() => {
      switch (scrollDirection) {
        case "forward":
          return "100%";
        case "back":
          return "-100%";
        default:
          return 0;
      }
    }, [scrollDirection]);
    return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: tailwindMerge.twMerge(theme2.base), children: [
      /* @__PURE__ */ jsxRuntime.jsxs("header", { className: tailwindMerge.twMerge(theme2.header.base), children: [
        /* @__PURE__ */ jsxRuntime.jsxs(Stack, { children: [
          /* @__PURE__ */ jsxRuntime.jsx(
            Button,
            {
              variant: "text",
              disabled,
              onClick: previousYearClickHandler,
              className: tailwindMerge.twMerge(theme2.header.prev),
              disablePadding: true,
              children: previousYearArrow
            }
          ),
          /* @__PURE__ */ jsxRuntime.jsx(
            Button,
            {
              variant: "text",
              disabled,
              onClick: previousClickHandler,
              className: tailwindMerge.twMerge(theme2.header.mid),
              disablePadding: true,
              children: previousArrow
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntime.jsx(SmallHeading, { className: tailwindMerge.twMerge(theme2.title), disableMargins: true, children: displayMonths.map((i) => /* @__PURE__ */ jsxRuntime.jsx("span", { children: dateFns.format(dateFns.addMonths(viewValue, showPast ? -i : i), "MMMM") }, dateFns.addMonths(viewValue, showPast ? -i : i).toDateString())) }),
        /* @__PURE__ */ jsxRuntime.jsxs(Stack, { children: [
          /* @__PURE__ */ jsxRuntime.jsx(
            Button,
            {
              variant: "text",
              disabled,
              onClick: nextClickHandler,
              className: tailwindMerge.twMerge(theme2.header.next),
              disablePadding: true,
              children: nextArrow
            }
          ),
          /* @__PURE__ */ jsxRuntime.jsx(
            Button,
            {
              variant: "text",
              disabled,
              onClick: nextYearClickHandler,
              disablePadding: true,
              children: nextYearArrow
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntime.jsx(Divider, {}),
      /* @__PURE__ */ jsxRuntime.jsx(framerMotion.AnimatePresence, { initial: false, mode: "wait", children: /* @__PURE__ */ jsxRuntime.jsx(
        framerMotion.motion.div,
        {
          initial: { scale: 0, opacity: 0 },
          animate: { scale: 1, opacity: 1 },
          exit: { scale: 0, opacity: 1 },
          transition: {
            x: { type: animated ? "keyframes" : false },
            opacity: { duration: 0.2, type: animated ? "tween" : false },
            scale: { type: animated ? "tween" : false }
          },
          children: /* @__PURE__ */ jsxRuntime.jsx("div", { className: tailwindMerge.twMerge(theme2.content), children: displayMonths.map((offset, idx) => /* @__PURE__ */ jsxRuntime.jsx(React.Fragment, { children: /* @__PURE__ */ jsxRuntime.jsx(
            CalendarDays,
            {
              value: dateFns.addMonths(viewValue, showPast ? -offset : offset),
              min,
              max,
              disabled,
              current: [rangeStart, rangeEnd],
              showDayOfWeek,
              xAnimation,
              animated,
              hover: hoveringDate,
              onHover: setHoveringDate,
              hidePrevMonthDays: idx > 0,
              hideNextMonthDays: idx < monthsToDisplay - 1,
              onChange: dateChangeHandler,
              isRange: true,
              ...rest
            }
          ) }, `calendar-${offset}`)) })
        }
      ) })
    ] });
  };
  const baseTheme$u = {
    base: "relative overflow-hidden",
    header: {
      base: "flex text-center justify-between mb-2 items-center",
      prev: "",
      mid: "",
      next: ""
    },
    title: "font-semibold",
    content: "flex",
    days: {
      header: "text-center grid grid-cols-7 opacity-50 mb-1 pt-2",
      dayOfWeek: "text-center font-bold",
      week: "grid grid-cols-7",
      day: "flex p-2",
      outside: "",
      startRangeDate: "rounded-tl-md rounded-tr-none rounded-br-none",
      cornerStartDateBottom: "rounded-bl-none",
      endRangeDate: "rounded-br-md rounded-bl-none rounded-tl-none",
      cornerEndDateTop: "rounded-tr-none",
      range: "rounded-none"
    },
    months: {
      root: "grid grid-cols-4 gap-2",
      month: "p-1.5"
    },
    years: {
      root: "grid grid-cols-4 gap-2",
      year: "p-1.5"
    }
  };
  const calendarTheme = {
    ...baseTheme$u,
    days: {
      ...baseTheme$u.days,
      header: [baseTheme$u.days.header, "text-panel-content"].join(" "),
      outside: [baseTheme$u.days.outside, "opacity-50"].join(" ")
    }
  };
  const legacyCalendarTheme = {
    ...baseTheme$u,
    header: {
      ...baseTheme$u.header,
      base: [
        baseTheme$u.header.base,
        "mb-[var(--spacing-sm)] mb-[var(--calendar-gap)]"
      ].join(" ")
    },
    days: {
      ...baseTheme$u.days,
      header: [baseTheme$u.days.header, "gap-[var(--calendar-gap)]"].join(" "),
      outside: [baseTheme$u.days.outside, "text-gray-100/60"].join(" ")
    }
  };
  const baseTheme$t = {
    base: "relative overflow-hidden",
    header: {
      base: "flex text-center justify-between mb-2 items-center",
      prev: "",
      mid: "",
      next: ""
    },
    title: "font-semibold flex grow justify-around",
    content: "flex gap-4"
  };
  const calendarRangeTheme = {
    base: baseTheme$t.base,
    header: baseTheme$t.header,
    title: baseTheme$t.title,
    content: baseTheme$t.content,
    days: calendarTheme.days
  };
  const legacyCalendarRangeTheme = {
    base: baseTheme$t.base,
    header: baseTheme$t.header,
    title: baseTheme$t.title,
    content: baseTheme$t.content,
    days: calendarTheme.days
  };
  const Checkbox = React.forwardRef(
    ({
      checked = false,
      intermediate = false,
      label,
      disabled,
      size = "medium",
      onChange,
      onBlur,
      className,
      containerClassName,
      labelClassName,
      borderPath = "M 0 0 L 0 16 L 16 16 L 16 0 Z",
      checkedPath = "M 5.36396 8.17792 L 7.34236 9.91424 L 10.6044 5.832",
      intermediatePath = "M 5.36396 8.17792 L 10.6044 8.17792",
      theme: customTheme,
      ...rest
    }, ref) => {
      const theme2 = useComponentTheme("checkbox", customTheme);
      const pathLength = framerMotion.useMotionValue(0);
      const opacity = framerMotion.useTransform(pathLength, [0.05, 0.15], [0, 1]);
      const checkVariants = {
        pressed: (isChecked) => ({ pathLength: isChecked ? 0.85 : 0.3 }),
        checked: { pathLength: 1 },
        unchecked: { pathLength: 0 }
      };
      return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: tailwindMerge.twMerge(theme2.base, containerClassName), children: [
        /* @__PURE__ */ jsxRuntime.jsx(
          framerMotion.motion.div,
          {
            ...rest,
            ref,
            tabIndex: disabled ? -1 : 0,
            className: tailwindMerge.twMerge(
              theme2.checkbox,
              disabled && theme2.disabled,
              theme2.sizes[size],
              className
            ),
            onClick: (e) => {
              if (!disabled && onChange) {
                e.stopPropagation();
                onChange(!checked);
              }
            },
            onBlur,
            onKeyDown: (event) => {
              if (!disabled && onChange && event.code === "Space") {
                onChange(!checked);
              }
            },
            children: /* @__PURE__ */ jsxRuntime.jsxs(
              framerMotion.motion.svg,
              {
                animate: checked ? "checked" : "unchecked",
                whileHover: !disabled ? "hover" : void 0,
                whileTap: !disabled ? "pressed" : void 0,
                viewBox: "0 0 16 16",
                width: 16,
                height: 16,
                children: [
                  /* @__PURE__ */ jsxRuntime.jsx(
                    framerMotion.motion.path,
                    {
                      className: theme2.border,
                      d: borderPath,
                      variants: theme2.boxVariants
                    }
                  ),
                  intermediate ? /* @__PURE__ */ jsxRuntime.jsx(
                    framerMotion.motion.path,
                    {
                      d: intermediatePath,
                      fill: "transparent",
                      strokeWidth: "1",
                      className: theme2.check,
                      variants: checkVariants,
                      style: { pathLength, opacity },
                      custom: checked
                    }
                  ) : /* @__PURE__ */ jsxRuntime.jsx(
                    framerMotion.motion.path,
                    {
                      d: checkedPath,
                      fill: "transparent",
                      strokeWidth: "1",
                      className: theme2.check,
                      variants: checkVariants,
                      style: { pathLength, opacity },
                      custom: checked
                    }
                  )
                ]
              }
            )
          }
        ),
        label && /* @__PURE__ */ jsxRuntime.jsx(
          "span",
          {
            className: tailwindMerge.twMerge(
              theme2.label.base,
              theme2.label.sizes[size],
              disabled && theme2.disabled,
              !disabled && onChange && theme2.label.clickable,
              labelClassName
            ),
            onClick: () => {
              if (!disabled && onChange) {
                onChange == null ? void 0 : onChange(!checked);
              }
            },
            children: label
          }
        )
      ] });
    }
  );
  function getDefaultExportFromCjs(x2) {
    return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
  }
  var resolveConfig$3 = {};
  var resolveConfig$2 = {};
  var negateValue = {};
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    Object.defineProperty(exports3, "default", {
      enumerable: true,
      get: function() {
        return negateValue2;
      }
    });
    function negateValue2(value) {
      value = `${value}`;
      if (value === "0") {
        return "0";
      }
      if (/^[+-]?(\d+|\d*\.\d+)(e[+-]?\d+)?(%|\w+)?$/.test(value)) {
        return value.replace(/^[+-]?/, (sign) => sign === "-" ? "" : "-");
      }
      let numericFunctions = [
        "var",
        "calc",
        "min",
        "max",
        "clamp"
      ];
      for (const fn of numericFunctions) {
        if (value.includes(`${fn}(`)) {
          return `calc(${value} * -1)`;
        }
      }
    }
  })(negateValue);
  var corePluginList = {};
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    Object.defineProperty(exports3, "default", {
      enumerable: true,
      get: function() {
        return _default;
      }
    });
    const _default = [
      "preflight",
      "container",
      "accessibility",
      "pointerEvents",
      "visibility",
      "position",
      "inset",
      "isolation",
      "zIndex",
      "order",
      "gridColumn",
      "gridColumnStart",
      "gridColumnEnd",
      "gridRow",
      "gridRowStart",
      "gridRowEnd",
      "float",
      "clear",
      "margin",
      "boxSizing",
      "lineClamp",
      "display",
      "aspectRatio",
      "size",
      "height",
      "maxHeight",
      "minHeight",
      "width",
      "minWidth",
      "maxWidth",
      "flex",
      "flexShrink",
      "flexGrow",
      "flexBasis",
      "tableLayout",
      "captionSide",
      "borderCollapse",
      "borderSpacing",
      "transformOrigin",
      "translate",
      "rotate",
      "skew",
      "scale",
      "transform",
      "animation",
      "cursor",
      "touchAction",
      "userSelect",
      "resize",
      "scrollSnapType",
      "scrollSnapAlign",
      "scrollSnapStop",
      "scrollMargin",
      "scrollPadding",
      "listStylePosition",
      "listStyleType",
      "listStyleImage",
      "appearance",
      "columns",
      "breakBefore",
      "breakInside",
      "breakAfter",
      "gridAutoColumns",
      "gridAutoFlow",
      "gridAutoRows",
      "gridTemplateColumns",
      "gridTemplateRows",
      "flexDirection",
      "flexWrap",
      "placeContent",
      "placeItems",
      "alignContent",
      "alignItems",
      "justifyContent",
      "justifyItems",
      "gap",
      "space",
      "divideWidth",
      "divideStyle",
      "divideColor",
      "divideOpacity",
      "placeSelf",
      "alignSelf",
      "justifySelf",
      "overflow",
      "overscrollBehavior",
      "scrollBehavior",
      "textOverflow",
      "hyphens",
      "whitespace",
      "textWrap",
      "wordBreak",
      "borderRadius",
      "borderWidth",
      "borderStyle",
      "borderColor",
      "borderOpacity",
      "backgroundColor",
      "backgroundOpacity",
      "backgroundImage",
      "gradientColorStops",
      "boxDecorationBreak",
      "backgroundSize",
      "backgroundAttachment",
      "backgroundClip",
      "backgroundPosition",
      "backgroundRepeat",
      "backgroundOrigin",
      "fill",
      "stroke",
      "strokeWidth",
      "objectFit",
      "objectPosition",
      "padding",
      "textAlign",
      "textIndent",
      "verticalAlign",
      "fontFamily",
      "fontSize",
      "fontWeight",
      "textTransform",
      "fontStyle",
      "fontVariantNumeric",
      "lineHeight",
      "letterSpacing",
      "textColor",
      "textOpacity",
      "textDecoration",
      "textDecorationColor",
      "textDecorationStyle",
      "textDecorationThickness",
      "textUnderlineOffset",
      "fontSmoothing",
      "placeholderColor",
      "placeholderOpacity",
      "caretColor",
      "accentColor",
      "opacity",
      "backgroundBlendMode",
      "mixBlendMode",
      "boxShadow",
      "boxShadowColor",
      "outlineStyle",
      "outlineWidth",
      "outlineOffset",
      "outlineColor",
      "ringWidth",
      "ringColor",
      "ringOpacity",
      "ringOffsetWidth",
      "ringOffsetColor",
      "blur",
      "brightness",
      "contrast",
      "dropShadow",
      "grayscale",
      "hueRotate",
      "invert",
      "saturate",
      "sepia",
      "filter",
      "backdropBlur",
      "backdropBrightness",
      "backdropContrast",
      "backdropGrayscale",
      "backdropHueRotate",
      "backdropInvert",
      "backdropOpacity",
      "backdropSaturate",
      "backdropSepia",
      "backdropFilter",
      "transitionProperty",
      "transitionDelay",
      "transitionDuration",
      "transitionTimingFunction",
      "willChange",
      "contain",
      "content",
      "forcedColorAdjust"
    ];
  })(corePluginList);
  var configurePlugins = {};
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    Object.defineProperty(exports3, "default", {
      enumerable: true,
      get: function() {
        return _default;
      }
    });
    function _default(pluginConfig, plugins) {
      if (pluginConfig === void 0) {
        return plugins;
      }
      const pluginNames = Array.isArray(pluginConfig) ? pluginConfig : [
        ...new Set(plugins.filter((pluginName) => {
          return pluginConfig !== false && pluginConfig[pluginName] !== false;
        }).concat(Object.keys(pluginConfig).filter((pluginName) => {
          return pluginConfig[pluginName] !== false;
        })))
      ];
      return pluginNames;
    }
  })(configurePlugins);
  var colors$2 = {};
  var log = {};
  var picocolors_browser = { exports: {} };
  var x = String;
  var create = function() {
    return { isColorSupported: false, reset: x, bold: x, dim: x, italic: x, underline: x, inverse: x, hidden: x, strikethrough: x, black: x, red: x, green: x, yellow: x, blue: x, magenta: x, cyan: x, white: x, gray: x, bgBlack: x, bgRed: x, bgGreen: x, bgYellow: x, bgBlue: x, bgMagenta: x, bgCyan: x, bgWhite: x };
  };
  picocolors_browser.exports = create();
  picocolors_browser.exports.createColors = create;
  var picocolors_browserExports = picocolors_browser.exports;
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name2 in all)
        Object.defineProperty(target, name2, {
          enumerable: true,
          get: all[name2]
        });
    }
    _export(exports3, {
      dim: function() {
        return dim;
      },
      default: function() {
        return _default;
      }
    });
    const _picocolors = /* @__PURE__ */ _interop_require_default(picocolors_browserExports);
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    let alreadyShown = /* @__PURE__ */ new Set();
    function log2(type, messages, key) {
      if (typeof process !== "undefined" && process.env.JEST_WORKER_ID)
        return;
      if (key && alreadyShown.has(key))
        return;
      if (key)
        alreadyShown.add(key);
      console.warn("");
      messages.forEach((message) => console.warn(type, "-", message));
    }
    function dim(input) {
      return _picocolors.default.dim(input);
    }
    const _default = {
      info(key, messages) {
        log2(_picocolors.default.bold(_picocolors.default.cyan("info")), ...Array.isArray(key) ? [
          key
        ] : [
          messages,
          key
        ]);
      },
      warn(key, messages) {
        log2(_picocolors.default.bold(_picocolors.default.yellow("warn")), ...Array.isArray(key) ? [
          key
        ] : [
          messages,
          key
        ]);
      },
      risk(key, messages) {
        log2(_picocolors.default.bold(_picocolors.default.magenta("risk")), ...Array.isArray(key) ? [
          key
        ] : [
          messages,
          key
        ]);
      }
    };
  })(log);
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    Object.defineProperty(exports3, "default", {
      enumerable: true,
      get: function() {
        return _default;
      }
    });
    const _log = /* @__PURE__ */ _interop_require_default(log);
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function warn({ version, from, to }) {
      _log.default.warn(`${from}-color-renamed`, [
        `As of Tailwind CSS ${version}, \`${from}\` has been renamed to \`${to}\`.`,
        "Update your configuration file to silence this warning."
      ]);
    }
    const _default = {
      inherit: "inherit",
      current: "currentColor",
      transparent: "transparent",
      black: "#000",
      white: "#fff",
      slate: {
        50: "#f8fafc",
        100: "#f1f5f9",
        200: "#e2e8f0",
        300: "#cbd5e1",
        400: "#94a3b8",
        500: "#64748b",
        600: "#475569",
        700: "#334155",
        800: "#1e293b",
        900: "#0f172a",
        950: "#020617"
      },
      gray: {
        50: "#f9fafb",
        100: "#f3f4f6",
        200: "#e5e7eb",
        300: "#d1d5db",
        400: "#9ca3af",
        500: "#6b7280",
        600: "#4b5563",
        700: "#374151",
        800: "#1f2937",
        900: "#111827",
        950: "#030712"
      },
      zinc: {
        50: "#fafafa",
        100: "#f4f4f5",
        200: "#e4e4e7",
        300: "#d4d4d8",
        400: "#a1a1aa",
        500: "#71717a",
        600: "#52525b",
        700: "#3f3f46",
        800: "#27272a",
        900: "#18181b",
        950: "#09090b"
      },
      neutral: {
        50: "#fafafa",
        100: "#f5f5f5",
        200: "#e5e5e5",
        300: "#d4d4d4",
        400: "#a3a3a3",
        500: "#737373",
        600: "#525252",
        700: "#404040",
        800: "#262626",
        900: "#171717",
        950: "#0a0a0a"
      },
      stone: {
        50: "#fafaf9",
        100: "#f5f5f4",
        200: "#e7e5e4",
        300: "#d6d3d1",
        400: "#a8a29e",
        500: "#78716c",
        600: "#57534e",
        700: "#44403c",
        800: "#292524",
        900: "#1c1917",
        950: "#0c0a09"
      },
      red: {
        50: "#fef2f2",
        100: "#fee2e2",
        200: "#fecaca",
        300: "#fca5a5",
        400: "#f87171",
        500: "#ef4444",
        600: "#dc2626",
        700: "#b91c1c",
        800: "#991b1b",
        900: "#7f1d1d",
        950: "#450a0a"
      },
      orange: {
        50: "#fff7ed",
        100: "#ffedd5",
        200: "#fed7aa",
        300: "#fdba74",
        400: "#fb923c",
        500: "#f97316",
        600: "#ea580c",
        700: "#c2410c",
        800: "#9a3412",
        900: "#7c2d12",
        950: "#431407"
      },
      amber: {
        50: "#fffbeb",
        100: "#fef3c7",
        200: "#fde68a",
        300: "#fcd34d",
        400: "#fbbf24",
        500: "#f59e0b",
        600: "#d97706",
        700: "#b45309",
        800: "#92400e",
        900: "#78350f",
        950: "#451a03"
      },
      yellow: {
        50: "#fefce8",
        100: "#fef9c3",
        200: "#fef08a",
        300: "#fde047",
        400: "#facc15",
        500: "#eab308",
        600: "#ca8a04",
        700: "#a16207",
        800: "#854d0e",
        900: "#713f12",
        950: "#422006"
      },
      lime: {
        50: "#f7fee7",
        100: "#ecfccb",
        200: "#d9f99d",
        300: "#bef264",
        400: "#a3e635",
        500: "#84cc16",
        600: "#65a30d",
        700: "#4d7c0f",
        800: "#3f6212",
        900: "#365314",
        950: "#1a2e05"
      },
      green: {
        50: "#f0fdf4",
        100: "#dcfce7",
        200: "#bbf7d0",
        300: "#86efac",
        400: "#4ade80",
        500: "#22c55e",
        600: "#16a34a",
        700: "#15803d",
        800: "#166534",
        900: "#14532d",
        950: "#052e16"
      },
      emerald: {
        50: "#ecfdf5",
        100: "#d1fae5",
        200: "#a7f3d0",
        300: "#6ee7b7",
        400: "#34d399",
        500: "#10b981",
        600: "#059669",
        700: "#047857",
        800: "#065f46",
        900: "#064e3b",
        950: "#022c22"
      },
      teal: {
        50: "#f0fdfa",
        100: "#ccfbf1",
        200: "#99f6e4",
        300: "#5eead4",
        400: "#2dd4bf",
        500: "#14b8a6",
        600: "#0d9488",
        700: "#0f766e",
        800: "#115e59",
        900: "#134e4a",
        950: "#042f2e"
      },
      cyan: {
        50: "#ecfeff",
        100: "#cffafe",
        200: "#a5f3fc",
        300: "#67e8f9",
        400: "#22d3ee",
        500: "#06b6d4",
        600: "#0891b2",
        700: "#0e7490",
        800: "#155e75",
        900: "#164e63",
        950: "#083344"
      },
      sky: {
        50: "#f0f9ff",
        100: "#e0f2fe",
        200: "#bae6fd",
        300: "#7dd3fc",
        400: "#38bdf8",
        500: "#0ea5e9",
        600: "#0284c7",
        700: "#0369a1",
        800: "#075985",
        900: "#0c4a6e",
        950: "#082f49"
      },
      blue: {
        50: "#eff6ff",
        100: "#dbeafe",
        200: "#bfdbfe",
        300: "#93c5fd",
        400: "#60a5fa",
        500: "#3b82f6",
        600: "#2563eb",
        700: "#1d4ed8",
        800: "#1e40af",
        900: "#1e3a8a",
        950: "#172554"
      },
      indigo: {
        50: "#eef2ff",
        100: "#e0e7ff",
        200: "#c7d2fe",
        300: "#a5b4fc",
        400: "#818cf8",
        500: "#6366f1",
        600: "#4f46e5",
        700: "#4338ca",
        800: "#3730a3",
        900: "#312e81",
        950: "#1e1b4b"
      },
      violet: {
        50: "#f5f3ff",
        100: "#ede9fe",
        200: "#ddd6fe",
        300: "#c4b5fd",
        400: "#a78bfa",
        500: "#8b5cf6",
        600: "#7c3aed",
        700: "#6d28d9",
        800: "#5b21b6",
        900: "#4c1d95",
        950: "#2e1065"
      },
      purple: {
        50: "#faf5ff",
        100: "#f3e8ff",
        200: "#e9d5ff",
        300: "#d8b4fe",
        400: "#c084fc",
        500: "#a855f7",
        600: "#9333ea",
        700: "#7e22ce",
        800: "#6b21a8",
        900: "#581c87",
        950: "#3b0764"
      },
      fuchsia: {
        50: "#fdf4ff",
        100: "#fae8ff",
        200: "#f5d0fe",
        300: "#f0abfc",
        400: "#e879f9",
        500: "#d946ef",
        600: "#c026d3",
        700: "#a21caf",
        800: "#86198f",
        900: "#701a75",
        950: "#4a044e"
      },
      pink: {
        50: "#fdf2f8",
        100: "#fce7f3",
        200: "#fbcfe8",
        300: "#f9a8d4",
        400: "#f472b6",
        500: "#ec4899",
        600: "#db2777",
        700: "#be185d",
        800: "#9d174d",
        900: "#831843",
        950: "#500724"
      },
      rose: {
        50: "#fff1f2",
        100: "#ffe4e6",
        200: "#fecdd3",
        300: "#fda4af",
        400: "#fb7185",
        500: "#f43f5e",
        600: "#e11d48",
        700: "#be123c",
        800: "#9f1239",
        900: "#881337",
        950: "#4c0519"
      },
      get lightBlue() {
        warn({
          version: "v2.2",
          from: "lightBlue",
          to: "sky"
        });
        return this.sky;
      },
      get warmGray() {
        warn({
          version: "v3.0",
          from: "warmGray",
          to: "stone"
        });
        return this.stone;
      },
      get trueGray() {
        warn({
          version: "v3.0",
          from: "trueGray",
          to: "neutral"
        });
        return this.neutral;
      },
      get coolGray() {
        warn({
          version: "v3.0",
          from: "coolGray",
          to: "gray"
        });
        return this.gray;
      },
      get blueGray() {
        warn({
          version: "v3.0",
          from: "blueGray",
          to: "slate"
        });
        return this.slate;
      }
    };
  })(colors$2);
  var defaults = {};
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    Object.defineProperty(exports3, "defaults", {
      enumerable: true,
      get: function() {
        return defaults2;
      }
    });
    function defaults2(target, ...sources) {
      for (let source of sources) {
        for (let k in source) {
          var _target_hasOwnProperty;
          if (!(target === null || target === void 0 ? void 0 : (_target_hasOwnProperty = target.hasOwnProperty) === null || _target_hasOwnProperty === void 0 ? void 0 : _target_hasOwnProperty.call(target, k))) {
            target[k] = source[k];
          }
        }
        for (let k of Object.getOwnPropertySymbols(source)) {
          var _target_hasOwnProperty1;
          if (!(target === null || target === void 0 ? void 0 : (_target_hasOwnProperty1 = target.hasOwnProperty) === null || _target_hasOwnProperty1 === void 0 ? void 0 : _target_hasOwnProperty1.call(target, k))) {
            target[k] = source[k];
          }
        }
      }
      return target;
    }
  })(defaults);
  var toPath = {};
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    Object.defineProperty(exports3, "toPath", {
      enumerable: true,
      get: function() {
        return toPath2;
      }
    });
    function toPath2(path) {
      if (Array.isArray(path))
        return path;
      let openBrackets = path.split("[").length - 1;
      let closedBrackets = path.split("]").length - 1;
      if (openBrackets !== closedBrackets) {
        throw new Error(`Path is invalid. Has unbalanced brackets: ${path}`);
      }
      return path.split(/\.(?![^\[]*\])|[\[\]]/g).filter(Boolean);
    }
  })(toPath);
  var normalizeConfig = {};
  var featureFlags = {};
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name2 in all)
        Object.defineProperty(target, name2, {
          enumerable: true,
          get: all[name2]
        });
    }
    _export(exports3, {
      flagEnabled: function() {
        return flagEnabled;
      },
      issueFlagNotices: function() {
        return issueFlagNotices;
      },
      default: function() {
        return _default;
      }
    });
    const _picocolors = /* @__PURE__ */ _interop_require_default(picocolors_browserExports);
    const _log = /* @__PURE__ */ _interop_require_default(log);
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    let defaults2 = {
      optimizeUniversalDefaults: false,
      generalizedModifiers: true,
      disableColorOpacityUtilitiesByDefault: false,
      relativeContentPathsByDefault: false
    };
    let featureFlags2 = {
      future: [
        "hoverOnlyWhenSupported",
        "respectDefaultRingColorOpacity",
        "disableColorOpacityUtilitiesByDefault",
        "relativeContentPathsByDefault"
      ],
      experimental: [
        "optimizeUniversalDefaults",
        "generalizedModifiers"
      ]
    };
    function flagEnabled(config2, flag) {
      if (featureFlags2.future.includes(flag)) {
        var _config_future;
        var _config_future_flag, _ref;
        return config2.future === "all" || ((_ref = (_config_future_flag = config2 === null || config2 === void 0 ? void 0 : (_config_future = config2.future) === null || _config_future === void 0 ? void 0 : _config_future[flag]) !== null && _config_future_flag !== void 0 ? _config_future_flag : defaults2[flag]) !== null && _ref !== void 0 ? _ref : false);
      }
      if (featureFlags2.experimental.includes(flag)) {
        var _config_experimental;
        var _config_experimental_flag, _ref1;
        return config2.experimental === "all" || ((_ref1 = (_config_experimental_flag = config2 === null || config2 === void 0 ? void 0 : (_config_experimental = config2.experimental) === null || _config_experimental === void 0 ? void 0 : _config_experimental[flag]) !== null && _config_experimental_flag !== void 0 ? _config_experimental_flag : defaults2[flag]) !== null && _ref1 !== void 0 ? _ref1 : false);
      }
      return false;
    }
    function experimentalFlagsEnabled(config2) {
      if (config2.experimental === "all") {
        return featureFlags2.experimental;
      }
      var _config_experimental;
      return Object.keys((_config_experimental = config2 === null || config2 === void 0 ? void 0 : config2.experimental) !== null && _config_experimental !== void 0 ? _config_experimental : {}).filter((flag) => featureFlags2.experimental.includes(flag) && config2.experimental[flag]);
    }
    function issueFlagNotices(config2) {
      if (process.env.JEST_WORKER_ID !== void 0) {
        return;
      }
      if (experimentalFlagsEnabled(config2).length > 0) {
        let changes = experimentalFlagsEnabled(config2).map((s) => _picocolors.default.yellow(s)).join(", ");
        _log.default.warn("experimental-flags-enabled", [
          `You have enabled experimental features: ${changes}`,
          "Experimental features in Tailwind CSS are not covered by semver, may introduce breaking changes, and can change at any time."
        ]);
      }
    }
    const _default = featureFlags2;
  })(featureFlags);
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    Object.defineProperty(exports3, "normalizeConfig", {
      enumerable: true,
      get: function() {
        return normalizeConfig2;
      }
    });
    const _featureFlags = featureFlags;
    const _log = /* @__PURE__ */ _interop_require_wildcard(log);
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interop_require_wildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function normalizeConfig2(config2) {
      let valid = (() => {
        if (config2.purge) {
          return false;
        }
        if (!config2.content) {
          return false;
        }
        if (!Array.isArray(config2.content) && !(typeof config2.content === "object" && config2.content !== null)) {
          return false;
        }
        if (Array.isArray(config2.content)) {
          return config2.content.every((path) => {
            if (typeof path === "string")
              return true;
            if (typeof (path === null || path === void 0 ? void 0 : path.raw) !== "string")
              return false;
            if ((path === null || path === void 0 ? void 0 : path.extension) && typeof (path === null || path === void 0 ? void 0 : path.extension) !== "string") {
              return false;
            }
            return true;
          });
        }
        if (typeof config2.content === "object" && config2.content !== null) {
          if (Object.keys(config2.content).some((key) => ![
            "files",
            "relative",
            "extract",
            "transform"
          ].includes(key))) {
            return false;
          }
          if (Array.isArray(config2.content.files)) {
            if (!config2.content.files.every((path) => {
              if (typeof path === "string")
                return true;
              if (typeof (path === null || path === void 0 ? void 0 : path.raw) !== "string")
                return false;
              if ((path === null || path === void 0 ? void 0 : path.extension) && typeof (path === null || path === void 0 ? void 0 : path.extension) !== "string") {
                return false;
              }
              return true;
            })) {
              return false;
            }
            if (typeof config2.content.extract === "object") {
              for (let value of Object.values(config2.content.extract)) {
                if (typeof value !== "function") {
                  return false;
                }
              }
            } else if (!(config2.content.extract === void 0 || typeof config2.content.extract === "function")) {
              return false;
            }
            if (typeof config2.content.transform === "object") {
              for (let value of Object.values(config2.content.transform)) {
                if (typeof value !== "function") {
                  return false;
                }
              }
            } else if (!(config2.content.transform === void 0 || typeof config2.content.transform === "function")) {
              return false;
            }
            if (typeof config2.content.relative !== "boolean" && typeof config2.content.relative !== "undefined") {
              return false;
            }
          }
          return true;
        }
        return false;
      })();
      if (!valid) {
        _log.default.warn("purge-deprecation", [
          "The `purge`/`content` options have changed in Tailwind CSS v3.0.",
          "Update your configuration file to eliminate this warning.",
          "https://tailwindcss.com/docs/upgrade-guide#configure-content-sources"
        ]);
      }
      config2.safelist = (() => {
        var _purge_options;
        let { content, purge, safelist } = config2;
        if (Array.isArray(safelist))
          return safelist;
        if (Array.isArray(content === null || content === void 0 ? void 0 : content.safelist))
          return content.safelist;
        if (Array.isArray(purge === null || purge === void 0 ? void 0 : purge.safelist))
          return purge.safelist;
        if (Array.isArray(purge === null || purge === void 0 ? void 0 : (_purge_options = purge.options) === null || _purge_options === void 0 ? void 0 : _purge_options.safelist))
          return purge.options.safelist;
        return [];
      })();
      config2.blocklist = (() => {
        let { blocklist } = config2;
        if (Array.isArray(blocklist)) {
          if (blocklist.every((item) => typeof item === "string")) {
            return blocklist;
          }
          _log.default.warn("blocklist-invalid", [
            "The `blocklist` option must be an array of strings.",
            "https://tailwindcss.com/docs/content-configuration#discarding-classes"
          ]);
        }
        return [];
      })();
      if (typeof config2.prefix === "function") {
        _log.default.warn("prefix-function", [
          "As of Tailwind CSS v3.0, `prefix` cannot be a function.",
          "Update `prefix` in your configuration to be a string to eliminate this warning.",
          "https://tailwindcss.com/docs/upgrade-guide#prefix-cannot-be-a-function"
        ]);
        config2.prefix = "";
      } else {
        var _config_prefix;
        config2.prefix = (_config_prefix = config2.prefix) !== null && _config_prefix !== void 0 ? _config_prefix : "";
      }
      config2.content = {
        relative: (() => {
          let { content } = config2;
          if (content === null || content === void 0 ? void 0 : content.relative) {
            return content.relative;
          }
          return (0, _featureFlags.flagEnabled)(config2, "relativeContentPathsByDefault");
        })(),
        files: (() => {
          let { content, purge } = config2;
          if (Array.isArray(purge))
            return purge;
          if (Array.isArray(purge === null || purge === void 0 ? void 0 : purge.content))
            return purge.content;
          if (Array.isArray(content))
            return content;
          if (Array.isArray(content === null || content === void 0 ? void 0 : content.content))
            return content.content;
          if (Array.isArray(content === null || content === void 0 ? void 0 : content.files))
            return content.files;
          return [];
        })(),
        extract: (() => {
          let extract = (() => {
            var _config_purge, _config_content, _config_purge1, _config_purge_extract, _config_content1, _config_content_extract, _config_purge2, _config_purge_options, _config_content2, _config_content_options;
            if ((_config_purge = config2.purge) === null || _config_purge === void 0 ? void 0 : _config_purge.extract)
              return config2.purge.extract;
            if ((_config_content = config2.content) === null || _config_content === void 0 ? void 0 : _config_content.extract)
              return config2.content.extract;
            if ((_config_purge1 = config2.purge) === null || _config_purge1 === void 0 ? void 0 : (_config_purge_extract = _config_purge1.extract) === null || _config_purge_extract === void 0 ? void 0 : _config_purge_extract.DEFAULT)
              return config2.purge.extract.DEFAULT;
            if ((_config_content1 = config2.content) === null || _config_content1 === void 0 ? void 0 : (_config_content_extract = _config_content1.extract) === null || _config_content_extract === void 0 ? void 0 : _config_content_extract.DEFAULT)
              return config2.content.extract.DEFAULT;
            if ((_config_purge2 = config2.purge) === null || _config_purge2 === void 0 ? void 0 : (_config_purge_options = _config_purge2.options) === null || _config_purge_options === void 0 ? void 0 : _config_purge_options.extractors)
              return config2.purge.options.extractors;
            if ((_config_content2 = config2.content) === null || _config_content2 === void 0 ? void 0 : (_config_content_options = _config_content2.options) === null || _config_content_options === void 0 ? void 0 : _config_content_options.extractors)
              return config2.content.options.extractors;
            return {};
          })();
          let extractors = {};
          let defaultExtractor = (() => {
            var _config_purge, _config_purge_options, _config_content, _config_content_options;
            if ((_config_purge = config2.purge) === null || _config_purge === void 0 ? void 0 : (_config_purge_options = _config_purge.options) === null || _config_purge_options === void 0 ? void 0 : _config_purge_options.defaultExtractor) {
              return config2.purge.options.defaultExtractor;
            }
            if ((_config_content = config2.content) === null || _config_content === void 0 ? void 0 : (_config_content_options = _config_content.options) === null || _config_content_options === void 0 ? void 0 : _config_content_options.defaultExtractor) {
              return config2.content.options.defaultExtractor;
            }
            return void 0;
          })();
          if (defaultExtractor !== void 0) {
            extractors.DEFAULT = defaultExtractor;
          }
          if (typeof extract === "function") {
            extractors.DEFAULT = extract;
          } else if (Array.isArray(extract)) {
            for (let { extensions, extractor } of extract !== null && extract !== void 0 ? extract : []) {
              for (let extension of extensions) {
                extractors[extension] = extractor;
              }
            }
          } else if (typeof extract === "object" && extract !== null) {
            Object.assign(extractors, extract);
          }
          return extractors;
        })(),
        transform: (() => {
          let transform = (() => {
            var _config_purge, _config_content, _config_purge1, _config_purge_transform, _config_content1, _config_content_transform;
            if ((_config_purge = config2.purge) === null || _config_purge === void 0 ? void 0 : _config_purge.transform)
              return config2.purge.transform;
            if ((_config_content = config2.content) === null || _config_content === void 0 ? void 0 : _config_content.transform)
              return config2.content.transform;
            if ((_config_purge1 = config2.purge) === null || _config_purge1 === void 0 ? void 0 : (_config_purge_transform = _config_purge1.transform) === null || _config_purge_transform === void 0 ? void 0 : _config_purge_transform.DEFAULT)
              return config2.purge.transform.DEFAULT;
            if ((_config_content1 = config2.content) === null || _config_content1 === void 0 ? void 0 : (_config_content_transform = _config_content1.transform) === null || _config_content_transform === void 0 ? void 0 : _config_content_transform.DEFAULT)
              return config2.content.transform.DEFAULT;
            return {};
          })();
          let transformers = {};
          if (typeof transform === "function") {
            transformers.DEFAULT = transform;
          }
          if (typeof transform === "object" && transform !== null) {
            Object.assign(transformers, transform);
          }
          return transformers;
        })()
      };
      for (let file of config2.content.files) {
        if (typeof file === "string" && /{([^,]*?)}/g.test(file)) {
          _log.default.warn("invalid-glob-braces", [
            `The glob pattern ${(0, _log.dim)(file)} in your Tailwind CSS configuration is invalid.`,
            `Update it to ${(0, _log.dim)(file.replace(/{([^,]*?)}/g, "$1"))} to silence this warning.`
          ]);
          break;
        }
      }
      return config2;
    }
  })(normalizeConfig);
  var isPlainObject = {};
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    Object.defineProperty(exports3, "default", {
      enumerable: true,
      get: function() {
        return isPlainObject2;
      }
    });
    function isPlainObject2(value) {
      if (Object.prototype.toString.call(value) !== "[object Object]") {
        return false;
      }
      const prototype = Object.getPrototypeOf(value);
      return prototype === null || Object.getPrototypeOf(prototype) === null;
    }
  })(isPlainObject);
  var cloneDeep = {};
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    Object.defineProperty(exports3, "cloneDeep", {
      enumerable: true,
      get: function() {
        return cloneDeep2;
      }
    });
    function cloneDeep2(value) {
      if (Array.isArray(value)) {
        return value.map((child) => cloneDeep2(child));
      }
      if (typeof value === "object" && value !== null) {
        return Object.fromEntries(Object.entries(value).map(([k, v]) => [
          k,
          cloneDeep2(v)
        ]));
      }
      return value;
    }
  })(cloneDeep);
  var pluginUtils = {};
  var escapeCommas = {};
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    Object.defineProperty(exports3, "default", {
      enumerable: true,
      get: function() {
        return escapeCommas2;
      }
    });
    function escapeCommas2(className) {
      return className.replace(/\\,/g, "\\2c ");
    }
  })(escapeCommas);
  var withAlphaVariable = {};
  var color$1 = {};
  var colorNames$1 = {};
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    Object.defineProperty(exports3, "default", {
      enumerable: true,
      get: function() {
        return _default;
      }
    });
    const _default = {
      aliceblue: [
        240,
        248,
        255
      ],
      antiquewhite: [
        250,
        235,
        215
      ],
      aqua: [
        0,
        255,
        255
      ],
      aquamarine: [
        127,
        255,
        212
      ],
      azure: [
        240,
        255,
        255
      ],
      beige: [
        245,
        245,
        220
      ],
      bisque: [
        255,
        228,
        196
      ],
      black: [
        0,
        0,
        0
      ],
      blanchedalmond: [
        255,
        235,
        205
      ],
      blue: [
        0,
        0,
        255
      ],
      blueviolet: [
        138,
        43,
        226
      ],
      brown: [
        165,
        42,
        42
      ],
      burlywood: [
        222,
        184,
        135
      ],
      cadetblue: [
        95,
        158,
        160
      ],
      chartreuse: [
        127,
        255,
        0
      ],
      chocolate: [
        210,
        105,
        30
      ],
      coral: [
        255,
        127,
        80
      ],
      cornflowerblue: [
        100,
        149,
        237
      ],
      cornsilk: [
        255,
        248,
        220
      ],
      crimson: [
        220,
        20,
        60
      ],
      cyan: [
        0,
        255,
        255
      ],
      darkblue: [
        0,
        0,
        139
      ],
      darkcyan: [
        0,
        139,
        139
      ],
      darkgoldenrod: [
        184,
        134,
        11
      ],
      darkgray: [
        169,
        169,
        169
      ],
      darkgreen: [
        0,
        100,
        0
      ],
      darkgrey: [
        169,
        169,
        169
      ],
      darkkhaki: [
        189,
        183,
        107
      ],
      darkmagenta: [
        139,
        0,
        139
      ],
      darkolivegreen: [
        85,
        107,
        47
      ],
      darkorange: [
        255,
        140,
        0
      ],
      darkorchid: [
        153,
        50,
        204
      ],
      darkred: [
        139,
        0,
        0
      ],
      darksalmon: [
        233,
        150,
        122
      ],
      darkseagreen: [
        143,
        188,
        143
      ],
      darkslateblue: [
        72,
        61,
        139
      ],
      darkslategray: [
        47,
        79,
        79
      ],
      darkslategrey: [
        47,
        79,
        79
      ],
      darkturquoise: [
        0,
        206,
        209
      ],
      darkviolet: [
        148,
        0,
        211
      ],
      deeppink: [
        255,
        20,
        147
      ],
      deepskyblue: [
        0,
        191,
        255
      ],
      dimgray: [
        105,
        105,
        105
      ],
      dimgrey: [
        105,
        105,
        105
      ],
      dodgerblue: [
        30,
        144,
        255
      ],
      firebrick: [
        178,
        34,
        34
      ],
      floralwhite: [
        255,
        250,
        240
      ],
      forestgreen: [
        34,
        139,
        34
      ],
      fuchsia: [
        255,
        0,
        255
      ],
      gainsboro: [
        220,
        220,
        220
      ],
      ghostwhite: [
        248,
        248,
        255
      ],
      gold: [
        255,
        215,
        0
      ],
      goldenrod: [
        218,
        165,
        32
      ],
      gray: [
        128,
        128,
        128
      ],
      green: [
        0,
        128,
        0
      ],
      greenyellow: [
        173,
        255,
        47
      ],
      grey: [
        128,
        128,
        128
      ],
      honeydew: [
        240,
        255,
        240
      ],
      hotpink: [
        255,
        105,
        180
      ],
      indianred: [
        205,
        92,
        92
      ],
      indigo: [
        75,
        0,
        130
      ],
      ivory: [
        255,
        255,
        240
      ],
      khaki: [
        240,
        230,
        140
      ],
      lavender: [
        230,
        230,
        250
      ],
      lavenderblush: [
        255,
        240,
        245
      ],
      lawngreen: [
        124,
        252,
        0
      ],
      lemonchiffon: [
        255,
        250,
        205
      ],
      lightblue: [
        173,
        216,
        230
      ],
      lightcoral: [
        240,
        128,
        128
      ],
      lightcyan: [
        224,
        255,
        255
      ],
      lightgoldenrodyellow: [
        250,
        250,
        210
      ],
      lightgray: [
        211,
        211,
        211
      ],
      lightgreen: [
        144,
        238,
        144
      ],
      lightgrey: [
        211,
        211,
        211
      ],
      lightpink: [
        255,
        182,
        193
      ],
      lightsalmon: [
        255,
        160,
        122
      ],
      lightseagreen: [
        32,
        178,
        170
      ],
      lightskyblue: [
        135,
        206,
        250
      ],
      lightslategray: [
        119,
        136,
        153
      ],
      lightslategrey: [
        119,
        136,
        153
      ],
      lightsteelblue: [
        176,
        196,
        222
      ],
      lightyellow: [
        255,
        255,
        224
      ],
      lime: [
        0,
        255,
        0
      ],
      limegreen: [
        50,
        205,
        50
      ],
      linen: [
        250,
        240,
        230
      ],
      magenta: [
        255,
        0,
        255
      ],
      maroon: [
        128,
        0,
        0
      ],
      mediumaquamarine: [
        102,
        205,
        170
      ],
      mediumblue: [
        0,
        0,
        205
      ],
      mediumorchid: [
        186,
        85,
        211
      ],
      mediumpurple: [
        147,
        112,
        219
      ],
      mediumseagreen: [
        60,
        179,
        113
      ],
      mediumslateblue: [
        123,
        104,
        238
      ],
      mediumspringgreen: [
        0,
        250,
        154
      ],
      mediumturquoise: [
        72,
        209,
        204
      ],
      mediumvioletred: [
        199,
        21,
        133
      ],
      midnightblue: [
        25,
        25,
        112
      ],
      mintcream: [
        245,
        255,
        250
      ],
      mistyrose: [
        255,
        228,
        225
      ],
      moccasin: [
        255,
        228,
        181
      ],
      navajowhite: [
        255,
        222,
        173
      ],
      navy: [
        0,
        0,
        128
      ],
      oldlace: [
        253,
        245,
        230
      ],
      olive: [
        128,
        128,
        0
      ],
      olivedrab: [
        107,
        142,
        35
      ],
      orange: [
        255,
        165,
        0
      ],
      orangered: [
        255,
        69,
        0
      ],
      orchid: [
        218,
        112,
        214
      ],
      palegoldenrod: [
        238,
        232,
        170
      ],
      palegreen: [
        152,
        251,
        152
      ],
      paleturquoise: [
        175,
        238,
        238
      ],
      palevioletred: [
        219,
        112,
        147
      ],
      papayawhip: [
        255,
        239,
        213
      ],
      peachpuff: [
        255,
        218,
        185
      ],
      peru: [
        205,
        133,
        63
      ],
      pink: [
        255,
        192,
        203
      ],
      plum: [
        221,
        160,
        221
      ],
      powderblue: [
        176,
        224,
        230
      ],
      purple: [
        128,
        0,
        128
      ],
      rebeccapurple: [
        102,
        51,
        153
      ],
      red: [
        255,
        0,
        0
      ],
      rosybrown: [
        188,
        143,
        143
      ],
      royalblue: [
        65,
        105,
        225
      ],
      saddlebrown: [
        139,
        69,
        19
      ],
      salmon: [
        250,
        128,
        114
      ],
      sandybrown: [
        244,
        164,
        96
      ],
      seagreen: [
        46,
        139,
        87
      ],
      seashell: [
        255,
        245,
        238
      ],
      sienna: [
        160,
        82,
        45
      ],
      silver: [
        192,
        192,
        192
      ],
      skyblue: [
        135,
        206,
        235
      ],
      slateblue: [
        106,
        90,
        205
      ],
      slategray: [
        112,
        128,
        144
      ],
      slategrey: [
        112,
        128,
        144
      ],
      snow: [
        255,
        250,
        250
      ],
      springgreen: [
        0,
        255,
        127
      ],
      steelblue: [
        70,
        130,
        180
      ],
      tan: [
        210,
        180,
        140
      ],
      teal: [
        0,
        128,
        128
      ],
      thistle: [
        216,
        191,
        216
      ],
      tomato: [
        255,
        99,
        71
      ],
      turquoise: [
        64,
        224,
        208
      ],
      violet: [
        238,
        130,
        238
      ],
      wheat: [
        245,
        222,
        179
      ],
      white: [
        255,
        255,
        255
      ],
      whitesmoke: [
        245,
        245,
        245
      ],
      yellow: [
        255,
        255,
        0
      ],
      yellowgreen: [
        154,
        205,
        50
      ]
    };
  })(colorNames$1);
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name2 in all)
        Object.defineProperty(target, name2, {
          enumerable: true,
          get: all[name2]
        });
    }
    _export(exports3, {
      parseColor: function() {
        return parseColor;
      },
      formatColor: function() {
        return formatColor;
      }
    });
    const _colorNames = /* @__PURE__ */ _interop_require_default(colorNames$1);
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    let HEX = /^#([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i;
    let SHORT_HEX = /^#([a-f\d])([a-f\d])([a-f\d])([a-f\d])?$/i;
    let VALUE = /(?:\d+|\d*\.\d+)%?/;
    let SEP = /(?:\s*,\s*|\s+)/;
    let ALPHA_SEP = /\s*[,/]\s*/;
    let CUSTOM_PROPERTY = /var\(--(?:[^ )]*?)(?:,(?:[^ )]*?|var\(--[^ )]*?\)))?\)/;
    let RGB = new RegExp(`^(rgba?)\\(\\s*(${VALUE.source}|${CUSTOM_PROPERTY.source})(?:${SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?(?:${SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?(?:${ALPHA_SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?\\s*\\)$`);
    let HSL = new RegExp(`^(hsla?)\\(\\s*((?:${VALUE.source})(?:deg|rad|grad|turn)?|${CUSTOM_PROPERTY.source})(?:${SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?(?:${SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?(?:${ALPHA_SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?\\s*\\)$`);
    function parseColor(value, { loose = false } = {}) {
      var _match_, _match__toString;
      if (typeof value !== "string") {
        return null;
      }
      value = value.trim();
      if (value === "transparent") {
        return {
          mode: "rgb",
          color: [
            "0",
            "0",
            "0"
          ],
          alpha: "0"
        };
      }
      if (value in _colorNames.default) {
        return {
          mode: "rgb",
          color: _colorNames.default[value].map((v) => v.toString())
        };
      }
      let hex = value.replace(SHORT_HEX, (_, r, g, b, a) => [
        "#",
        r,
        r,
        g,
        g,
        b,
        b,
        a ? a + a : ""
      ].join("")).match(HEX);
      if (hex !== null) {
        return {
          mode: "rgb",
          color: [
            parseInt(hex[1], 16),
            parseInt(hex[2], 16),
            parseInt(hex[3], 16)
          ].map((v) => v.toString()),
          alpha: hex[4] ? (parseInt(hex[4], 16) / 255).toString() : void 0
        };
      }
      var _value_match;
      let match = (_value_match = value.match(RGB)) !== null && _value_match !== void 0 ? _value_match : value.match(HSL);
      if (match === null) {
        return null;
      }
      let color2 = [
        match[2],
        match[3],
        match[4]
      ].filter(Boolean).map((v) => v.toString());
      if (color2.length === 2 && color2[0].startsWith("var(")) {
        return {
          mode: match[1],
          color: [
            color2[0]
          ],
          alpha: color2[1]
        };
      }
      if (!loose && color2.length !== 3) {
        return null;
      }
      if (color2.length < 3 && !color2.some((part) => /^var\(.*?\)$/.test(part))) {
        return null;
      }
      return {
        mode: match[1],
        color: color2,
        alpha: (_match_ = match[5]) === null || _match_ === void 0 ? void 0 : (_match__toString = _match_.toString) === null || _match__toString === void 0 ? void 0 : _match__toString.call(_match_)
      };
    }
    function formatColor({ mode, color: color2, alpha }) {
      let hasAlpha = alpha !== void 0;
      if (mode === "rgba" || mode === "hsla") {
        return `${mode}(${color2.join(", ")}${hasAlpha ? `, ${alpha}` : ""})`;
      }
      return `${mode}(${color2.join(" ")}${hasAlpha ? ` / ${alpha}` : ""})`;
    }
  })(color$1);
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name2 in all)
        Object.defineProperty(target, name2, {
          enumerable: true,
          get: all[name2]
        });
    }
    _export(exports3, {
      withAlphaValue: function() {
        return withAlphaValue;
      },
      default: function() {
        return withAlphaVariable2;
      }
    });
    const _color = color$1;
    function withAlphaValue(color2, alphaValue, defaultValue) {
      if (typeof color2 === "function") {
        return color2({
          opacityValue: alphaValue
        });
      }
      let parsed = (0, _color.parseColor)(color2, {
        loose: true
      });
      if (parsed === null) {
        return defaultValue;
      }
      return (0, _color.formatColor)({
        ...parsed,
        alpha: alphaValue
      });
    }
    function withAlphaVariable2({ color: color2, property, variable }) {
      let properties = [].concat(property);
      if (typeof color2 === "function") {
        return {
          [variable]: "1",
          ...Object.fromEntries(properties.map((p) => {
            return [
              p,
              color2({
                opacityVariable: variable,
                opacityValue: `var(${variable})`
              })
            ];
          }))
        };
      }
      const parsed = (0, _color.parseColor)(color2);
      if (parsed === null) {
        return Object.fromEntries(properties.map((p) => [
          p,
          color2
        ]));
      }
      if (parsed.alpha !== void 0) {
        return Object.fromEntries(properties.map((p) => [
          p,
          color2
        ]));
      }
      return {
        [variable]: "1",
        ...Object.fromEntries(properties.map((p) => {
          return [
            p,
            (0, _color.formatColor)({
              ...parsed,
              alpha: `var(${variable})`
            })
          ];
        }))
      };
    }
  })(withAlphaVariable);
  var dataTypes = {};
  var parseBoxShadowValue = {};
  var splitAtTopLevelOnly = {};
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    Object.defineProperty(exports3, "splitAtTopLevelOnly", {
      enumerable: true,
      get: function() {
        return splitAtTopLevelOnly2;
      }
    });
    function splitAtTopLevelOnly2(input, separator) {
      let stack = [];
      let parts = [];
      let lastPos = 0;
      let isEscaped = false;
      for (let idx = 0; idx < input.length; idx++) {
        let char = input[idx];
        if (stack.length === 0 && char === separator[0] && !isEscaped) {
          if (separator.length === 1 || input.slice(idx, idx + separator.length) === separator) {
            parts.push(input.slice(lastPos, idx));
            lastPos = idx + separator.length;
          }
        }
        if (isEscaped) {
          isEscaped = false;
        } else if (char === "\\") {
          isEscaped = true;
        }
        if (char === "(" || char === "[" || char === "{") {
          stack.push(char);
        } else if (char === ")" && stack[stack.length - 1] === "(" || char === "]" && stack[stack.length - 1] === "[" || char === "}" && stack[stack.length - 1] === "{") {
          stack.pop();
        }
      }
      parts.push(input.slice(lastPos));
      return parts;
    }
  })(splitAtTopLevelOnly);
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name2 in all)
        Object.defineProperty(target, name2, {
          enumerable: true,
          get: all[name2]
        });
    }
    _export(exports3, {
      parseBoxShadowValue: function() {
        return parseBoxShadowValue2;
      },
      formatBoxShadowValue: function() {
        return formatBoxShadowValue;
      }
    });
    const _splitAtTopLevelOnly = splitAtTopLevelOnly;
    let KEYWORDS = /* @__PURE__ */ new Set([
      "inset",
      "inherit",
      "initial",
      "revert",
      "unset"
    ]);
    let SPACE = /\ +(?![^(]*\))/g;
    let LENGTH = /^-?(\d+|\.\d+)(.*?)$/g;
    function parseBoxShadowValue2(input) {
      let shadows = (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(input, ",");
      return shadows.map((shadow) => {
        let value = shadow.trim();
        let result = {
          raw: value
        };
        let parts = value.split(SPACE);
        let seen = /* @__PURE__ */ new Set();
        for (let part of parts) {
          LENGTH.lastIndex = 0;
          if (!seen.has("KEYWORD") && KEYWORDS.has(part)) {
            result.keyword = part;
            seen.add("KEYWORD");
          } else if (LENGTH.test(part)) {
            if (!seen.has("X")) {
              result.x = part;
              seen.add("X");
            } else if (!seen.has("Y")) {
              result.y = part;
              seen.add("Y");
            } else if (!seen.has("BLUR")) {
              result.blur = part;
              seen.add("BLUR");
            } else if (!seen.has("SPREAD")) {
              result.spread = part;
              seen.add("SPREAD");
            }
          } else {
            if (!result.color) {
              result.color = part;
            } else {
              if (!result.unknown)
                result.unknown = [];
              result.unknown.push(part);
            }
          }
        }
        result.valid = result.x !== void 0 && result.y !== void 0;
        return result;
      });
    }
    function formatBoxShadowValue(shadows) {
      return shadows.map((shadow) => {
        if (!shadow.valid) {
          return shadow.raw;
        }
        return [
          shadow.keyword,
          shadow.x,
          shadow.y,
          shadow.blur,
          shadow.spread,
          shadow.color
        ].filter(Boolean).join(" ");
      }).join(", ");
    }
  })(parseBoxShadowValue);
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name2 in all)
        Object.defineProperty(target, name2, {
          enumerable: true,
          get: all[name2]
        });
    }
    _export(exports3, {
      normalize: function() {
        return normalize;
      },
      url: function() {
        return url;
      },
      number: function() {
        return number;
      },
      percentage: function() {
        return percentage;
      },
      length: function() {
        return length;
      },
      lineWidth: function() {
        return lineWidth;
      },
      shadow: function() {
        return shadow;
      },
      color: function() {
        return color2;
      },
      image: function() {
        return image;
      },
      gradient: function() {
        return gradient;
      },
      position: function() {
        return position;
      },
      familyName: function() {
        return familyName;
      },
      genericName: function() {
        return genericName;
      },
      absoluteSize: function() {
        return absoluteSize;
      },
      relativeSize: function() {
        return relativeSize;
      }
    });
    const _color = color$1;
    const _parseBoxShadowValue = parseBoxShadowValue;
    const _splitAtTopLevelOnly = splitAtTopLevelOnly;
    let cssFunctions = [
      "min",
      "max",
      "clamp",
      "calc"
    ];
    function isCSSFunction(value) {
      return cssFunctions.some((fn) => new RegExp(`^${fn}\\(.*\\)`).test(value));
    }
    const AUTO_VAR_INJECTION_EXCEPTIONS = /* @__PURE__ */ new Set([
      // Concrete properties
      "scroll-timeline-name",
      "timeline-scope",
      "view-timeline-name",
      "font-palette",
      // Shorthand properties
      "scroll-timeline",
      "animation-timeline",
      "view-timeline"
    ]);
    function normalize(value, context = null, isRoot = true) {
      let isVarException = context && AUTO_VAR_INJECTION_EXCEPTIONS.has(context.property);
      if (value.startsWith("--") && !isVarException) {
        return `var(${value})`;
      }
      if (value.includes("url(")) {
        return value.split(/(url\(.*?\))/g).filter(Boolean).map((part) => {
          if (/^url\(.*?\)$/.test(part)) {
            return part;
          }
          return normalize(part, context, false);
        }).join("");
      }
      value = value.replace(/([^\\])_+/g, (fullMatch, characterBefore) => characterBefore + " ".repeat(fullMatch.length - 1)).replace(/^_/g, " ").replace(/\\_/g, "_");
      if (isRoot) {
        value = value.trim();
      }
      value = normalizeMathOperatorSpacing(value);
      return value;
    }
    function normalizeMathOperatorSpacing(value) {
      let preventFormattingInFunctions = [
        "theme"
      ];
      let preventFormattingKeywords = [
        "min-content",
        "max-content",
        "fit-content",
        // Env
        "safe-area-inset-top",
        "safe-area-inset-right",
        "safe-area-inset-bottom",
        "safe-area-inset-left",
        "titlebar-area-x",
        "titlebar-area-y",
        "titlebar-area-width",
        "titlebar-area-height",
        "keyboard-inset-top",
        "keyboard-inset-right",
        "keyboard-inset-bottom",
        "keyboard-inset-left",
        "keyboard-inset-width",
        "keyboard-inset-height",
        "radial-gradient",
        "linear-gradient",
        "conic-gradient",
        "repeating-radial-gradient",
        "repeating-linear-gradient",
        "repeating-conic-gradient"
      ];
      return value.replace(/(calc|min|max|clamp)\(.+\)/g, (match) => {
        let result = "";
        function lastChar() {
          let char = result.trimEnd();
          return char[char.length - 1];
        }
        for (let i = 0; i < match.length; i++) {
          let peek = function(word) {
            return word.split("").every((char2, j) => match[i + j] === char2);
          }, consumeUntil = function(chars) {
            let minIndex = Infinity;
            for (let char2 of chars) {
              let index = match.indexOf(char2, i);
              if (index !== -1 && index < minIndex) {
                minIndex = index;
              }
            }
            let result2 = match.slice(i, minIndex);
            i += result2.length - 1;
            return result2;
          };
          let char = match[i];
          if (peek("var")) {
            result += consumeUntil([
              ")",
              ","
            ]);
          } else if (preventFormattingKeywords.some((keyword) => peek(keyword))) {
            let keyword = preventFormattingKeywords.find((keyword2) => peek(keyword2));
            result += keyword;
            i += keyword.length - 1;
          } else if (preventFormattingInFunctions.some((fn) => peek(fn))) {
            result += consumeUntil([
              ")"
            ]);
          } else if (peek("[")) {
            result += consumeUntil([
              "]"
            ]);
          } else if ([
            "+",
            "-",
            "*",
            "/"
          ].includes(char) && ![
            "(",
            "+",
            "-",
            "*",
            "/",
            ","
          ].includes(lastChar())) {
            result += ` ${char} `;
          } else {
            result += char;
          }
        }
        return result.replace(/\s+/g, " ");
      });
    }
    function url(value) {
      return value.startsWith("url(");
    }
    function number(value) {
      return !isNaN(Number(value)) || isCSSFunction(value);
    }
    function percentage(value) {
      return value.endsWith("%") && number(value.slice(0, -1)) || isCSSFunction(value);
    }
    let lengthUnits = [
      "cm",
      "mm",
      "Q",
      "in",
      "pc",
      "pt",
      "px",
      "em",
      "ex",
      "ch",
      "rem",
      "lh",
      "rlh",
      "vw",
      "vh",
      "vmin",
      "vmax",
      "vb",
      "vi",
      "svw",
      "svh",
      "lvw",
      "lvh",
      "dvw",
      "dvh",
      "cqw",
      "cqh",
      "cqi",
      "cqb",
      "cqmin",
      "cqmax"
    ];
    let lengthUnitsPattern = `(?:${lengthUnits.join("|")})`;
    function length(value) {
      return value === "0" || new RegExp(`^[+-]?[0-9]*.?[0-9]+(?:[eE][+-]?[0-9]+)?${lengthUnitsPattern}$`).test(value) || isCSSFunction(value);
    }
    let lineWidths = /* @__PURE__ */ new Set([
      "thin",
      "medium",
      "thick"
    ]);
    function lineWidth(value) {
      return lineWidths.has(value);
    }
    function shadow(value) {
      let parsedShadows = (0, _parseBoxShadowValue.parseBoxShadowValue)(normalize(value));
      for (let parsedShadow of parsedShadows) {
        if (!parsedShadow.valid) {
          return false;
        }
      }
      return true;
    }
    function color2(value) {
      let colors2 = 0;
      let result = (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(value, "_").every((part) => {
        part = normalize(part);
        if (part.startsWith("var("))
          return true;
        if ((0, _color.parseColor)(part, {
          loose: true
        }) !== null)
          return colors2++, true;
        return false;
      });
      if (!result)
        return false;
      return colors2 > 0;
    }
    function image(value) {
      let images = 0;
      let result = (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(value, ",").every((part) => {
        part = normalize(part);
        if (part.startsWith("var("))
          return true;
        if (url(part) || gradient(part) || [
          "element(",
          "image(",
          "cross-fade(",
          "image-set("
        ].some((fn) => part.startsWith(fn))) {
          images++;
          return true;
        }
        return false;
      });
      if (!result)
        return false;
      return images > 0;
    }
    let gradientTypes = /* @__PURE__ */ new Set([
      "conic-gradient",
      "linear-gradient",
      "radial-gradient",
      "repeating-conic-gradient",
      "repeating-linear-gradient",
      "repeating-radial-gradient"
    ]);
    function gradient(value) {
      value = normalize(value);
      for (let type of gradientTypes) {
        if (value.startsWith(`${type}(`)) {
          return true;
        }
      }
      return false;
    }
    let validPositions = /* @__PURE__ */ new Set([
      "center",
      "top",
      "right",
      "bottom",
      "left"
    ]);
    function position(value) {
      let positions = 0;
      let result = (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(value, "_").every((part) => {
        part = normalize(part);
        if (part.startsWith("var("))
          return true;
        if (validPositions.has(part) || length(part) || percentage(part)) {
          positions++;
          return true;
        }
        return false;
      });
      if (!result)
        return false;
      return positions > 0;
    }
    function familyName(value) {
      let fonts = 0;
      let result = (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(value, ",").every((part) => {
        part = normalize(part);
        if (part.startsWith("var("))
          return true;
        if (part.includes(" ")) {
          if (!/(['"])([^"']+)\1/g.test(part)) {
            return false;
          }
        }
        if (/^\d/g.test(part)) {
          return false;
        }
        fonts++;
        return true;
      });
      if (!result)
        return false;
      return fonts > 0;
    }
    let genericNames = /* @__PURE__ */ new Set([
      "serif",
      "sans-serif",
      "monospace",
      "cursive",
      "fantasy",
      "system-ui",
      "ui-serif",
      "ui-sans-serif",
      "ui-monospace",
      "ui-rounded",
      "math",
      "emoji",
      "fangsong"
    ]);
    function genericName(value) {
      return genericNames.has(value);
    }
    let absoluteSizes = /* @__PURE__ */ new Set([
      "xx-small",
      "x-small",
      "small",
      "medium",
      "large",
      "x-large",
      "xx-large",
      "xxx-large"
    ]);
    function absoluteSize(value) {
      return absoluteSizes.has(value);
    }
    let relativeSizes = /* @__PURE__ */ new Set([
      "larger",
      "smaller"
    ]);
    function relativeSize(value) {
      return relativeSizes.has(value);
    }
  })(dataTypes);
  var validateFormalSyntax = {};
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    Object.defineProperty(exports3, "backgroundSize", {
      enumerable: true,
      get: function() {
        return backgroundSize;
      }
    });
    const _dataTypes = dataTypes;
    const _splitAtTopLevelOnly = splitAtTopLevelOnly;
    function backgroundSize(value) {
      let keywordValues = [
        "cover",
        "contain"
      ];
      return (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(value, ",").every((part) => {
        let sizes = (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(part, "_").filter(Boolean);
        if (sizes.length === 1 && keywordValues.includes(sizes[0]))
          return true;
        if (sizes.length !== 1 && sizes.length !== 2)
          return false;
        return sizes.every((size) => (0, _dataTypes.length)(size) || (0, _dataTypes.percentage)(size) || size === "auto");
      });
    }
  })(validateFormalSyntax);
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name2 in all)
        Object.defineProperty(target, name2, {
          enumerable: true,
          get: all[name2]
        });
    }
    _export(exports3, {
      updateAllClasses: function() {
        return updateAllClasses;
      },
      asValue: function() {
        return asValue;
      },
      parseColorFormat: function() {
        return parseColorFormat;
      },
      asColor: function() {
        return asColor;
      },
      asLookupValue: function() {
        return asLookupValue;
      },
      typeMap: function() {
        return typeMap;
      },
      coerceValue: function() {
        return coerceValue;
      },
      getMatchingTypes: function() {
        return getMatchingTypes;
      }
    });
    const _escapeCommas = /* @__PURE__ */ _interop_require_default(escapeCommas);
    const _withAlphaVariable = withAlphaVariable;
    const _dataTypes = dataTypes;
    const _negateValue = /* @__PURE__ */ _interop_require_default(negateValue);
    const _validateFormalSyntax = validateFormalSyntax;
    const _featureFlags = featureFlags;
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function updateAllClasses(selectors, updateClass) {
      selectors.walkClasses((sel) => {
        sel.value = updateClass(sel.value);
        if (sel.raws && sel.raws.value) {
          sel.raws.value = (0, _escapeCommas.default)(sel.raws.value);
        }
      });
    }
    function resolveArbitraryValue(modifier, validate) {
      if (!isArbitraryValue(modifier)) {
        return void 0;
      }
      let value = modifier.slice(1, -1);
      if (!validate(value)) {
        return void 0;
      }
      return (0, _dataTypes.normalize)(value);
    }
    function asNegativeValue(modifier, lookup = {}, validate) {
      let positiveValue = lookup[modifier];
      if (positiveValue !== void 0) {
        return (0, _negateValue.default)(positiveValue);
      }
      if (isArbitraryValue(modifier)) {
        let resolved = resolveArbitraryValue(modifier, validate);
        if (resolved === void 0) {
          return void 0;
        }
        return (0, _negateValue.default)(resolved);
      }
    }
    function asValue(modifier, options = {}, { validate = () => true } = {}) {
      var _options_values;
      let value = (_options_values = options.values) === null || _options_values === void 0 ? void 0 : _options_values[modifier];
      if (value !== void 0) {
        return value;
      }
      if (options.supportsNegativeValues && modifier.startsWith("-")) {
        return asNegativeValue(modifier.slice(1), options.values, validate);
      }
      return resolveArbitraryValue(modifier, validate);
    }
    function isArbitraryValue(input) {
      return input.startsWith("[") && input.endsWith("]");
    }
    function splitUtilityModifier(modifier) {
      let slashIdx = modifier.lastIndexOf("/");
      let arbitraryStartIdx = modifier.lastIndexOf("[", slashIdx);
      let arbitraryEndIdx = modifier.indexOf("]", slashIdx);
      let isNextToArbitrary = modifier[slashIdx - 1] === "]" || modifier[slashIdx + 1] === "[";
      if (!isNextToArbitrary) {
        if (arbitraryStartIdx !== -1 && arbitraryEndIdx !== -1) {
          if (arbitraryStartIdx < slashIdx && slashIdx < arbitraryEndIdx) {
            slashIdx = modifier.lastIndexOf("/", arbitraryStartIdx);
          }
        }
      }
      if (slashIdx === -1 || slashIdx === modifier.length - 1) {
        return [
          modifier,
          void 0
        ];
      }
      let arbitrary = isArbitraryValue(modifier);
      if (arbitrary && !modifier.includes("]/[")) {
        return [
          modifier,
          void 0
        ];
      }
      return [
        modifier.slice(0, slashIdx),
        modifier.slice(slashIdx + 1)
      ];
    }
    function parseColorFormat(value) {
      if (typeof value === "string" && value.includes("<alpha-value>")) {
        let oldValue = value;
        return ({ opacityValue = 1 }) => oldValue.replace("<alpha-value>", opacityValue);
      }
      return value;
    }
    function unwrapArbitraryModifier(modifier) {
      return (0, _dataTypes.normalize)(modifier.slice(1, -1));
    }
    function asColor(modifier, options = {}, { tailwindConfig = {} } = {}) {
      var _options_values;
      if (((_options_values = options.values) === null || _options_values === void 0 ? void 0 : _options_values[modifier]) !== void 0) {
        var _options_values1;
        return parseColorFormat((_options_values1 = options.values) === null || _options_values1 === void 0 ? void 0 : _options_values1[modifier]);
      }
      let [color2, alpha] = splitUtilityModifier(modifier);
      if (alpha !== void 0) {
        var _options_values2, _tailwindConfig_theme, _tailwindConfig_theme_opacity;
        var _options_values_color;
        let normalizedColor = (_options_values_color = (_options_values2 = options.values) === null || _options_values2 === void 0 ? void 0 : _options_values2[color2]) !== null && _options_values_color !== void 0 ? _options_values_color : isArbitraryValue(color2) ? color2.slice(1, -1) : void 0;
        if (normalizedColor === void 0) {
          return void 0;
        }
        normalizedColor = parseColorFormat(normalizedColor);
        if (isArbitraryValue(alpha)) {
          return (0, _withAlphaVariable.withAlphaValue)(normalizedColor, unwrapArbitraryModifier(alpha));
        }
        if (((_tailwindConfig_theme = tailwindConfig.theme) === null || _tailwindConfig_theme === void 0 ? void 0 : (_tailwindConfig_theme_opacity = _tailwindConfig_theme.opacity) === null || _tailwindConfig_theme_opacity === void 0 ? void 0 : _tailwindConfig_theme_opacity[alpha]) === void 0) {
          return void 0;
        }
        return (0, _withAlphaVariable.withAlphaValue)(normalizedColor, tailwindConfig.theme.opacity[alpha]);
      }
      return asValue(modifier, options, {
        validate: _dataTypes.color
      });
    }
    function asLookupValue(modifier, options = {}) {
      var _options_values;
      return (_options_values = options.values) === null || _options_values === void 0 ? void 0 : _options_values[modifier];
    }
    function guess(validate) {
      return (modifier, options) => {
        return asValue(modifier, options, {
          validate
        });
      };
    }
    let typeMap = {
      any: asValue,
      color: asColor,
      url: guess(_dataTypes.url),
      image: guess(_dataTypes.image),
      length: guess(_dataTypes.length),
      percentage: guess(_dataTypes.percentage),
      position: guess(_dataTypes.position),
      lookup: asLookupValue,
      "generic-name": guess(_dataTypes.genericName),
      "family-name": guess(_dataTypes.familyName),
      number: guess(_dataTypes.number),
      "line-width": guess(_dataTypes.lineWidth),
      "absolute-size": guess(_dataTypes.absoluteSize),
      "relative-size": guess(_dataTypes.relativeSize),
      shadow: guess(_dataTypes.shadow),
      size: guess(_validateFormalSyntax.backgroundSize)
    };
    let supportedTypes = Object.keys(typeMap);
    function splitAtFirst(input, delim) {
      let idx = input.indexOf(delim);
      if (idx === -1)
        return [
          void 0,
          input
        ];
      return [
        input.slice(0, idx),
        input.slice(idx + 1)
      ];
    }
    function coerceValue(types, modifier, options, tailwindConfig) {
      if (options.values && modifier in options.values) {
        for (let { type } of types !== null && types !== void 0 ? types : []) {
          let result = typeMap[type](modifier, options, {
            tailwindConfig
          });
          if (result === void 0) {
            continue;
          }
          return [
            result,
            type,
            null
          ];
        }
      }
      if (isArbitraryValue(modifier)) {
        let arbitraryValue = modifier.slice(1, -1);
        let [explicitType, value] = splitAtFirst(arbitraryValue, ":");
        if (!/^[\w-_]+$/g.test(explicitType)) {
          value = arbitraryValue;
        } else if (explicitType !== void 0 && !supportedTypes.includes(explicitType)) {
          return [];
        }
        if (value.length > 0 && supportedTypes.includes(explicitType)) {
          return [
            asValue(`[${value}]`, options),
            explicitType,
            null
          ];
        }
      }
      let matches = getMatchingTypes(types, modifier, options, tailwindConfig);
      for (let match of matches) {
        return match;
      }
      return [];
    }
    function* getMatchingTypes(types, rawModifier, options, tailwindConfig) {
      let modifiersEnabled = (0, _featureFlags.flagEnabled)(tailwindConfig, "generalizedModifiers");
      let [modifier, utilityModifier] = splitUtilityModifier(rawModifier);
      let canUseUtilityModifier = modifiersEnabled && options.modifiers != null && (options.modifiers === "any" || typeof options.modifiers === "object" && (utilityModifier && isArbitraryValue(utilityModifier) || utilityModifier in options.modifiers));
      if (!canUseUtilityModifier) {
        modifier = rawModifier;
        utilityModifier = void 0;
      }
      if (utilityModifier !== void 0 && modifier === "") {
        modifier = "DEFAULT";
      }
      if (utilityModifier !== void 0) {
        if (typeof options.modifiers === "object") {
          var _options_modifiers;
          var _options_modifiers_utilityModifier;
          let configValue = (_options_modifiers_utilityModifier = (_options_modifiers = options.modifiers) === null || _options_modifiers === void 0 ? void 0 : _options_modifiers[utilityModifier]) !== null && _options_modifiers_utilityModifier !== void 0 ? _options_modifiers_utilityModifier : null;
          if (configValue !== null) {
            utilityModifier = configValue;
          } else if (isArbitraryValue(utilityModifier)) {
            utilityModifier = unwrapArbitraryModifier(utilityModifier);
          }
        }
      }
      for (let { type } of types !== null && types !== void 0 ? types : []) {
        let result = typeMap[type](modifier, options, {
          tailwindConfig
        });
        if (result === void 0) {
          continue;
        }
        yield [
          result,
          type,
          utilityModifier !== null && utilityModifier !== void 0 ? utilityModifier : null
        ];
      }
    }
  })(pluginUtils);
  var toColorValue = {};
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    Object.defineProperty(exports3, "default", {
      enumerable: true,
      get: function() {
        return toColorValue2;
      }
    });
    function toColorValue2(maybeFunction) {
      return typeof maybeFunction === "function" ? maybeFunction({}) : maybeFunction;
    }
  })(toColorValue);
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    Object.defineProperty(exports3, "default", {
      enumerable: true,
      get: function() {
        return resolveConfig2;
      }
    });
    const _negateValue = /* @__PURE__ */ _interop_require_default(negateValue);
    const _corePluginList = /* @__PURE__ */ _interop_require_default(corePluginList);
    const _configurePlugins = /* @__PURE__ */ _interop_require_default(configurePlugins);
    const _colors = /* @__PURE__ */ _interop_require_default(colors$2);
    const _defaults = defaults;
    const _toPath = toPath;
    const _normalizeConfig = normalizeConfig;
    const _isPlainObject = /* @__PURE__ */ _interop_require_default(isPlainObject);
    const _cloneDeep = cloneDeep;
    const _pluginUtils = pluginUtils;
    const _withAlphaVariable = withAlphaVariable;
    const _toColorValue = /* @__PURE__ */ _interop_require_default(toColorValue);
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function isFunction2(input) {
      return typeof input === "function";
    }
    function mergeWith(target, ...sources) {
      let customizer = sources.pop();
      for (let source of sources) {
        for (let k in source) {
          let merged = customizer(target[k], source[k]);
          if (merged === void 0) {
            if ((0, _isPlainObject.default)(target[k]) && (0, _isPlainObject.default)(source[k])) {
              target[k] = mergeWith({}, target[k], source[k], customizer);
            } else {
              target[k] = source[k];
            }
          } else {
            target[k] = merged;
          }
        }
      }
      return target;
    }
    const configUtils = {
      colors: _colors.default,
      negative(scale) {
        return Object.keys(scale).filter((key) => scale[key] !== "0").reduce((negativeScale, key) => {
          let negativeValue = (0, _negateValue.default)(scale[key]);
          if (negativeValue !== void 0) {
            negativeScale[`-${key}`] = negativeValue;
          }
          return negativeScale;
        }, {});
      },
      breakpoints(screens) {
        return Object.keys(screens).filter((key) => typeof screens[key] === "string").reduce((breakpoints, key) => ({
          ...breakpoints,
          [`screen-${key}`]: screens[key]
        }), {});
      }
    };
    function value(valueToResolve, ...args) {
      return isFunction2(valueToResolve) ? valueToResolve(...args) : valueToResolve;
    }
    function collectExtends(items) {
      return items.reduce((merged, { extend }) => {
        return mergeWith(merged, extend, (mergedValue, extendValue) => {
          if (mergedValue === void 0) {
            return [
              extendValue
            ];
          }
          if (Array.isArray(mergedValue)) {
            return [
              extendValue,
              ...mergedValue
            ];
          }
          return [
            extendValue,
            mergedValue
          ];
        });
      }, {});
    }
    function mergeThemes(themes) {
      return {
        ...themes.reduce((merged, theme2) => (0, _defaults.defaults)(merged, theme2), {}),
        // In order to resolve n config objects, we combine all of their `extend` properties
        // into arrays instead of objects so they aren't overridden.
        extend: collectExtends(themes)
      };
    }
    function mergeExtensionCustomizer(merged, value2) {
      if (Array.isArray(merged) && (0, _isPlainObject.default)(merged[0])) {
        return merged.concat(value2);
      }
      if (Array.isArray(value2) && (0, _isPlainObject.default)(value2[0]) && (0, _isPlainObject.default)(merged)) {
        return [
          merged,
          ...value2
        ];
      }
      if (Array.isArray(value2)) {
        return value2;
      }
      return void 0;
    }
    function mergeExtensions({ extend, ...theme2 }) {
      return mergeWith(theme2, extend, (themeValue, extensions) => {
        if (!isFunction2(themeValue) && !extensions.some(isFunction2)) {
          return mergeWith({}, themeValue, ...extensions, mergeExtensionCustomizer);
        }
        return (resolveThemePath, utils) => mergeWith({}, ...[
          themeValue,
          ...extensions
        ].map((e) => value(e, resolveThemePath, utils)), mergeExtensionCustomizer);
      });
    }
    function* toPaths(key) {
      let path = (0, _toPath.toPath)(key);
      if (path.length === 0) {
        return;
      }
      yield path;
      if (Array.isArray(key)) {
        return;
      }
      let pattern = /^(.*?)\s*\/\s*([^/]+)$/;
      let matches = key.match(pattern);
      if (matches !== null) {
        let [, prefix, alpha] = matches;
        let newPath = (0, _toPath.toPath)(prefix);
        newPath.alpha = alpha;
        yield newPath;
      }
    }
    function resolveFunctionKeys(object) {
      const resolvePath = (key, defaultValue) => {
        for (const path of toPaths(key)) {
          let index = 0;
          let val = object;
          while (val !== void 0 && val !== null && index < path.length) {
            val = val[path[index++]];
            let shouldResolveAsFn = isFunction2(val) && (path.alpha === void 0 || index <= path.length - 1);
            val = shouldResolveAsFn ? val(resolvePath, configUtils) : val;
          }
          if (val !== void 0) {
            if (path.alpha !== void 0) {
              let normalized = (0, _pluginUtils.parseColorFormat)(val);
              return (0, _withAlphaVariable.withAlphaValue)(normalized, path.alpha, (0, _toColorValue.default)(normalized));
            }
            if ((0, _isPlainObject.default)(val)) {
              return (0, _cloneDeep.cloneDeep)(val);
            }
            return val;
          }
        }
        return defaultValue;
      };
      Object.assign(resolvePath, {
        theme: resolvePath,
        ...configUtils
      });
      return Object.keys(object).reduce((resolved, key) => {
        resolved[key] = isFunction2(object[key]) ? object[key](resolvePath, configUtils) : object[key];
        return resolved;
      }, {});
    }
    function extractPluginConfigs(configs) {
      let allConfigs = [];
      configs.forEach((config2) => {
        allConfigs = [
          ...allConfigs,
          config2
        ];
        var _config_plugins;
        const plugins = (_config_plugins = config2 === null || config2 === void 0 ? void 0 : config2.plugins) !== null && _config_plugins !== void 0 ? _config_plugins : [];
        if (plugins.length === 0) {
          return;
        }
        plugins.forEach((plugin2) => {
          if (plugin2.__isOptionsFunction) {
            plugin2 = plugin2();
          }
          var _plugin_config;
          allConfigs = [
            ...allConfigs,
            ...extractPluginConfigs([
              (_plugin_config = plugin2 === null || plugin2 === void 0 ? void 0 : plugin2.config) !== null && _plugin_config !== void 0 ? _plugin_config : {}
            ])
          ];
        });
      });
      return allConfigs;
    }
    function resolveCorePlugins(corePluginConfigs) {
      const result = [
        ...corePluginConfigs
      ].reduceRight((resolved, corePluginConfig) => {
        if (isFunction2(corePluginConfig)) {
          return corePluginConfig({
            corePlugins: resolved
          });
        }
        return (0, _configurePlugins.default)(corePluginConfig, resolved);
      }, _corePluginList.default);
      return result;
    }
    function resolvePluginLists(pluginLists) {
      const result = [
        ...pluginLists
      ].reduceRight((resolved, pluginList) => {
        return [
          ...resolved,
          ...pluginList
        ];
      }, []);
      return result;
    }
    function resolveConfig2(configs) {
      let allConfigs = [
        ...extractPluginConfigs(configs),
        {
          prefix: "",
          important: false,
          separator: ":"
        }
      ];
      var _t_theme, _c_plugins;
      return (0, _normalizeConfig.normalizeConfig)((0, _defaults.defaults)({
        theme: resolveFunctionKeys(mergeExtensions(mergeThemes(allConfigs.map((t) => {
          return (_t_theme = t === null || t === void 0 ? void 0 : t.theme) !== null && _t_theme !== void 0 ? _t_theme : {};
        })))),
        corePlugins: resolveCorePlugins(allConfigs.map((c) => c.corePlugins)),
        plugins: resolvePluginLists(configs.map((c) => {
          return (_c_plugins = c === null || c === void 0 ? void 0 : c.plugins) !== null && _c_plugins !== void 0 ? _c_plugins : [];
        }))
      }, ...allConfigs));
    }
  })(resolveConfig$2);
  var getAllConfigs = {};
  var config_full = {
    content: [],
    presets: [],
    darkMode: "media",
    // or 'class'
    theme: {
      accentColor: ({ theme: theme2 }) => ({
        ...theme2("colors"),
        auto: "auto"
      }),
      animation: {
        none: "none",
        spin: "spin 1s linear infinite",
        ping: "ping 1s cubic-bezier(0, 0, 0.2, 1) infinite",
        pulse: "pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite",
        bounce: "bounce 1s infinite"
      },
      aria: {
        busy: 'busy="true"',
        checked: 'checked="true"',
        disabled: 'disabled="true"',
        expanded: 'expanded="true"',
        hidden: 'hidden="true"',
        pressed: 'pressed="true"',
        readonly: 'readonly="true"',
        required: 'required="true"',
        selected: 'selected="true"'
      },
      aspectRatio: {
        auto: "auto",
        square: "1 / 1",
        video: "16 / 9"
      },
      backdropBlur: ({ theme: theme2 }) => theme2("blur"),
      backdropBrightness: ({ theme: theme2 }) => theme2("brightness"),
      backdropContrast: ({ theme: theme2 }) => theme2("contrast"),
      backdropGrayscale: ({ theme: theme2 }) => theme2("grayscale"),
      backdropHueRotate: ({ theme: theme2 }) => theme2("hueRotate"),
      backdropInvert: ({ theme: theme2 }) => theme2("invert"),
      backdropOpacity: ({ theme: theme2 }) => theme2("opacity"),
      backdropSaturate: ({ theme: theme2 }) => theme2("saturate"),
      backdropSepia: ({ theme: theme2 }) => theme2("sepia"),
      backgroundColor: ({ theme: theme2 }) => theme2("colors"),
      backgroundImage: {
        none: "none",
        "gradient-to-t": "linear-gradient(to top, var(--tw-gradient-stops))",
        "gradient-to-tr": "linear-gradient(to top right, var(--tw-gradient-stops))",
        "gradient-to-r": "linear-gradient(to right, var(--tw-gradient-stops))",
        "gradient-to-br": "linear-gradient(to bottom right, var(--tw-gradient-stops))",
        "gradient-to-b": "linear-gradient(to bottom, var(--tw-gradient-stops))",
        "gradient-to-bl": "linear-gradient(to bottom left, var(--tw-gradient-stops))",
        "gradient-to-l": "linear-gradient(to left, var(--tw-gradient-stops))",
        "gradient-to-tl": "linear-gradient(to top left, var(--tw-gradient-stops))"
      },
      backgroundOpacity: ({ theme: theme2 }) => theme2("opacity"),
      backgroundPosition: {
        bottom: "bottom",
        center: "center",
        left: "left",
        "left-bottom": "left bottom",
        "left-top": "left top",
        right: "right",
        "right-bottom": "right bottom",
        "right-top": "right top",
        top: "top"
      },
      backgroundSize: {
        auto: "auto",
        cover: "cover",
        contain: "contain"
      },
      blur: {
        0: "0",
        none: "0",
        sm: "4px",
        DEFAULT: "8px",
        md: "12px",
        lg: "16px",
        xl: "24px",
        "2xl": "40px",
        "3xl": "64px"
      },
      borderColor: ({ theme: theme2 }) => ({
        ...theme2("colors"),
        DEFAULT: theme2("colors.gray.200", "currentColor")
      }),
      borderOpacity: ({ theme: theme2 }) => theme2("opacity"),
      borderRadius: {
        none: "0px",
        sm: "0.125rem",
        DEFAULT: "0.25rem",
        md: "0.375rem",
        lg: "0.5rem",
        xl: "0.75rem",
        "2xl": "1rem",
        "3xl": "1.5rem",
        full: "9999px"
      },
      borderSpacing: ({ theme: theme2 }) => ({
        ...theme2("spacing")
      }),
      borderWidth: {
        DEFAULT: "1px",
        0: "0px",
        2: "2px",
        4: "4px",
        8: "8px"
      },
      boxShadow: {
        sm: "0 1px 2px 0 rgb(0 0 0 / 0.05)",
        DEFAULT: "0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)",
        md: "0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)",
        lg: "0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)",
        xl: "0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)",
        "2xl": "0 25px 50px -12px rgb(0 0 0 / 0.25)",
        inner: "inset 0 2px 4px 0 rgb(0 0 0 / 0.05)",
        none: "none"
      },
      boxShadowColor: ({ theme: theme2 }) => theme2("colors"),
      brightness: {
        0: "0",
        50: ".5",
        75: ".75",
        90: ".9",
        95: ".95",
        100: "1",
        105: "1.05",
        110: "1.1",
        125: "1.25",
        150: "1.5",
        200: "2"
      },
      caretColor: ({ theme: theme2 }) => theme2("colors"),
      colors: ({ colors: colors2 }) => ({
        inherit: colors2.inherit,
        current: colors2.current,
        transparent: colors2.transparent,
        black: colors2.black,
        white: colors2.white,
        slate: colors2.slate,
        gray: colors2.gray,
        zinc: colors2.zinc,
        neutral: colors2.neutral,
        stone: colors2.stone,
        red: colors2.red,
        orange: colors2.orange,
        amber: colors2.amber,
        yellow: colors2.yellow,
        lime: colors2.lime,
        green: colors2.green,
        emerald: colors2.emerald,
        teal: colors2.teal,
        cyan: colors2.cyan,
        sky: colors2.sky,
        blue: colors2.blue,
        indigo: colors2.indigo,
        violet: colors2.violet,
        purple: colors2.purple,
        fuchsia: colors2.fuchsia,
        pink: colors2.pink,
        rose: colors2.rose
      }),
      columns: {
        auto: "auto",
        1: "1",
        2: "2",
        3: "3",
        4: "4",
        5: "5",
        6: "6",
        7: "7",
        8: "8",
        9: "9",
        10: "10",
        11: "11",
        12: "12",
        "3xs": "16rem",
        "2xs": "18rem",
        xs: "20rem",
        sm: "24rem",
        md: "28rem",
        lg: "32rem",
        xl: "36rem",
        "2xl": "42rem",
        "3xl": "48rem",
        "4xl": "56rem",
        "5xl": "64rem",
        "6xl": "72rem",
        "7xl": "80rem"
      },
      container: {},
      content: {
        none: "none"
      },
      contrast: {
        0: "0",
        50: ".5",
        75: ".75",
        100: "1",
        125: "1.25",
        150: "1.5",
        200: "2"
      },
      cursor: {
        auto: "auto",
        default: "default",
        pointer: "pointer",
        wait: "wait",
        text: "text",
        move: "move",
        help: "help",
        "not-allowed": "not-allowed",
        none: "none",
        "context-menu": "context-menu",
        progress: "progress",
        cell: "cell",
        crosshair: "crosshair",
        "vertical-text": "vertical-text",
        alias: "alias",
        copy: "copy",
        "no-drop": "no-drop",
        grab: "grab",
        grabbing: "grabbing",
        "all-scroll": "all-scroll",
        "col-resize": "col-resize",
        "row-resize": "row-resize",
        "n-resize": "n-resize",
        "e-resize": "e-resize",
        "s-resize": "s-resize",
        "w-resize": "w-resize",
        "ne-resize": "ne-resize",
        "nw-resize": "nw-resize",
        "se-resize": "se-resize",
        "sw-resize": "sw-resize",
        "ew-resize": "ew-resize",
        "ns-resize": "ns-resize",
        "nesw-resize": "nesw-resize",
        "nwse-resize": "nwse-resize",
        "zoom-in": "zoom-in",
        "zoom-out": "zoom-out"
      },
      divideColor: ({ theme: theme2 }) => theme2("borderColor"),
      divideOpacity: ({ theme: theme2 }) => theme2("borderOpacity"),
      divideWidth: ({ theme: theme2 }) => theme2("borderWidth"),
      dropShadow: {
        sm: "0 1px 1px rgb(0 0 0 / 0.05)",
        DEFAULT: ["0 1px 2px rgb(0 0 0 / 0.1)", "0 1px 1px rgb(0 0 0 / 0.06)"],
        md: ["0 4px 3px rgb(0 0 0 / 0.07)", "0 2px 2px rgb(0 0 0 / 0.06)"],
        lg: ["0 10px 8px rgb(0 0 0 / 0.04)", "0 4px 3px rgb(0 0 0 / 0.1)"],
        xl: ["0 20px 13px rgb(0 0 0 / 0.03)", "0 8px 5px rgb(0 0 0 / 0.08)"],
        "2xl": "0 25px 25px rgb(0 0 0 / 0.15)",
        none: "0 0 #0000"
      },
      fill: ({ theme: theme2 }) => ({
        none: "none",
        ...theme2("colors")
      }),
      flex: {
        1: "1 1 0%",
        auto: "1 1 auto",
        initial: "0 1 auto",
        none: "none"
      },
      flexBasis: ({ theme: theme2 }) => ({
        auto: "auto",
        ...theme2("spacing"),
        "1/2": "50%",
        "1/3": "33.333333%",
        "2/3": "66.666667%",
        "1/4": "25%",
        "2/4": "50%",
        "3/4": "75%",
        "1/5": "20%",
        "2/5": "40%",
        "3/5": "60%",
        "4/5": "80%",
        "1/6": "16.666667%",
        "2/6": "33.333333%",
        "3/6": "50%",
        "4/6": "66.666667%",
        "5/6": "83.333333%",
        "1/12": "8.333333%",
        "2/12": "16.666667%",
        "3/12": "25%",
        "4/12": "33.333333%",
        "5/12": "41.666667%",
        "6/12": "50%",
        "7/12": "58.333333%",
        "8/12": "66.666667%",
        "9/12": "75%",
        "10/12": "83.333333%",
        "11/12": "91.666667%",
        full: "100%"
      }),
      flexGrow: {
        0: "0",
        DEFAULT: "1"
      },
      flexShrink: {
        0: "0",
        DEFAULT: "1"
      },
      fontFamily: {
        sans: [
          "ui-sans-serif",
          "system-ui",
          "sans-serif",
          '"Apple Color Emoji"',
          '"Segoe UI Emoji"',
          '"Segoe UI Symbol"',
          '"Noto Color Emoji"'
        ],
        serif: ["ui-serif", "Georgia", "Cambria", '"Times New Roman"', "Times", "serif"],
        mono: [
          "ui-monospace",
          "SFMono-Regular",
          "Menlo",
          "Monaco",
          "Consolas",
          '"Liberation Mono"',
          '"Courier New"',
          "monospace"
        ]
      },
      fontSize: {
        xs: ["0.75rem", { lineHeight: "1rem" }],
        sm: ["0.875rem", { lineHeight: "1.25rem" }],
        base: ["1rem", { lineHeight: "1.5rem" }],
        lg: ["1.125rem", { lineHeight: "1.75rem" }],
        xl: ["1.25rem", { lineHeight: "1.75rem" }],
        "2xl": ["1.5rem", { lineHeight: "2rem" }],
        "3xl": ["1.875rem", { lineHeight: "2.25rem" }],
        "4xl": ["2.25rem", { lineHeight: "2.5rem" }],
        "5xl": ["3rem", { lineHeight: "1" }],
        "6xl": ["3.75rem", { lineHeight: "1" }],
        "7xl": ["4.5rem", { lineHeight: "1" }],
        "8xl": ["6rem", { lineHeight: "1" }],
        "9xl": ["8rem", { lineHeight: "1" }]
      },
      fontWeight: {
        thin: "100",
        extralight: "200",
        light: "300",
        normal: "400",
        medium: "500",
        semibold: "600",
        bold: "700",
        extrabold: "800",
        black: "900"
      },
      gap: ({ theme: theme2 }) => theme2("spacing"),
      gradientColorStops: ({ theme: theme2 }) => theme2("colors"),
      gradientColorStopPositions: {
        "0%": "0%",
        "5%": "5%",
        "10%": "10%",
        "15%": "15%",
        "20%": "20%",
        "25%": "25%",
        "30%": "30%",
        "35%": "35%",
        "40%": "40%",
        "45%": "45%",
        "50%": "50%",
        "55%": "55%",
        "60%": "60%",
        "65%": "65%",
        "70%": "70%",
        "75%": "75%",
        "80%": "80%",
        "85%": "85%",
        "90%": "90%",
        "95%": "95%",
        "100%": "100%"
      },
      grayscale: {
        0: "0",
        DEFAULT: "100%"
      },
      gridAutoColumns: {
        auto: "auto",
        min: "min-content",
        max: "max-content",
        fr: "minmax(0, 1fr)"
      },
      gridAutoRows: {
        auto: "auto",
        min: "min-content",
        max: "max-content",
        fr: "minmax(0, 1fr)"
      },
      gridColumn: {
        auto: "auto",
        "span-1": "span 1 / span 1",
        "span-2": "span 2 / span 2",
        "span-3": "span 3 / span 3",
        "span-4": "span 4 / span 4",
        "span-5": "span 5 / span 5",
        "span-6": "span 6 / span 6",
        "span-7": "span 7 / span 7",
        "span-8": "span 8 / span 8",
        "span-9": "span 9 / span 9",
        "span-10": "span 10 / span 10",
        "span-11": "span 11 / span 11",
        "span-12": "span 12 / span 12",
        "span-full": "1 / -1"
      },
      gridColumnEnd: {
        auto: "auto",
        1: "1",
        2: "2",
        3: "3",
        4: "4",
        5: "5",
        6: "6",
        7: "7",
        8: "8",
        9: "9",
        10: "10",
        11: "11",
        12: "12",
        13: "13"
      },
      gridColumnStart: {
        auto: "auto",
        1: "1",
        2: "2",
        3: "3",
        4: "4",
        5: "5",
        6: "6",
        7: "7",
        8: "8",
        9: "9",
        10: "10",
        11: "11",
        12: "12",
        13: "13"
      },
      gridRow: {
        auto: "auto",
        "span-1": "span 1 / span 1",
        "span-2": "span 2 / span 2",
        "span-3": "span 3 / span 3",
        "span-4": "span 4 / span 4",
        "span-5": "span 5 / span 5",
        "span-6": "span 6 / span 6",
        "span-7": "span 7 / span 7",
        "span-8": "span 8 / span 8",
        "span-9": "span 9 / span 9",
        "span-10": "span 10 / span 10",
        "span-11": "span 11 / span 11",
        "span-12": "span 12 / span 12",
        "span-full": "1 / -1"
      },
      gridRowEnd: {
        auto: "auto",
        1: "1",
        2: "2",
        3: "3",
        4: "4",
        5: "5",
        6: "6",
        7: "7",
        8: "8",
        9: "9",
        10: "10",
        11: "11",
        12: "12",
        13: "13"
      },
      gridRowStart: {
        auto: "auto",
        1: "1",
        2: "2",
        3: "3",
        4: "4",
        5: "5",
        6: "6",
        7: "7",
        8: "8",
        9: "9",
        10: "10",
        11: "11",
        12: "12",
        13: "13"
      },
      gridTemplateColumns: {
        none: "none",
        subgrid: "subgrid",
        1: "repeat(1, minmax(0, 1fr))",
        2: "repeat(2, minmax(0, 1fr))",
        3: "repeat(3, minmax(0, 1fr))",
        4: "repeat(4, minmax(0, 1fr))",
        5: "repeat(5, minmax(0, 1fr))",
        6: "repeat(6, minmax(0, 1fr))",
        7: "repeat(7, minmax(0, 1fr))",
        8: "repeat(8, minmax(0, 1fr))",
        9: "repeat(9, minmax(0, 1fr))",
        10: "repeat(10, minmax(0, 1fr))",
        11: "repeat(11, minmax(0, 1fr))",
        12: "repeat(12, minmax(0, 1fr))"
      },
      gridTemplateRows: {
        none: "none",
        subgrid: "subgrid",
        1: "repeat(1, minmax(0, 1fr))",
        2: "repeat(2, minmax(0, 1fr))",
        3: "repeat(3, minmax(0, 1fr))",
        4: "repeat(4, minmax(0, 1fr))",
        5: "repeat(5, minmax(0, 1fr))",
        6: "repeat(6, minmax(0, 1fr))",
        7: "repeat(7, minmax(0, 1fr))",
        8: "repeat(8, minmax(0, 1fr))",
        9: "repeat(9, minmax(0, 1fr))",
        10: "repeat(10, minmax(0, 1fr))",
        11: "repeat(11, minmax(0, 1fr))",
        12: "repeat(12, minmax(0, 1fr))"
      },
      height: ({ theme: theme2 }) => ({
        auto: "auto",
        ...theme2("spacing"),
        "1/2": "50%",
        "1/3": "33.333333%",
        "2/3": "66.666667%",
        "1/4": "25%",
        "2/4": "50%",
        "3/4": "75%",
        "1/5": "20%",
        "2/5": "40%",
        "3/5": "60%",
        "4/5": "80%",
        "1/6": "16.666667%",
        "2/6": "33.333333%",
        "3/6": "50%",
        "4/6": "66.666667%",
        "5/6": "83.333333%",
        full: "100%",
        screen: "100vh",
        svh: "100svh",
        lvh: "100lvh",
        dvh: "100dvh",
        min: "min-content",
        max: "max-content",
        fit: "fit-content"
      }),
      hueRotate: {
        0: "0deg",
        15: "15deg",
        30: "30deg",
        60: "60deg",
        90: "90deg",
        180: "180deg"
      },
      inset: ({ theme: theme2 }) => ({
        auto: "auto",
        ...theme2("spacing"),
        "1/2": "50%",
        "1/3": "33.333333%",
        "2/3": "66.666667%",
        "1/4": "25%",
        "2/4": "50%",
        "3/4": "75%",
        full: "100%"
      }),
      invert: {
        0: "0",
        DEFAULT: "100%"
      },
      keyframes: {
        spin: {
          to: {
            transform: "rotate(360deg)"
          }
        },
        ping: {
          "75%, 100%": {
            transform: "scale(2)",
            opacity: "0"
          }
        },
        pulse: {
          "50%": {
            opacity: ".5"
          }
        },
        bounce: {
          "0%, 100%": {
            transform: "translateY(-25%)",
            animationTimingFunction: "cubic-bezier(0.8,0,1,1)"
          },
          "50%": {
            transform: "none",
            animationTimingFunction: "cubic-bezier(0,0,0.2,1)"
          }
        }
      },
      letterSpacing: {
        tighter: "-0.05em",
        tight: "-0.025em",
        normal: "0em",
        wide: "0.025em",
        wider: "0.05em",
        widest: "0.1em"
      },
      lineHeight: {
        none: "1",
        tight: "1.25",
        snug: "1.375",
        normal: "1.5",
        relaxed: "1.625",
        loose: "2",
        3: ".75rem",
        4: "1rem",
        5: "1.25rem",
        6: "1.5rem",
        7: "1.75rem",
        8: "2rem",
        9: "2.25rem",
        10: "2.5rem"
      },
      listStyleType: {
        none: "none",
        disc: "disc",
        decimal: "decimal"
      },
      listStyleImage: {
        none: "none"
      },
      margin: ({ theme: theme2 }) => ({
        auto: "auto",
        ...theme2("spacing")
      }),
      lineClamp: {
        1: "1",
        2: "2",
        3: "3",
        4: "4",
        5: "5",
        6: "6"
      },
      maxHeight: ({ theme: theme2 }) => ({
        ...theme2("spacing"),
        none: "none",
        full: "100%",
        screen: "100vh",
        svh: "100svh",
        lvh: "100lvh",
        dvh: "100dvh",
        min: "min-content",
        max: "max-content",
        fit: "fit-content"
      }),
      maxWidth: ({ theme: theme2, breakpoints }) => ({
        ...theme2("spacing"),
        none: "none",
        xs: "20rem",
        sm: "24rem",
        md: "28rem",
        lg: "32rem",
        xl: "36rem",
        "2xl": "42rem",
        "3xl": "48rem",
        "4xl": "56rem",
        "5xl": "64rem",
        "6xl": "72rem",
        "7xl": "80rem",
        full: "100%",
        min: "min-content",
        max: "max-content",
        fit: "fit-content",
        prose: "65ch",
        ...breakpoints(theme2("screens"))
      }),
      minHeight: ({ theme: theme2 }) => ({
        ...theme2("spacing"),
        full: "100%",
        screen: "100vh",
        svh: "100svh",
        lvh: "100lvh",
        dvh: "100dvh",
        min: "min-content",
        max: "max-content",
        fit: "fit-content"
      }),
      minWidth: ({ theme: theme2 }) => ({
        ...theme2("spacing"),
        full: "100%",
        min: "min-content",
        max: "max-content",
        fit: "fit-content"
      }),
      objectPosition: {
        bottom: "bottom",
        center: "center",
        left: "left",
        "left-bottom": "left bottom",
        "left-top": "left top",
        right: "right",
        "right-bottom": "right bottom",
        "right-top": "right top",
        top: "top"
      },
      opacity: {
        0: "0",
        5: "0.05",
        10: "0.1",
        15: "0.15",
        20: "0.2",
        25: "0.25",
        30: "0.3",
        35: "0.35",
        40: "0.4",
        45: "0.45",
        50: "0.5",
        55: "0.55",
        60: "0.6",
        65: "0.65",
        70: "0.7",
        75: "0.75",
        80: "0.8",
        85: "0.85",
        90: "0.9",
        95: "0.95",
        100: "1"
      },
      order: {
        first: "-9999",
        last: "9999",
        none: "0",
        1: "1",
        2: "2",
        3: "3",
        4: "4",
        5: "5",
        6: "6",
        7: "7",
        8: "8",
        9: "9",
        10: "10",
        11: "11",
        12: "12"
      },
      outlineColor: ({ theme: theme2 }) => theme2("colors"),
      outlineOffset: {
        0: "0px",
        1: "1px",
        2: "2px",
        4: "4px",
        8: "8px"
      },
      outlineWidth: {
        0: "0px",
        1: "1px",
        2: "2px",
        4: "4px",
        8: "8px"
      },
      padding: ({ theme: theme2 }) => theme2("spacing"),
      placeholderColor: ({ theme: theme2 }) => theme2("colors"),
      placeholderOpacity: ({ theme: theme2 }) => theme2("opacity"),
      ringColor: ({ theme: theme2 }) => ({
        DEFAULT: theme2("colors.blue.500", "#3b82f6"),
        ...theme2("colors")
      }),
      ringOffsetColor: ({ theme: theme2 }) => theme2("colors"),
      ringOffsetWidth: {
        0: "0px",
        1: "1px",
        2: "2px",
        4: "4px",
        8: "8px"
      },
      ringOpacity: ({ theme: theme2 }) => ({
        DEFAULT: "0.5",
        ...theme2("opacity")
      }),
      ringWidth: {
        DEFAULT: "3px",
        0: "0px",
        1: "1px",
        2: "2px",
        4: "4px",
        8: "8px"
      },
      rotate: {
        0: "0deg",
        1: "1deg",
        2: "2deg",
        3: "3deg",
        6: "6deg",
        12: "12deg",
        45: "45deg",
        90: "90deg",
        180: "180deg"
      },
      saturate: {
        0: "0",
        50: ".5",
        100: "1",
        150: "1.5",
        200: "2"
      },
      scale: {
        0: "0",
        50: ".5",
        75: ".75",
        90: ".9",
        95: ".95",
        100: "1",
        105: "1.05",
        110: "1.1",
        125: "1.25",
        150: "1.5"
      },
      screens: {
        sm: "640px",
        md: "768px",
        lg: "1024px",
        xl: "1280px",
        "2xl": "1536px"
      },
      scrollMargin: ({ theme: theme2 }) => ({
        ...theme2("spacing")
      }),
      scrollPadding: ({ theme: theme2 }) => theme2("spacing"),
      sepia: {
        0: "0",
        DEFAULT: "100%"
      },
      skew: {
        0: "0deg",
        1: "1deg",
        2: "2deg",
        3: "3deg",
        6: "6deg",
        12: "12deg"
      },
      space: ({ theme: theme2 }) => ({
        ...theme2("spacing")
      }),
      spacing: {
        px: "1px",
        0: "0px",
        0.5: "0.125rem",
        1: "0.25rem",
        1.5: "0.375rem",
        2: "0.5rem",
        2.5: "0.625rem",
        3: "0.75rem",
        3.5: "0.875rem",
        4: "1rem",
        5: "1.25rem",
        6: "1.5rem",
        7: "1.75rem",
        8: "2rem",
        9: "2.25rem",
        10: "2.5rem",
        11: "2.75rem",
        12: "3rem",
        14: "3.5rem",
        16: "4rem",
        20: "5rem",
        24: "6rem",
        28: "7rem",
        32: "8rem",
        36: "9rem",
        40: "10rem",
        44: "11rem",
        48: "12rem",
        52: "13rem",
        56: "14rem",
        60: "15rem",
        64: "16rem",
        72: "18rem",
        80: "20rem",
        96: "24rem"
      },
      stroke: ({ theme: theme2 }) => ({
        none: "none",
        ...theme2("colors")
      }),
      strokeWidth: {
        0: "0",
        1: "1",
        2: "2"
      },
      supports: {},
      data: {},
      textColor: ({ theme: theme2 }) => theme2("colors"),
      textDecorationColor: ({ theme: theme2 }) => theme2("colors"),
      textDecorationThickness: {
        auto: "auto",
        "from-font": "from-font",
        0: "0px",
        1: "1px",
        2: "2px",
        4: "4px",
        8: "8px"
      },
      textIndent: ({ theme: theme2 }) => ({
        ...theme2("spacing")
      }),
      textOpacity: ({ theme: theme2 }) => theme2("opacity"),
      textUnderlineOffset: {
        auto: "auto",
        0: "0px",
        1: "1px",
        2: "2px",
        4: "4px",
        8: "8px"
      },
      transformOrigin: {
        center: "center",
        top: "top",
        "top-right": "top right",
        right: "right",
        "bottom-right": "bottom right",
        bottom: "bottom",
        "bottom-left": "bottom left",
        left: "left",
        "top-left": "top left"
      },
      transitionDelay: {
        0: "0s",
        75: "75ms",
        100: "100ms",
        150: "150ms",
        200: "200ms",
        300: "300ms",
        500: "500ms",
        700: "700ms",
        1e3: "1000ms"
      },
      transitionDuration: {
        DEFAULT: "150ms",
        0: "0s",
        75: "75ms",
        100: "100ms",
        150: "150ms",
        200: "200ms",
        300: "300ms",
        500: "500ms",
        700: "700ms",
        1e3: "1000ms"
      },
      transitionProperty: {
        none: "none",
        all: "all",
        DEFAULT: "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter",
        colors: "color, background-color, border-color, text-decoration-color, fill, stroke",
        opacity: "opacity",
        shadow: "box-shadow",
        transform: "transform"
      },
      transitionTimingFunction: {
        DEFAULT: "cubic-bezier(0.4, 0, 0.2, 1)",
        linear: "linear",
        in: "cubic-bezier(0.4, 0, 1, 1)",
        out: "cubic-bezier(0, 0, 0.2, 1)",
        "in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
      },
      translate: ({ theme: theme2 }) => ({
        ...theme2("spacing"),
        "1/2": "50%",
        "1/3": "33.333333%",
        "2/3": "66.666667%",
        "1/4": "25%",
        "2/4": "50%",
        "3/4": "75%",
        full: "100%"
      }),
      size: ({ theme: theme2 }) => ({
        auto: "auto",
        ...theme2("spacing"),
        "1/2": "50%",
        "1/3": "33.333333%",
        "2/3": "66.666667%",
        "1/4": "25%",
        "2/4": "50%",
        "3/4": "75%",
        "1/5": "20%",
        "2/5": "40%",
        "3/5": "60%",
        "4/5": "80%",
        "1/6": "16.666667%",
        "2/6": "33.333333%",
        "3/6": "50%",
        "4/6": "66.666667%",
        "5/6": "83.333333%",
        "1/12": "8.333333%",
        "2/12": "16.666667%",
        "3/12": "25%",
        "4/12": "33.333333%",
        "5/12": "41.666667%",
        "6/12": "50%",
        "7/12": "58.333333%",
        "8/12": "66.666667%",
        "9/12": "75%",
        "10/12": "83.333333%",
        "11/12": "91.666667%",
        full: "100%",
        min: "min-content",
        max: "max-content",
        fit: "fit-content"
      }),
      width: ({ theme: theme2 }) => ({
        auto: "auto",
        ...theme2("spacing"),
        "1/2": "50%",
        "1/3": "33.333333%",
        "2/3": "66.666667%",
        "1/4": "25%",
        "2/4": "50%",
        "3/4": "75%",
        "1/5": "20%",
        "2/5": "40%",
        "3/5": "60%",
        "4/5": "80%",
        "1/6": "16.666667%",
        "2/6": "33.333333%",
        "3/6": "50%",
        "4/6": "66.666667%",
        "5/6": "83.333333%",
        "1/12": "8.333333%",
        "2/12": "16.666667%",
        "3/12": "25%",
        "4/12": "33.333333%",
        "5/12": "41.666667%",
        "6/12": "50%",
        "7/12": "58.333333%",
        "8/12": "66.666667%",
        "9/12": "75%",
        "10/12": "83.333333%",
        "11/12": "91.666667%",
        full: "100%",
        screen: "100vw",
        svw: "100svw",
        lvw: "100lvw",
        dvw: "100dvw",
        min: "min-content",
        max: "max-content",
        fit: "fit-content"
      }),
      willChange: {
        auto: "auto",
        scroll: "scroll-position",
        contents: "contents",
        transform: "transform"
      },
      zIndex: {
        auto: "auto",
        0: "0",
        10: "10",
        20: "20",
        30: "30",
        40: "40",
        50: "50"
      }
    },
    plugins: []
  };
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    Object.defineProperty(exports3, "default", {
      enumerable: true,
      get: function() {
        return getAllConfigs2;
      }
    });
    const _configfull = /* @__PURE__ */ _interop_require_default(config_full);
    const _featureFlags = featureFlags;
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function getAllConfigs2(config2) {
      var _config_presets;
      const configs = ((_config_presets = config2 === null || config2 === void 0 ? void 0 : config2.presets) !== null && _config_presets !== void 0 ? _config_presets : [
        _configfull.default
      ]).slice().reverse().flatMap((preset) => getAllConfigs2(preset instanceof Function ? preset() : preset));
      const features = {
        // Add experimental configs here...
        respectDefaultRingColorOpacity: {
          theme: {
            ringColor: ({ theme: theme2 }) => ({
              DEFAULT: "#3b82f67f",
              ...theme2("colors")
            })
          }
        },
        disableColorOpacityUtilitiesByDefault: {
          corePlugins: {
            backgroundOpacity: false,
            borderOpacity: false,
            divideOpacity: false,
            placeholderOpacity: false,
            ringOpacity: false,
            textOpacity: false
          }
        }
      };
      const experimentals = Object.keys(features).filter((feature) => (0, _featureFlags.flagEnabled)(config2, feature)).map((feature) => features[feature]);
      return [
        config2,
        ...experimentals,
        ...configs
      ];
    }
  })(getAllConfigs);
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    Object.defineProperty(exports3, "default", {
      enumerable: true,
      get: function() {
        return resolveConfig2;
      }
    });
    const _resolveConfig = /* @__PURE__ */ _interop_require_default(resolveConfig$2);
    const _getAllConfigs = /* @__PURE__ */ _interop_require_default(getAllConfigs);
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function resolveConfig2(...configs) {
      let [, ...defaultConfigs] = (0, _getAllConfigs.default)(configs[0]);
      return (0, _resolveConfig.default)([
        ...configs,
        ...defaultConfigs
      ]);
    }
  })(resolveConfig$3);
  let resolveConfig = resolveConfig$3;
  var resolveConfig_1 = (resolveConfig.__esModule ? resolveConfig : { default: resolveConfig }).default;
  const resolveConfig$1 = /* @__PURE__ */ getDefaultExportFromCjs(resolveConfig_1);
  let colors = colors$2;
  var colors_1 = (colors.__esModule ? colors : { default: colors }).default;
  const colors$1 = /* @__PURE__ */ getDefaultExportFromCjs(colors_1);
  var createPlugin$2 = {};
  var createPlugin$1 = {};
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    Object.defineProperty(exports3, "default", {
      enumerable: true,
      get: function() {
        return _default;
      }
    });
    function createPlugin2(plugin2, config2) {
      return {
        handler: plugin2,
        config: config2
      };
    }
    createPlugin2.withOptions = function(pluginFunction, configFunction = () => ({})) {
      const optionsFunction = function(options) {
        return {
          __options: options,
          handler: pluginFunction(options),
          config: configFunction(options)
        };
      };
      optionsFunction.__isOptionsFunction = true;
      optionsFunction.__pluginFunction = pluginFunction;
      optionsFunction.__configFunction = configFunction;
      return optionsFunction;
    };
    const _default = createPlugin2;
  })(createPlugin$1);
  (function(exports3) {
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    Object.defineProperty(exports3, "default", {
      enumerable: true,
      get: function() {
        return _default;
      }
    });
    const _createPlugin = /* @__PURE__ */ _interop_require_default(createPlugin$1);
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    const _default = _createPlugin.default;
  })(createPlugin$2);
  let createPlugin = createPlugin$2;
  var plugin = (createPlugin.__esModule ? createPlugin : { default: createPlugin }).default;
  const plugin$1 = /* @__PURE__ */ getDefaultExportFromCjs(plugin);
  var colorString$1 = { exports: {} };
  var colorName = {
    "aliceblue": [240, 248, 255],
    "antiquewhite": [250, 235, 215],
    "aqua": [0, 255, 255],
    "aquamarine": [127, 255, 212],
    "azure": [240, 255, 255],
    "beige": [245, 245, 220],
    "bisque": [255, 228, 196],
    "black": [0, 0, 0],
    "blanchedalmond": [255, 235, 205],
    "blue": [0, 0, 255],
    "blueviolet": [138, 43, 226],
    "brown": [165, 42, 42],
    "burlywood": [222, 184, 135],
    "cadetblue": [95, 158, 160],
    "chartreuse": [127, 255, 0],
    "chocolate": [210, 105, 30],
    "coral": [255, 127, 80],
    "cornflowerblue": [100, 149, 237],
    "cornsilk": [255, 248, 220],
    "crimson": [220, 20, 60],
    "cyan": [0, 255, 255],
    "darkblue": [0, 0, 139],
    "darkcyan": [0, 139, 139],
    "darkgoldenrod": [184, 134, 11],
    "darkgray": [169, 169, 169],
    "darkgreen": [0, 100, 0],
    "darkgrey": [169, 169, 169],
    "darkkhaki": [189, 183, 107],
    "darkmagenta": [139, 0, 139],
    "darkolivegreen": [85, 107, 47],
    "darkorange": [255, 140, 0],
    "darkorchid": [153, 50, 204],
    "darkred": [139, 0, 0],
    "darksalmon": [233, 150, 122],
    "darkseagreen": [143, 188, 143],
    "darkslateblue": [72, 61, 139],
    "darkslategray": [47, 79, 79],
    "darkslategrey": [47, 79, 79],
    "darkturquoise": [0, 206, 209],
    "darkviolet": [148, 0, 211],
    "deeppink": [255, 20, 147],
    "deepskyblue": [0, 191, 255],
    "dimgray": [105, 105, 105],
    "dimgrey": [105, 105, 105],
    "dodgerblue": [30, 144, 255],
    "firebrick": [178, 34, 34],
    "floralwhite": [255, 250, 240],
    "forestgreen": [34, 139, 34],
    "fuchsia": [255, 0, 255],
    "gainsboro": [220, 220, 220],
    "ghostwhite": [248, 248, 255],
    "gold": [255, 215, 0],
    "goldenrod": [218, 165, 32],
    "gray": [128, 128, 128],
    "green": [0, 128, 0],
    "greenyellow": [173, 255, 47],
    "grey": [128, 128, 128],
    "honeydew": [240, 255, 240],
    "hotpink": [255, 105, 180],
    "indianred": [205, 92, 92],
    "indigo": [75, 0, 130],
    "ivory": [255, 255, 240],
    "khaki": [240, 230, 140],
    "lavender": [230, 230, 250],
    "lavenderblush": [255, 240, 245],
    "lawngreen": [124, 252, 0],
    "lemonchiffon": [255, 250, 205],
    "lightblue": [173, 216, 230],
    "lightcoral": [240, 128, 128],
    "lightcyan": [224, 255, 255],
    "lightgoldenrodyellow": [250, 250, 210],
    "lightgray": [211, 211, 211],
    "lightgreen": [144, 238, 144],
    "lightgrey": [211, 211, 211],
    "lightpink": [255, 182, 193],
    "lightsalmon": [255, 160, 122],
    "lightseagreen": [32, 178, 170],
    "lightskyblue": [135, 206, 250],
    "lightslategray": [119, 136, 153],
    "lightslategrey": [119, 136, 153],
    "lightsteelblue": [176, 196, 222],
    "lightyellow": [255, 255, 224],
    "lime": [0, 255, 0],
    "limegreen": [50, 205, 50],
    "linen": [250, 240, 230],
    "magenta": [255, 0, 255],
    "maroon": [128, 0, 0],
    "mediumaquamarine": [102, 205, 170],
    "mediumblue": [0, 0, 205],
    "mediumorchid": [186, 85, 211],
    "mediumpurple": [147, 112, 219],
    "mediumseagreen": [60, 179, 113],
    "mediumslateblue": [123, 104, 238],
    "mediumspringgreen": [0, 250, 154],
    "mediumturquoise": [72, 209, 204],
    "mediumvioletred": [199, 21, 133],
    "midnightblue": [25, 25, 112],
    "mintcream": [245, 255, 250],
    "mistyrose": [255, 228, 225],
    "moccasin": [255, 228, 181],
    "navajowhite": [255, 222, 173],
    "navy": [0, 0, 128],
    "oldlace": [253, 245, 230],
    "olive": [128, 128, 0],
    "olivedrab": [107, 142, 35],
    "orange": [255, 165, 0],
    "orangered": [255, 69, 0],
    "orchid": [218, 112, 214],
    "palegoldenrod": [238, 232, 170],
    "palegreen": [152, 251, 152],
    "paleturquoise": [175, 238, 238],
    "palevioletred": [219, 112, 147],
    "papayawhip": [255, 239, 213],
    "peachpuff": [255, 218, 185],
    "peru": [205, 133, 63],
    "pink": [255, 192, 203],
    "plum": [221, 160, 221],
    "powderblue": [176, 224, 230],
    "purple": [128, 0, 128],
    "rebeccapurple": [102, 51, 153],
    "red": [255, 0, 0],
    "rosybrown": [188, 143, 143],
    "royalblue": [65, 105, 225],
    "saddlebrown": [139, 69, 19],
    "salmon": [250, 128, 114],
    "sandybrown": [244, 164, 96],
    "seagreen": [46, 139, 87],
    "seashell": [255, 245, 238],
    "sienna": [160, 82, 45],
    "silver": [192, 192, 192],
    "skyblue": [135, 206, 235],
    "slateblue": [106, 90, 205],
    "slategray": [112, 128, 144],
    "slategrey": [112, 128, 144],
    "snow": [255, 250, 250],
    "springgreen": [0, 255, 127],
    "steelblue": [70, 130, 180],
    "tan": [210, 180, 140],
    "teal": [0, 128, 128],
    "thistle": [216, 191, 216],
    "tomato": [255, 99, 71],
    "turquoise": [64, 224, 208],
    "violet": [238, 130, 238],
    "wheat": [245, 222, 179],
    "white": [255, 255, 255],
    "whitesmoke": [245, 245, 245],
    "yellow": [255, 255, 0],
    "yellowgreen": [154, 205, 50]
  };
  var simpleSwizzle = { exports: {} };
  var isArrayish$1 = function isArrayish2(obj) {
    if (!obj || typeof obj === "string") {
      return false;
    }
    return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== "String");
  };
  var isArrayish = isArrayish$1;
  var concat = Array.prototype.concat;
  var slice = Array.prototype.slice;
  var swizzle$1 = simpleSwizzle.exports = function swizzle2(args) {
    var results = [];
    for (var i = 0, len = args.length; i < len; i++) {
      var arg = args[i];
      if (isArrayish(arg)) {
        results = concat.call(results, slice.call(arg));
      } else {
        results.push(arg);
      }
    }
    return results;
  };
  swizzle$1.wrap = function(fn) {
    return function() {
      return fn(swizzle$1(arguments));
    };
  };
  var simpleSwizzleExports = simpleSwizzle.exports;
  var colorNames = colorName;
  var swizzle = simpleSwizzleExports;
  var hasOwnProperty$1 = Object.hasOwnProperty;
  var reverseNames = /* @__PURE__ */ Object.create(null);
  for (var name in colorNames) {
    if (hasOwnProperty$1.call(colorNames, name)) {
      reverseNames[colorNames[name]] = name;
    }
  }
  var cs = colorString$1.exports = {
    to: {},
    get: {}
  };
  cs.get = function(string) {
    var prefix = string.substring(0, 3).toLowerCase();
    var val;
    var model;
    switch (prefix) {
      case "hsl":
        val = cs.get.hsl(string);
        model = "hsl";
        break;
      case "hwb":
        val = cs.get.hwb(string);
        model = "hwb";
        break;
      default:
        val = cs.get.rgb(string);
        model = "rgb";
        break;
    }
    if (!val) {
      return null;
    }
    return { model, value: val };
  };
  cs.get.rgb = function(string) {
    if (!string) {
      return null;
    }
    var abbr = /^#([a-f0-9]{3,4})$/i;
    var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
    var rgba = /^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
    var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
    var keyword = /^(\w+)$/;
    var rgb = [0, 0, 0, 1];
    var match;
    var i;
    var hexAlpha;
    if (match = string.match(hex)) {
      hexAlpha = match[2];
      match = match[1];
      for (i = 0; i < 3; i++) {
        var i2 = i * 2;
        rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
      }
      if (hexAlpha) {
        rgb[3] = parseInt(hexAlpha, 16) / 255;
      }
    } else if (match = string.match(abbr)) {
      match = match[1];
      hexAlpha = match[3];
      for (i = 0; i < 3; i++) {
        rgb[i] = parseInt(match[i] + match[i], 16);
      }
      if (hexAlpha) {
        rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
      }
    } else if (match = string.match(rgba)) {
      for (i = 0; i < 3; i++) {
        rgb[i] = parseInt(match[i + 1], 0);
      }
      if (match[4]) {
        if (match[5]) {
          rgb[3] = parseFloat(match[4]) * 0.01;
        } else {
          rgb[3] = parseFloat(match[4]);
        }
      }
    } else if (match = string.match(per)) {
      for (i = 0; i < 3; i++) {
        rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
      }
      if (match[4]) {
        if (match[5]) {
          rgb[3] = parseFloat(match[4]) * 0.01;
        } else {
          rgb[3] = parseFloat(match[4]);
        }
      }
    } else if (match = string.match(keyword)) {
      if (match[1] === "transparent") {
        return [0, 0, 0, 0];
      }
      if (!hasOwnProperty$1.call(colorNames, match[1])) {
        return null;
      }
      rgb = colorNames[match[1]];
      rgb[3] = 1;
      return rgb;
    } else {
      return null;
    }
    for (i = 0; i < 3; i++) {
      rgb[i] = clamp(rgb[i], 0, 255);
    }
    rgb[3] = clamp(rgb[3], 0, 1);
    return rgb;
  };
  cs.get.hsl = function(string) {
    if (!string) {
      return null;
    }
    var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
    var match = string.match(hsl);
    if (match) {
      var alpha = parseFloat(match[4]);
      var h = (parseFloat(match[1]) % 360 + 360) % 360;
      var s = clamp(parseFloat(match[2]), 0, 100);
      var l = clamp(parseFloat(match[3]), 0, 100);
      var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, s, l, a];
    }
    return null;
  };
  cs.get.hwb = function(string) {
    if (!string) {
      return null;
    }
    var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
    var match = string.match(hwb);
    if (match) {
      var alpha = parseFloat(match[4]);
      var h = (parseFloat(match[1]) % 360 + 360) % 360;
      var w = clamp(parseFloat(match[2]), 0, 100);
      var b = clamp(parseFloat(match[3]), 0, 100);
      var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, w, b, a];
    }
    return null;
  };
  cs.to.hex = function() {
    var rgba = swizzle(arguments);
    return "#" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : "");
  };
  cs.to.rgb = function() {
    var rgba = swizzle(arguments);
    return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ")" : "rgba(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ", " + rgba[3] + ")";
  };
  cs.to.rgb.percent = function() {
    var rgba = swizzle(arguments);
    var r = Math.round(rgba[0] / 255 * 100);
    var g = Math.round(rgba[1] / 255 * 100);
    var b = Math.round(rgba[2] / 255 * 100);
    return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + r + "%, " + g + "%, " + b + "%)" : "rgba(" + r + "%, " + g + "%, " + b + "%, " + rgba[3] + ")";
  };
  cs.to.hsl = function() {
    var hsla = swizzle(arguments);
    return hsla.length < 4 || hsla[3] === 1 ? "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)" : "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " + hsla[3] + ")";
  };
  cs.to.hwb = function() {
    var hwba = swizzle(arguments);
    var a = "";
    if (hwba.length >= 4 && hwba[3] !== 1) {
      a = ", " + hwba[3];
    }
    return "hwb(" + hwba[0] + ", " + hwba[1] + "%, " + hwba[2] + "%" + a + ")";
  };
  cs.to.keyword = function(rgb) {
    return reverseNames[rgb.slice(0, 3)];
  };
  function clamp(num, min, max) {
    return Math.min(Math.max(min, num), max);
  }
  function hexDouble(num) {
    var str = Math.round(num).toString(16).toUpperCase();
    return str.length < 2 ? "0" + str : str;
  }
  var colorStringExports = colorString$1.exports;
  const cssKeywords = colorName;
  const reverseKeywords = {};
  for (const key of Object.keys(cssKeywords)) {
    reverseKeywords[cssKeywords[key]] = key;
  }
  const convert$2 = {
    rgb: { channels: 3, labels: "rgb" },
    hsl: { channels: 3, labels: "hsl" },
    hsv: { channels: 3, labels: "hsv" },
    hwb: { channels: 3, labels: "hwb" },
    cmyk: { channels: 4, labels: "cmyk" },
    xyz: { channels: 3, labels: "xyz" },
    lab: { channels: 3, labels: "lab" },
    lch: { channels: 3, labels: "lch" },
    hex: { channels: 1, labels: ["hex"] },
    keyword: { channels: 1, labels: ["keyword"] },
    ansi16: { channels: 1, labels: ["ansi16"] },
    ansi256: { channels: 1, labels: ["ansi256"] },
    hcg: { channels: 3, labels: ["h", "c", "g"] },
    apple: { channels: 3, labels: ["r16", "g16", "b16"] },
    gray: { channels: 1, labels: ["gray"] }
  };
  var conversions$2 = convert$2;
  for (const model of Object.keys(convert$2)) {
    if (!("channels" in convert$2[model])) {
      throw new Error("missing channels property: " + model);
    }
    if (!("labels" in convert$2[model])) {
      throw new Error("missing channel labels property: " + model);
    }
    if (convert$2[model].labels.length !== convert$2[model].channels) {
      throw new Error("channel and label counts mismatch: " + model);
    }
    const { channels, labels } = convert$2[model];
    delete convert$2[model].channels;
    delete convert$2[model].labels;
    Object.defineProperty(convert$2[model], "channels", { value: channels });
    Object.defineProperty(convert$2[model], "labels", { value: labels });
  }
  convert$2.rgb.hsl = function(rgb) {
    const r = rgb[0] / 255;
    const g = rgb[1] / 255;
    const b = rgb[2] / 255;
    const min = Math.min(r, g, b);
    const max = Math.max(r, g, b);
    const delta = max - min;
    let h;
    let s;
    if (max === min) {
      h = 0;
    } else if (r === max) {
      h = (g - b) / delta;
    } else if (g === max) {
      h = 2 + (b - r) / delta;
    } else if (b === max) {
      h = 4 + (r - g) / delta;
    }
    h = Math.min(h * 60, 360);
    if (h < 0) {
      h += 360;
    }
    const l = (min + max) / 2;
    if (max === min) {
      s = 0;
    } else if (l <= 0.5) {
      s = delta / (max + min);
    } else {
      s = delta / (2 - max - min);
    }
    return [h, s * 100, l * 100];
  };
  convert$2.rgb.hsv = function(rgb) {
    let rdif;
    let gdif;
    let bdif;
    let h;
    let s;
    const r = rgb[0] / 255;
    const g = rgb[1] / 255;
    const b = rgb[2] / 255;
    const v = Math.max(r, g, b);
    const diff = v - Math.min(r, g, b);
    const diffc = function(c) {
      return (v - c) / 6 / diff + 1 / 2;
    };
    if (diff === 0) {
      h = 0;
      s = 0;
    } else {
      s = diff / v;
      rdif = diffc(r);
      gdif = diffc(g);
      bdif = diffc(b);
      if (r === v) {
        h = bdif - gdif;
      } else if (g === v) {
        h = 1 / 3 + rdif - bdif;
      } else if (b === v) {
        h = 2 / 3 + gdif - rdif;
      }
      if (h < 0) {
        h += 1;
      } else if (h > 1) {
        h -= 1;
      }
    }
    return [
      h * 360,
      s * 100,
      v * 100
    ];
  };
  convert$2.rgb.hwb = function(rgb) {
    const r = rgb[0];
    const g = rgb[1];
    let b = rgb[2];
    const h = convert$2.rgb.hsl(rgb)[0];
    const w = 1 / 255 * Math.min(r, Math.min(g, b));
    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
    return [h, w * 100, b * 100];
  };
  convert$2.rgb.cmyk = function(rgb) {
    const r = rgb[0] / 255;
    const g = rgb[1] / 255;
    const b = rgb[2] / 255;
    const k = Math.min(1 - r, 1 - g, 1 - b);
    const c = (1 - r - k) / (1 - k) || 0;
    const m = (1 - g - k) / (1 - k) || 0;
    const y = (1 - b - k) / (1 - k) || 0;
    return [c * 100, m * 100, y * 100, k * 100];
  };
  function comparativeDistance(x2, y) {
    return (x2[0] - y[0]) ** 2 + (x2[1] - y[1]) ** 2 + (x2[2] - y[2]) ** 2;
  }
  convert$2.rgb.keyword = function(rgb) {
    const reversed = reverseKeywords[rgb];
    if (reversed) {
      return reversed;
    }
    let currentClosestDistance = Infinity;
    let currentClosestKeyword;
    for (const keyword of Object.keys(cssKeywords)) {
      const value = cssKeywords[keyword];
      const distance = comparativeDistance(rgb, value);
      if (distance < currentClosestDistance) {
        currentClosestDistance = distance;
        currentClosestKeyword = keyword;
      }
    }
    return currentClosestKeyword;
  };
  convert$2.keyword.rgb = function(keyword) {
    return cssKeywords[keyword];
  };
  convert$2.rgb.xyz = function(rgb) {
    let r = rgb[0] / 255;
    let g = rgb[1] / 255;
    let b = rgb[2] / 255;
    r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
    g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
    b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
    const x2 = r * 0.4124 + g * 0.3576 + b * 0.1805;
    const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
    const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
    return [x2 * 100, y * 100, z * 100];
  };
  convert$2.rgb.lab = function(rgb) {
    const xyz = convert$2.rgb.xyz(rgb);
    let x2 = xyz[0];
    let y = xyz[1];
    let z = xyz[2];
    x2 /= 95.047;
    y /= 100;
    z /= 108.883;
    x2 = x2 > 8856e-6 ? x2 ** (1 / 3) : 7.787 * x2 + 16 / 116;
    y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
    const l = 116 * y - 16;
    const a = 500 * (x2 - y);
    const b = 200 * (y - z);
    return [l, a, b];
  };
  convert$2.hsl.rgb = function(hsl) {
    const h = hsl[0] / 360;
    const s = hsl[1] / 100;
    const l = hsl[2] / 100;
    let t2;
    let t3;
    let val;
    if (s === 0) {
      val = l * 255;
      return [val, val, val];
    }
    if (l < 0.5) {
      t2 = l * (1 + s);
    } else {
      t2 = l + s - l * s;
    }
    const t1 = 2 * l - t2;
    const rgb = [0, 0, 0];
    for (let i = 0; i < 3; i++) {
      t3 = h + 1 / 3 * -(i - 1);
      if (t3 < 0) {
        t3++;
      }
      if (t3 > 1) {
        t3--;
      }
      if (6 * t3 < 1) {
        val = t1 + (t2 - t1) * 6 * t3;
      } else if (2 * t3 < 1) {
        val = t2;
      } else if (3 * t3 < 2) {
        val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
      } else {
        val = t1;
      }
      rgb[i] = val * 255;
    }
    return rgb;
  };
  convert$2.hsl.hsv = function(hsl) {
    const h = hsl[0];
    let s = hsl[1] / 100;
    let l = hsl[2] / 100;
    let smin = s;
    const lmin = Math.max(l, 0.01);
    l *= 2;
    s *= l <= 1 ? l : 2 - l;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    const v = (l + s) / 2;
    const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
    return [h, sv * 100, v * 100];
  };
  convert$2.hsv.rgb = function(hsv) {
    const h = hsv[0] / 60;
    const s = hsv[1] / 100;
    let v = hsv[2] / 100;
    const hi = Math.floor(h) % 6;
    const f = h - Math.floor(h);
    const p = 255 * v * (1 - s);
    const q = 255 * v * (1 - s * f);
    const t = 255 * v * (1 - s * (1 - f));
    v *= 255;
    switch (hi) {
      case 0:
        return [v, t, p];
      case 1:
        return [q, v, p];
      case 2:
        return [p, v, t];
      case 3:
        return [p, q, v];
      case 4:
        return [t, p, v];
      case 5:
        return [v, p, q];
    }
  };
  convert$2.hsv.hsl = function(hsv) {
    const h = hsv[0];
    const s = hsv[1] / 100;
    const v = hsv[2] / 100;
    const vmin = Math.max(v, 0.01);
    let sl;
    let l;
    l = (2 - s) * v;
    const lmin = (2 - s) * vmin;
    sl = s * vmin;
    sl /= lmin <= 1 ? lmin : 2 - lmin;
    sl = sl || 0;
    l /= 2;
    return [h, sl * 100, l * 100];
  };
  convert$2.hwb.rgb = function(hwb) {
    const h = hwb[0] / 360;
    let wh = hwb[1] / 100;
    let bl = hwb[2] / 100;
    const ratio = wh + bl;
    let f;
    if (ratio > 1) {
      wh /= ratio;
      bl /= ratio;
    }
    const i = Math.floor(6 * h);
    const v = 1 - bl;
    f = 6 * h - i;
    if ((i & 1) !== 0) {
      f = 1 - f;
    }
    const n = wh + f * (v - wh);
    let r;
    let g;
    let b;
    switch (i) {
      default:
      case 6:
      case 0:
        r = v;
        g = n;
        b = wh;
        break;
      case 1:
        r = n;
        g = v;
        b = wh;
        break;
      case 2:
        r = wh;
        g = v;
        b = n;
        break;
      case 3:
        r = wh;
        g = n;
        b = v;
        break;
      case 4:
        r = n;
        g = wh;
        b = v;
        break;
      case 5:
        r = v;
        g = wh;
        b = n;
        break;
    }
    return [r * 255, g * 255, b * 255];
  };
  convert$2.cmyk.rgb = function(cmyk) {
    const c = cmyk[0] / 100;
    const m = cmyk[1] / 100;
    const y = cmyk[2] / 100;
    const k = cmyk[3] / 100;
    const r = 1 - Math.min(1, c * (1 - k) + k);
    const g = 1 - Math.min(1, m * (1 - k) + k);
    const b = 1 - Math.min(1, y * (1 - k) + k);
    return [r * 255, g * 255, b * 255];
  };
  convert$2.xyz.rgb = function(xyz) {
    const x2 = xyz[0] / 100;
    const y = xyz[1] / 100;
    const z = xyz[2] / 100;
    let r;
    let g;
    let b;
    r = x2 * 3.2406 + y * -1.5372 + z * -0.4986;
    g = x2 * -0.9689 + y * 1.8758 + z * 0.0415;
    b = x2 * 0.0557 + y * -0.204 + z * 1.057;
    r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
    g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
    b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);
    return [r * 255, g * 255, b * 255];
  };
  convert$2.xyz.lab = function(xyz) {
    let x2 = xyz[0];
    let y = xyz[1];
    let z = xyz[2];
    x2 /= 95.047;
    y /= 100;
    z /= 108.883;
    x2 = x2 > 8856e-6 ? x2 ** (1 / 3) : 7.787 * x2 + 16 / 116;
    y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
    const l = 116 * y - 16;
    const a = 500 * (x2 - y);
    const b = 200 * (y - z);
    return [l, a, b];
  };
  convert$2.lab.xyz = function(lab) {
    const l = lab[0];
    const a = lab[1];
    const b = lab[2];
    let x2;
    let y;
    let z;
    y = (l + 16) / 116;
    x2 = a / 500 + y;
    z = y - b / 200;
    const y2 = y ** 3;
    const x22 = x2 ** 3;
    const z2 = z ** 3;
    y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
    x2 = x22 > 8856e-6 ? x22 : (x2 - 16 / 116) / 7.787;
    z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
    x2 *= 95.047;
    y *= 100;
    z *= 108.883;
    return [x2, y, z];
  };
  convert$2.lab.lch = function(lab) {
    const l = lab[0];
    const a = lab[1];
    const b = lab[2];
    let h;
    const hr = Math.atan2(b, a);
    h = hr * 360 / 2 / Math.PI;
    if (h < 0) {
      h += 360;
    }
    const c = Math.sqrt(a * a + b * b);
    return [l, c, h];
  };
  convert$2.lch.lab = function(lch) {
    const l = lch[0];
    const c = lch[1];
    const h = lch[2];
    const hr = h / 360 * 2 * Math.PI;
    const a = c * Math.cos(hr);
    const b = c * Math.sin(hr);
    return [l, a, b];
  };
  convert$2.rgb.ansi16 = function(args, saturation = null) {
    const [r, g, b] = args;
    let value = saturation === null ? convert$2.rgb.hsv(args)[2] : saturation;
    value = Math.round(value / 50);
    if (value === 0) {
      return 30;
    }
    let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
    if (value === 2) {
      ansi += 60;
    }
    return ansi;
  };
  convert$2.hsv.ansi16 = function(args) {
    return convert$2.rgb.ansi16(convert$2.hsv.rgb(args), args[2]);
  };
  convert$2.rgb.ansi256 = function(args) {
    const r = args[0];
    const g = args[1];
    const b = args[2];
    if (r === g && g === b) {
      if (r < 8) {
        return 16;
      }
      if (r > 248) {
        return 231;
      }
      return Math.round((r - 8) / 247 * 24) + 232;
    }
    const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
    return ansi;
  };
  convert$2.ansi16.rgb = function(args) {
    let color2 = args % 10;
    if (color2 === 0 || color2 === 7) {
      if (args > 50) {
        color2 += 3.5;
      }
      color2 = color2 / 10.5 * 255;
      return [color2, color2, color2];
    }
    const mult = (~~(args > 50) + 1) * 0.5;
    const r = (color2 & 1) * mult * 255;
    const g = (color2 >> 1 & 1) * mult * 255;
    const b = (color2 >> 2 & 1) * mult * 255;
    return [r, g, b];
  };
  convert$2.ansi256.rgb = function(args) {
    if (args >= 232) {
      const c = (args - 232) * 10 + 8;
      return [c, c, c];
    }
    args -= 16;
    let rem;
    const r = Math.floor(args / 36) / 5 * 255;
    const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    const b = rem % 6 / 5 * 255;
    return [r, g, b];
  };
  convert$2.rgb.hex = function(args) {
    const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
    const string = integer.toString(16).toUpperCase();
    return "000000".substring(string.length) + string;
  };
  convert$2.hex.rgb = function(args) {
    const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!match) {
      return [0, 0, 0];
    }
    let colorString2 = match[0];
    if (match[0].length === 3) {
      colorString2 = colorString2.split("").map((char) => {
        return char + char;
      }).join("");
    }
    const integer = parseInt(colorString2, 16);
    const r = integer >> 16 & 255;
    const g = integer >> 8 & 255;
    const b = integer & 255;
    return [r, g, b];
  };
  convert$2.rgb.hcg = function(rgb) {
    const r = rgb[0] / 255;
    const g = rgb[1] / 255;
    const b = rgb[2] / 255;
    const max = Math.max(Math.max(r, g), b);
    const min = Math.min(Math.min(r, g), b);
    const chroma2 = max - min;
    let grayscale;
    let hue;
    if (chroma2 < 1) {
      grayscale = min / (1 - chroma2);
    } else {
      grayscale = 0;
    }
    if (chroma2 <= 0) {
      hue = 0;
    } else if (max === r) {
      hue = (g - b) / chroma2 % 6;
    } else if (max === g) {
      hue = 2 + (b - r) / chroma2;
    } else {
      hue = 4 + (r - g) / chroma2;
    }
    hue /= 6;
    hue %= 1;
    return [hue * 360, chroma2 * 100, grayscale * 100];
  };
  convert$2.hsl.hcg = function(hsl) {
    const s = hsl[1] / 100;
    const l = hsl[2] / 100;
    const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
    let f = 0;
    if (c < 1) {
      f = (l - 0.5 * c) / (1 - c);
    }
    return [hsl[0], c * 100, f * 100];
  };
  convert$2.hsv.hcg = function(hsv) {
    const s = hsv[1] / 100;
    const v = hsv[2] / 100;
    const c = s * v;
    let f = 0;
    if (c < 1) {
      f = (v - c) / (1 - c);
    }
    return [hsv[0], c * 100, f * 100];
  };
  convert$2.hcg.rgb = function(hcg) {
    const h = hcg[0] / 360;
    const c = hcg[1] / 100;
    const g = hcg[2] / 100;
    if (c === 0) {
      return [g * 255, g * 255, g * 255];
    }
    const pure = [0, 0, 0];
    const hi = h % 1 * 6;
    const v = hi % 1;
    const w = 1 - v;
    let mg = 0;
    switch (Math.floor(hi)) {
      case 0:
        pure[0] = 1;
        pure[1] = v;
        pure[2] = 0;
        break;
      case 1:
        pure[0] = w;
        pure[1] = 1;
        pure[2] = 0;
        break;
      case 2:
        pure[0] = 0;
        pure[1] = 1;
        pure[2] = v;
        break;
      case 3:
        pure[0] = 0;
        pure[1] = w;
        pure[2] = 1;
        break;
      case 4:
        pure[0] = v;
        pure[1] = 0;
        pure[2] = 1;
        break;
      default:
        pure[0] = 1;
        pure[1] = 0;
        pure[2] = w;
    }
    mg = (1 - c) * g;
    return [
      (c * pure[0] + mg) * 255,
      (c * pure[1] + mg) * 255,
      (c * pure[2] + mg) * 255
    ];
  };
  convert$2.hcg.hsv = function(hcg) {
    const c = hcg[1] / 100;
    const g = hcg[2] / 100;
    const v = c + g * (1 - c);
    let f = 0;
    if (v > 0) {
      f = c / v;
    }
    return [hcg[0], f * 100, v * 100];
  };
  convert$2.hcg.hsl = function(hcg) {
    const c = hcg[1] / 100;
    const g = hcg[2] / 100;
    const l = g * (1 - c) + 0.5 * c;
    let s = 0;
    if (l > 0 && l < 0.5) {
      s = c / (2 * l);
    } else if (l >= 0.5 && l < 1) {
      s = c / (2 * (1 - l));
    }
    return [hcg[0], s * 100, l * 100];
  };
  convert$2.hcg.hwb = function(hcg) {
    const c = hcg[1] / 100;
    const g = hcg[2] / 100;
    const v = c + g * (1 - c);
    return [hcg[0], (v - c) * 100, (1 - v) * 100];
  };
  convert$2.hwb.hcg = function(hwb) {
    const w = hwb[1] / 100;
    const b = hwb[2] / 100;
    const v = 1 - b;
    const c = v - w;
    let g = 0;
    if (c < 1) {
      g = (v - c) / (1 - c);
    }
    return [hwb[0], c * 100, g * 100];
  };
  convert$2.apple.rgb = function(apple) {
    return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
  };
  convert$2.rgb.apple = function(rgb) {
    return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
  };
  convert$2.gray.rgb = function(args) {
    return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
  };
  convert$2.gray.hsl = function(args) {
    return [0, 0, args[0]];
  };
  convert$2.gray.hsv = convert$2.gray.hsl;
  convert$2.gray.hwb = function(gray) {
    return [0, 100, gray[0]];
  };
  convert$2.gray.cmyk = function(gray) {
    return [0, 0, 0, gray[0]];
  };
  convert$2.gray.lab = function(gray) {
    return [gray[0], 0, 0];
  };
  convert$2.gray.hex = function(gray) {
    const val = Math.round(gray[0] / 100 * 255) & 255;
    const integer = (val << 16) + (val << 8) + val;
    const string = integer.toString(16).toUpperCase();
    return "000000".substring(string.length) + string;
  };
  convert$2.rgb.gray = function(rgb) {
    const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    return [val / 255 * 100];
  };
  const conversions$1 = conversions$2;
  function buildGraph() {
    const graph = {};
    const models2 = Object.keys(conversions$1);
    for (let len = models2.length, i = 0; i < len; i++) {
      graph[models2[i]] = {
        // http://jsperf.com/1-vs-infinity
        // micro-opt, but this is simple.
        distance: -1,
        parent: null
      };
    }
    return graph;
  }
  function deriveBFS(fromModel) {
    const graph = buildGraph();
    const queue = [fromModel];
    graph[fromModel].distance = 0;
    while (queue.length) {
      const current = queue.pop();
      const adjacents = Object.keys(conversions$1[current]);
      for (let len = adjacents.length, i = 0; i < len; i++) {
        const adjacent = adjacents[i];
        const node = graph[adjacent];
        if (node.distance === -1) {
          node.distance = graph[current].distance + 1;
          node.parent = current;
          queue.unshift(adjacent);
        }
      }
    }
    return graph;
  }
  function link(from, to) {
    return function(args) {
      return to(from(args));
    };
  }
  function wrapConversion(toModel, graph) {
    const path = [graph[toModel].parent, toModel];
    let fn = conversions$1[graph[toModel].parent][toModel];
    let cur = graph[toModel].parent;
    while (graph[cur].parent) {
      path.unshift(graph[cur].parent);
      fn = link(conversions$1[graph[cur].parent][cur], fn);
      cur = graph[cur].parent;
    }
    fn.conversion = path;
    return fn;
  }
  var route$1 = function(fromModel) {
    const graph = deriveBFS(fromModel);
    const conversion = {};
    const models2 = Object.keys(graph);
    for (let len = models2.length, i = 0; i < len; i++) {
      const toModel = models2[i];
      const node = graph[toModel];
      if (node.parent === null) {
        continue;
      }
      conversion[toModel] = wrapConversion(toModel, graph);
    }
    return conversion;
  };
  const conversions = conversions$2;
  const route = route$1;
  const convert$1 = {};
  const models = Object.keys(conversions);
  function wrapRaw(fn) {
    const wrappedFn = function(...args) {
      const arg0 = args[0];
      if (arg0 === void 0 || arg0 === null) {
        return arg0;
      }
      if (arg0.length > 1) {
        args = arg0;
      }
      return fn(args);
    };
    if ("conversion" in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  function wrapRounded(fn) {
    const wrappedFn = function(...args) {
      const arg0 = args[0];
      if (arg0 === void 0 || arg0 === null) {
        return arg0;
      }
      if (arg0.length > 1) {
        args = arg0;
      }
      const result = fn(args);
      if (typeof result === "object") {
        for (let len = result.length, i = 0; i < len; i++) {
          result[i] = Math.round(result[i]);
        }
      }
      return result;
    };
    if ("conversion" in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  models.forEach((fromModel) => {
    convert$1[fromModel] = {};
    Object.defineProperty(convert$1[fromModel], "channels", { value: conversions[fromModel].channels });
    Object.defineProperty(convert$1[fromModel], "labels", { value: conversions[fromModel].labels });
    const routes = route(fromModel);
    const routeModels = Object.keys(routes);
    routeModels.forEach((toModel) => {
      const fn = routes[toModel];
      convert$1[fromModel][toModel] = wrapRounded(fn);
      convert$1[fromModel][toModel].raw = wrapRaw(fn);
    });
  });
  var colorConvert = convert$1;
  const colorString = colorStringExports;
  const convert = colorConvert;
  const skippedModels = [
    // To be honest, I don't really feel like keyword belongs in color convert, but eh.
    "keyword",
    // Gray conflicts with some method names, and has its own method defined.
    "gray",
    // Shouldn't really be in color-convert either...
    "hex"
  ];
  const hashedModelKeys = {};
  for (const model of Object.keys(convert)) {
    hashedModelKeys[[...convert[model].labels].sort().join("")] = model;
  }
  const limiters = {};
  function Color(object, model) {
    if (!(this instanceof Color)) {
      return new Color(object, model);
    }
    if (model && model in skippedModels) {
      model = null;
    }
    if (model && !(model in convert)) {
      throw new Error("Unknown model: " + model);
    }
    let i;
    let channels;
    if (object == null) {
      this.model = "rgb";
      this.color = [0, 0, 0];
      this.valpha = 1;
    } else if (object instanceof Color) {
      this.model = object.model;
      this.color = [...object.color];
      this.valpha = object.valpha;
    } else if (typeof object === "string") {
      const result = colorString.get(object);
      if (result === null) {
        throw new Error("Unable to parse color from string: " + object);
      }
      this.model = result.model;
      channels = convert[this.model].channels;
      this.color = result.value.slice(0, channels);
      this.valpha = typeof result.value[channels] === "number" ? result.value[channels] : 1;
    } else if (object.length > 0) {
      this.model = model || "rgb";
      channels = convert[this.model].channels;
      const newArray = Array.prototype.slice.call(object, 0, channels);
      this.color = zeroArray(newArray, channels);
      this.valpha = typeof object[channels] === "number" ? object[channels] : 1;
    } else if (typeof object === "number") {
      this.model = "rgb";
      this.color = [
        object >> 16 & 255,
        object >> 8 & 255,
        object & 255
      ];
      this.valpha = 1;
    } else {
      this.valpha = 1;
      const keys2 = Object.keys(object);
      if ("alpha" in object) {
        keys2.splice(keys2.indexOf("alpha"), 1);
        this.valpha = typeof object.alpha === "number" ? object.alpha : 0;
      }
      const hashedKeys = keys2.sort().join("");
      if (!(hashedKeys in hashedModelKeys)) {
        throw new Error("Unable to parse color from object: " + JSON.stringify(object));
      }
      this.model = hashedModelKeys[hashedKeys];
      const { labels } = convert[this.model];
      const color2 = [];
      for (i = 0; i < labels.length; i++) {
        color2.push(object[labels[i]]);
      }
      this.color = zeroArray(color2);
    }
    if (limiters[this.model]) {
      channels = convert[this.model].channels;
      for (i = 0; i < channels; i++) {
        const limit = limiters[this.model][i];
        if (limit) {
          this.color[i] = limit(this.color[i]);
        }
      }
    }
    this.valpha = Math.max(0, Math.min(1, this.valpha));
    if (Object.freeze) {
      Object.freeze(this);
    }
  }
  Color.prototype = {
    toString() {
      return this.string();
    },
    toJSON() {
      return this[this.model]();
    },
    string(places) {
      let self2 = this.model in colorString.to ? this : this.rgb();
      self2 = self2.round(typeof places === "number" ? places : 1);
      const args = self2.valpha === 1 ? self2.color : [...self2.color, this.valpha];
      return colorString.to[self2.model](args);
    },
    percentString(places) {
      const self2 = this.rgb().round(typeof places === "number" ? places : 1);
      const args = self2.valpha === 1 ? self2.color : [...self2.color, this.valpha];
      return colorString.to.rgb.percent(args);
    },
    array() {
      return this.valpha === 1 ? [...this.color] : [...this.color, this.valpha];
    },
    object() {
      const result = {};
      const { channels } = convert[this.model];
      const { labels } = convert[this.model];
      for (let i = 0; i < channels; i++) {
        result[labels[i]] = this.color[i];
      }
      if (this.valpha !== 1) {
        result.alpha = this.valpha;
      }
      return result;
    },
    unitArray() {
      const rgb = this.rgb().color;
      rgb[0] /= 255;
      rgb[1] /= 255;
      rgb[2] /= 255;
      if (this.valpha !== 1) {
        rgb.push(this.valpha);
      }
      return rgb;
    },
    unitObject() {
      const rgb = this.rgb().object();
      rgb.r /= 255;
      rgb.g /= 255;
      rgb.b /= 255;
      if (this.valpha !== 1) {
        rgb.alpha = this.valpha;
      }
      return rgb;
    },
    round(places) {
      places = Math.max(places || 0, 0);
      return new Color([...this.color.map(roundToPlace(places)), this.valpha], this.model);
    },
    alpha(value) {
      if (value !== void 0) {
        return new Color([...this.color, Math.max(0, Math.min(1, value))], this.model);
      }
      return this.valpha;
    },
    // Rgb
    red: getset("rgb", 0, maxfn(255)),
    green: getset("rgb", 1, maxfn(255)),
    blue: getset("rgb", 2, maxfn(255)),
    hue: getset(["hsl", "hsv", "hsl", "hwb", "hcg"], 0, (value) => (value % 360 + 360) % 360),
    saturationl: getset("hsl", 1, maxfn(100)),
    lightness: getset("hsl", 2, maxfn(100)),
    saturationv: getset("hsv", 1, maxfn(100)),
    value: getset("hsv", 2, maxfn(100)),
    chroma: getset("hcg", 1, maxfn(100)),
    gray: getset("hcg", 2, maxfn(100)),
    white: getset("hwb", 1, maxfn(100)),
    wblack: getset("hwb", 2, maxfn(100)),
    cyan: getset("cmyk", 0, maxfn(100)),
    magenta: getset("cmyk", 1, maxfn(100)),
    yellow: getset("cmyk", 2, maxfn(100)),
    black: getset("cmyk", 3, maxfn(100)),
    x: getset("xyz", 0, maxfn(95.047)),
    y: getset("xyz", 1, maxfn(100)),
    z: getset("xyz", 2, maxfn(108.833)),
    l: getset("lab", 0, maxfn(100)),
    a: getset("lab", 1),
    b: getset("lab", 2),
    keyword(value) {
      if (value !== void 0) {
        return new Color(value);
      }
      return convert[this.model].keyword(this.color);
    },
    hex(value) {
      if (value !== void 0) {
        return new Color(value);
      }
      return colorString.to.hex(this.rgb().round().color);
    },
    hexa(value) {
      if (value !== void 0) {
        return new Color(value);
      }
      const rgbArray = this.rgb().round().color;
      let alphaHex = Math.round(this.valpha * 255).toString(16).toUpperCase();
      if (alphaHex.length === 1) {
        alphaHex = "0" + alphaHex;
      }
      return colorString.to.hex(rgbArray) + alphaHex;
    },
    rgbNumber() {
      const rgb = this.rgb().color;
      return (rgb[0] & 255) << 16 | (rgb[1] & 255) << 8 | rgb[2] & 255;
    },
    luminosity() {
      const rgb = this.rgb().color;
      const lum = [];
      for (const [i, element] of rgb.entries()) {
        const chan = element / 255;
        lum[i] = chan <= 0.04045 ? chan / 12.92 : ((chan + 0.055) / 1.055) ** 2.4;
      }
      return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
    },
    contrast(color2) {
      const lum1 = this.luminosity();
      const lum2 = color2.luminosity();
      if (lum1 > lum2) {
        return (lum1 + 0.05) / (lum2 + 0.05);
      }
      return (lum2 + 0.05) / (lum1 + 0.05);
    },
    level(color2) {
      const contrastRatio = this.contrast(color2);
      if (contrastRatio >= 7) {
        return "AAA";
      }
      return contrastRatio >= 4.5 ? "AA" : "";
    },
    isDark() {
      const rgb = this.rgb().color;
      const yiq = (rgb[0] * 2126 + rgb[1] * 7152 + rgb[2] * 722) / 1e4;
      return yiq < 128;
    },
    isLight() {
      return !this.isDark();
    },
    negate() {
      const rgb = this.rgb();
      for (let i = 0; i < 3; i++) {
        rgb.color[i] = 255 - rgb.color[i];
      }
      return rgb;
    },
    lighten(ratio) {
      const hsl = this.hsl();
      hsl.color[2] += hsl.color[2] * ratio;
      return hsl;
    },
    darken(ratio) {
      const hsl = this.hsl();
      hsl.color[2] -= hsl.color[2] * ratio;
      return hsl;
    },
    saturate(ratio) {
      const hsl = this.hsl();
      hsl.color[1] += hsl.color[1] * ratio;
      return hsl;
    },
    desaturate(ratio) {
      const hsl = this.hsl();
      hsl.color[1] -= hsl.color[1] * ratio;
      return hsl;
    },
    whiten(ratio) {
      const hwb = this.hwb();
      hwb.color[1] += hwb.color[1] * ratio;
      return hwb;
    },
    blacken(ratio) {
      const hwb = this.hwb();
      hwb.color[2] += hwb.color[2] * ratio;
      return hwb;
    },
    grayscale() {
      const rgb = this.rgb().color;
      const value = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
      return Color.rgb(value, value, value);
    },
    fade(ratio) {
      return this.alpha(this.valpha - this.valpha * ratio);
    },
    opaquer(ratio) {
      return this.alpha(this.valpha + this.valpha * ratio);
    },
    rotate(degrees) {
      const hsl = this.hsl();
      let hue = hsl.color[0];
      hue = (hue + degrees) % 360;
      hue = hue < 0 ? 360 + hue : hue;
      hsl.color[0] = hue;
      return hsl;
    },
    mix(mixinColor, weight) {
      if (!mixinColor || !mixinColor.rgb) {
        throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
      }
      const color1 = mixinColor.rgb();
      const color2 = this.rgb();
      const p = weight === void 0 ? 0.5 : weight;
      const w = 2 * p - 1;
      const a = color1.alpha() - color2.alpha();
      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2;
      const w2 = 1 - w1;
      return Color.rgb(
        w1 * color1.red() + w2 * color2.red(),
        w1 * color1.green() + w2 * color2.green(),
        w1 * color1.blue() + w2 * color2.blue(),
        color1.alpha() * p + color2.alpha() * (1 - p)
      );
    }
  };
  for (const model of Object.keys(convert)) {
    if (skippedModels.includes(model)) {
      continue;
    }
    const { channels } = convert[model];
    Color.prototype[model] = function(...args) {
      if (this.model === model) {
        return new Color(this);
      }
      if (args.length > 0) {
        return new Color(args, model);
      }
      return new Color([...assertArray(convert[this.model][model].raw(this.color)), this.valpha], model);
    };
    Color[model] = function(...args) {
      let color2 = args[0];
      if (typeof color2 === "number") {
        color2 = zeroArray(args, channels);
      }
      return new Color(color2, model);
    };
  }
  function roundTo(number, places) {
    return Number(number.toFixed(places));
  }
  function roundToPlace(places) {
    return function(number) {
      return roundTo(number, places);
    };
  }
  function getset(model, channel, modifier) {
    model = Array.isArray(model) ? model : [model];
    for (const m of model) {
      (limiters[m] || (limiters[m] = []))[channel] = modifier;
    }
    model = model[0];
    return function(value) {
      let result;
      if (value !== void 0) {
        if (modifier) {
          value = modifier(value);
        }
        result = this[model]();
        result.color[channel] = value;
        return result;
      }
      result = this[model]().color[channel];
      if (modifier) {
        result = modifier(result);
      }
      return result;
    };
  }
  function maxfn(max) {
    return function(v) {
      return Math.max(0, Math.min(max, v));
    };
  }
  function assertArray(value) {
    return Array.isArray(value) ? value : [value];
  }
  function zeroArray(array, length) {
    for (let i = 0; i < length; i++) {
      if (typeof array[i] !== "number") {
        array[i] = 0;
      }
    }
    return array;
  }
  var color = Color;
  const Color$1 = /* @__PURE__ */ getDefaultExportFromCjs(color);
  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = "[object Arguments]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]";
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  function arrayEach(array, iteratee) {
    var index = -1, length = array ? array.length : 0;
    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }
  function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var nativeKeys = overArg(Object.keys, Object);
  function arrayLikeKeys(value, inherited) {
    var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
    var length = result.length, skipIndexes = !!length;
    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }
  var baseEach = createBaseEach(baseForOwn);
  var baseFor = createBaseFor();
  function baseForOwn(object, iteratee) {
    return object && baseFor(object, iteratee, keys);
  }
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != "constructor") {
        result.push(key);
      }
    }
    return result;
  }
  function createBaseEach(eachFunc, fromRight) {
    return function(collection, iteratee) {
      if (collection == null) {
        return collection;
      }
      if (!isArrayLike(collection)) {
        return eachFunc(collection, iteratee);
      }
      var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
      while (fromRight ? index-- : ++index < length) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }
  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
  }
  function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
    return value === proto;
  }
  function forEach(collection, iteratee) {
    var func = isArray(collection) ? arrayEach : baseEach;
    return func(collection, typeof iteratee == "function" ? iteratee : identity);
  }
  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
  }
  var isArray = Array.isArray;
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }
  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : "";
    return tag == funcTag || tag == genTag;
  }
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  function isObject(value) {
    var type = typeof value;
    return !!value && (type == "object" || type == "function");
  }
  function isObjectLike(value) {
    return !!value && typeof value == "object";
  }
  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }
  function identity(value) {
    return value;
  }
  var lodash_foreach = forEach;
  const forEach$1 = /* @__PURE__ */ getDefaultExportFromCjs(lodash_foreach);
  var flat = flatten;
  flatten.flatten = flatten;
  flatten.unflatten = unflatten;
  function isBuffer(obj) {
    return obj && obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
  }
  function keyIdentity(key) {
    return key;
  }
  function flatten(target, opts) {
    opts = opts || {};
    const delimiter = opts.delimiter || ".";
    const maxDepth = opts.maxDepth;
    const transformKey = opts.transformKey || keyIdentity;
    const output = {};
    function step(object, prev, currentDepth) {
      currentDepth = currentDepth || 1;
      Object.keys(object).forEach(function(key) {
        const value = object[key];
        const isarray = opts.safe && Array.isArray(value);
        const type = Object.prototype.toString.call(value);
        const isbuffer = isBuffer(value);
        const isobject = type === "[object Object]" || type === "[object Array]";
        const newKey = prev ? prev + delimiter + transformKey(key) : transformKey(key);
        if (!isarray && !isbuffer && isobject && Object.keys(value).length && (!opts.maxDepth || currentDepth < maxDepth)) {
          return step(value, newKey, currentDepth + 1);
        }
        output[newKey] = value;
      });
    }
    step(target);
    return output;
  }
  function unflatten(target, opts) {
    opts = opts || {};
    const delimiter = opts.delimiter || ".";
    const overwrite = opts.overwrite || false;
    const transformKey = opts.transformKey || keyIdentity;
    const result = {};
    const isbuffer = isBuffer(target);
    if (isbuffer || Object.prototype.toString.call(target) !== "[object Object]") {
      return target;
    }
    function getkey(key) {
      const parsedKey = Number(key);
      return isNaN(parsedKey) || key.indexOf(".") !== -1 || opts.object ? key : parsedKey;
    }
    function addKeys(keyPrefix, recipient, target2) {
      return Object.keys(target2).reduce(function(result2, key) {
        result2[keyPrefix + delimiter + key] = target2[key];
        return result2;
      }, recipient);
    }
    function isEmpty(val) {
      const type = Object.prototype.toString.call(val);
      const isArray2 = type === "[object Array]";
      const isObject2 = type === "[object Object]";
      if (!val) {
        return true;
      } else if (isArray2) {
        return !val.length;
      } else if (isObject2) {
        return !Object.keys(val).length;
      }
    }
    target = Object.keys(target).reduce(function(result2, key) {
      const type = Object.prototype.toString.call(target[key]);
      const isObject2 = type === "[object Object]" || type === "[object Array]";
      if (!isObject2 || isEmpty(target[key])) {
        result2[key] = target[key];
        return result2;
      } else {
        return addKeys(
          key,
          result2,
          flatten(target[key], opts)
        );
      }
    }, {});
    Object.keys(target).forEach(function(key) {
      const split = key.split(delimiter).map(transformKey);
      let key1 = getkey(split.shift());
      let key2 = getkey(split[0]);
      let recipient = result;
      while (key2 !== void 0) {
        if (key1 === "__proto__") {
          return;
        }
        const type = Object.prototype.toString.call(recipient[key1]);
        const isobject = type === "[object Object]" || type === "[object Array]";
        if (!overwrite && !isobject && typeof recipient[key1] !== "undefined") {
          return;
        }
        if (overwrite && !isobject || !overwrite && recipient[key1] == null) {
          recipient[key1] = typeof key2 === "number" && !opts.object ? [] : {};
        }
        recipient = recipient[key1];
        if (split.length > 0) {
          key1 = getkey(split.shift());
          key2 = getkey(split[0]);
        }
      }
      recipient[key1] = unflatten(target[key], opts);
    });
    return result;
  }
  const flatten$1 = /* @__PURE__ */ getDefaultExportFromCjs(flat);
  var SCHEME = Symbol("color-scheme");
  var emptyConfig = {};
  var resolveTwcConfig = (config2 = emptyConfig, {
    produceCssVariable = defaultProduceCssVariable,
    produceThemeClass = defaultProduceThemeClass,
    produceThemeVariant = produceThemeClass,
    defaultTheme,
    strict = false
  } = {}) => {
    const resolved = {
      variants: [],
      utilities: {},
      colors: {}
    };
    const configObject = typeof config2 === "function" ? config2({ dark, light }) : config2;
    forEach$1(configObject, (colors2, themeName) => {
      const themeClassName = produceThemeClass(themeName);
      const themeVariant = produceThemeVariant(themeName);
      const flatColors = flattenColors(colors2);
      resolved.variants.push({
        name: themeVariant,
        // tailwind will generate only the first matched definition
        definition: [
          generateVariantDefinitions(`.${themeClassName}`),
          generateVariantDefinitions(`[data-theme='${themeName}']`),
          generateRootVariantDefinitions(themeName, defaultTheme)
        ].flat()
      });
      const cssSelector = `.${themeClassName},[data-theme="${themeName}"]`;
      resolved.utilities[cssSelector] = colors2[SCHEME] ? { "color-scheme": colors2[SCHEME] } : {};
      forEach$1(flatColors, (colorValue, colorName2) => {
        if (colorName2 === SCHEME)
          return;
        const safeColorName = escapeChars(colorName2, "/");
        let [h, s, l, defaultAlphaValue] = [0, 0, 0, 1];
        try {
          [h, s, l, defaultAlphaValue] = toHslaArray(colorValue);
        } catch (error) {
          const message = `\r
Warning - In theme "${themeName}" color "${colorName2}". ${error.message}`;
          if (strict) {
            throw new Error(message);
          }
          return console.error(message);
        }
        const twcColorVariable = produceCssVariable(safeColorName);
        const twcOpacityVariable = `${produceCssVariable(safeColorName)}-opacity`;
        const hslValues = `${h} ${s}% ${l}%`;
        resolved.utilities[cssSelector][twcColorVariable] = hslValues;
        addRootUtilities(resolved.utilities, {
          key: twcColorVariable,
          value: hslValues,
          defaultTheme,
          themeName
        });
        if (typeof defaultAlphaValue === "number") {
          const alphaValue = defaultAlphaValue.toFixed(2);
          resolved.utilities[cssSelector][twcOpacityVariable] = alphaValue;
          addRootUtilities(resolved.utilities, {
            key: twcOpacityVariable,
            value: alphaValue,
            defaultTheme,
            themeName
          });
        }
        resolved.colors[colorName2] = ({ opacityVariable, opacityValue }) => {
          if (!isNaN(+opacityValue)) {
            return `hsl(var(${twcColorVariable}) / ${opacityValue})`;
          }
          if (opacityVariable) {
            return `hsl(var(${twcColorVariable}) / var(${twcOpacityVariable}, var(${opacityVariable})))`;
          }
          return `hsl(var(${twcColorVariable}) / var(${twcOpacityVariable}, 1))`;
        };
      });
    });
    return resolved;
  };
  var createThemes = (config2 = emptyConfig, options = {}) => {
    const resolved = resolveTwcConfig(config2, options);
    return plugin$1(
      ({ addUtilities, addVariant }) => {
        addUtilities(resolved.utilities);
        resolved.variants.forEach(({ name: name2, definition }) => addVariant(name2, definition));
      },
      // extend the colors config
      {
        theme: {
          extend: {
            // @ts-ignore tailwind types are broken
            colors: resolved.colors
          }
        }
      }
    );
  };
  function escapeChars(str, ...chars) {
    let result = str;
    for (let char of chars) {
      const regexp = new RegExp(char, "g");
      result = str.replace(regexp, "\\" + char);
    }
    return result;
  }
  function flattenColors(colors2) {
    const flatColorsWithDEFAULT = flatten$1(colors2, {
      safe: true,
      delimiter: "-"
    });
    return Object.entries(flatColorsWithDEFAULT).reduce((acc, [key, value]) => {
      acc[key.replace(/\-DEFAULT$/, "")] = value;
      return acc;
    }, {});
  }
  function toHslaArray(colorValue) {
    return Color$1(colorValue).hsl().round(1).array();
  }
  function defaultProduceCssVariable(themeName) {
    return `--twc-${themeName}`;
  }
  function defaultProduceThemeClass(themeName) {
    return themeName;
  }
  function dark(colors2) {
    return {
      ...colors2,
      [SCHEME]: "dark"
    };
  }
  function light(colors2) {
    return {
      ...colors2,
      [SCHEME]: "light"
    };
  }
  function generateVariantDefinitions(selector) {
    return [
      `${selector}&`,
      `:is(${selector} > &:not([data-theme]))`,
      `:is(${selector} &:not(${selector} [data-theme]:not(${selector}) * ))`,
      `:is(${selector}:not(:has([data-theme])) &:not([data-theme]))`
    ];
  }
  function generateRootVariantDefinitions(themeName, defaultTheme) {
    const baseDefinitions = [
      `:root&`,
      `:is(:root > &:not([data-theme]))`,
      `:is(:root &:not([data-theme] *):not([data-theme]))`
    ];
    if (typeof defaultTheme === "string" && themeName === defaultTheme) {
      return baseDefinitions;
    }
    if (typeof defaultTheme === "object" && themeName === defaultTheme.light) {
      return baseDefinitions.map(
        (definition) => `@media (prefers-color-scheme: light){${definition}}`
      );
    }
    if (typeof defaultTheme === "object" && themeName === defaultTheme.dark) {
      return baseDefinitions.map(
        (definition) => `@media (prefers-color-scheme: dark){${definition}}`
      );
    }
    return [];
  }
  function addRootUtilities(utilities, {
    key,
    value,
    defaultTheme,
    themeName
  }) {
    if (!defaultTheme)
      return;
    if (typeof defaultTheme === "string") {
      if (themeName === defaultTheme) {
        if (!utilities[":root"]) {
          utilities[":root"] = {};
        }
        utilities[":root"][key] = value;
      }
    } else if (themeName === defaultTheme.light) {
      if (!utilities["@media (prefers-color-scheme: light)"]) {
        utilities["@media (prefers-color-scheme: light)"] = {
          ":root": {}
        };
      }
      utilities["@media (prefers-color-scheme: light)"][":root"][key] = value;
    } else if (themeName === defaultTheme.dark) {
      if (!utilities["@media (prefers-color-scheme: dark)"]) {
        utilities["@media (prefers-color-scheme: dark)"] = {
          ":root": {}
        };
      }
      utilities["@media (prefers-color-scheme: dark)"][":root"][key] = value;
    }
  }
  const colorPalette = {
    white: "#FFFFFF",
    black: "#000000",
    gray: {
      100: "#F7F7FA",
      200: "#E6E6F0",
      300: "#C9C9D6",
      400: "#77778C",
      500: "#5C5C73",
      600: "#3D3D4D",
      700: "#242433",
      800: "#1E1E2E",
      900: "#11111F",
      950: "#02020F"
    },
    magenta: {
      100: "#FAE5F6",
      200: "#F1BFE9",
      300: "#E480D3",
      400: "#D740BE",
      500: "#C900A8",
      600: "#AB018F",
      700: "#8C0276",
      800: "#6E025C",
      900: "#4F0343",
      950: "#31042A"
    },
    pink: {
      100: "#FDE5F1",
      200: "#F9BFDB",
      300: "#F480B7",
      400: "#EE4094",
      500: "#DE006B",
      600: "#BB015A",
      700: "#98014A",
      800: "#740239",
      900: "#510229",
      950: "#2E0318"
    },
    lime: {
      100: "#F4FAE5",
      200: "#E3F3BF",
      300: "#C6E880",
      400: "#AADC40",
      500: "#8ED000",
      600: "#78B001",
      700: "#628F01",
      800: "#4C6F02",
      900: "#364E02",
      950: "#202E03"
    },
    teal: {
      100: "#E5FBF9",
      200: "#BFF6F0",
      300: "#80EDE0",
      400: "#40E5D1",
      500: "#00DCC2",
      600: "#00C2AB",
      700: "#019A88",
      800: "#017365",
      900: "#024B42",
      950: "#02231F"
    },
    cyan: {
      100: "#E5F9FE",
      200: "#BFF0FB",
      300: "#80E2F8",
      400: "#40D3F4",
      500: "#00C5F0",
      600: "#01A7CB",
      700: "#0289A6",
      800: "#036B82",
      900: "#044D5D",
      950: "#052F38"
    },
    violet: {
      100: "#F0E8FD",
      200: "#DAC5F9",
      300: "#B58BF3",
      400: "#9152EE",
      500: "#6C18E8",
      600: "#5B14C5",
      700: "#4B10A1",
      800: "#3A0D7E",
      900: "#2A095B",
      950: "#190537"
    },
    purple: {
      100: "#F3E5FC",
      200: "#E2BFF7",
      300: "#C580F0",
      400: "#A840E8",
      500: "#8B00E0",
      600: "#7501BC",
      700: "#5F0298",
      800: "#490274",
      900: "#330350",
      950: "#1D042D"
    },
    red: {
      100: "#FCE5E6",
      200: "#F7BFC1",
      300: "#F08083",
      400: "#E84045",
      500: "#E00007",
      600: "#B70006",
      700: "#8E0005",
      800: "#660104",
      900: "#3D0103",
      950: "#200204"
    },
    orange: {
      100: "#FEF3E5",
      200: "#FDE1BF",
      300: "#FBC280",
      400: "#F8A340",
      500: "#F68500",
      600: "#CB6E00",
      700: "#9F5701",
      800: "#743F01",
      900: "#482802",
      950: "#251602"
    },
    yellow: {
      100: "#FFF9E5",
      200: "#FFF1BF",
      300: "#FFE380",
      400: "#FFD440",
      500: "#FFC600",
      600: "#D2A300",
      700: "#A58001",
      800: "#785E01",
      900: "#4B3B02",
      950: "#261F03"
    },
    green: {
      100: "#EEF8E9",
      200: "#D5EFC8",
      300: "#AADF91",
      400: "#80CE5B",
      500: "#55BE24",
      600: "#469D1D",
      700: "#377C16",
      800: "#275C10",
      900: "#183B09",
      950: "#091A02"
    },
    blue: {
      100: "#E7EFFF",
      200: "#C3D7FF",
      300: "#87AEFF",
      400: "#4C86FF",
      500: "#105EFF",
      600: "#0D4ED2",
      700: "#0A3DA6",
      800: "#082D79",
      900: "#051C4C",
      950: "#041028"
    },
    "black-pearl": "#02020F",
    "athens-gray": "#F7F7FA",
    mystic: "#E6E6F0",
    vulcan: "#11111F",
    charade: "#242433",
    waterloo: "#77778C",
    anakiwa: "#93B6FF"
  };
  const config = {
    content: [
      "./.storybook/**/*.{js,jsx,ts,tsx}",
      "./src/**/*.{js,jsx,ts,tsx,mdx}",
      "./docs/**/*.{js,jsx,ts,tsx,mdx}"
    ],
    darkMode: "selector",
    theme: {
      fontFamily: {
        sans: ["Inter", "sans-serif"],
        mono: ["Fira Code", "monospace"]
      },
      fontSize: {
        sm: "0.75rem",
        // 12px
        base: "0.875rem",
        // 14px
        lg: "1rem",
        // 16px
        // Rest are defaults
        xl: "1.25rem",
        "2xl": "1.563rem",
        "3xl": "1.953rem",
        "4xl": "2.441rem",
        "5xl": "3.052rem",
        "6xl": "3.75rem",
        "7xl": "4.5rem",
        "8xl": "6rem",
        "9xl": "8rem"
      },
      extend: {
        colors: colorPalette,
        backgroundImage: {
          "bottom-border-glow": `radial-gradient(circle at center, ${colorPalette.anakiwa} 0, blue, transparent 100%)`,
          "button-gradient": "linear-gradient(283deg, #0808A5 0%, rgba(8, 8, 165, 0.00) 100%)",
          "button-gradient-hover": "linear-gradient(283deg, #44F 0%, rgba(23, 23, 255, 0.10) 100%)",
          "button-gradient-focus": "linear-gradient(283deg, #0D0DD2 0%, rgba(23, 23, 255, 0.10) 100%)"
        }
      }
    },
    plugins: [
      createThemes({
        light: {
          primary: {
            DEFAULT: colorPalette.blue[500],
            active: colorPalette.blue[500],
            hover: colorPalette.blue[600],
            inactive: colorPalette.gray[500]
          },
          secondary: {
            DEFAULT: colorPalette.blue[200],
            active: colorPalette.blue[200],
            hover: colorPalette.blue[300],
            inactive: colorPalette.waterloo
          },
          success: {
            DEFAULT: colorPalette.green[500],
            active: colorPalette.green[500],
            hover: colorPalette.green[600],
            background: colorPalette.green[100]
          },
          error: {
            DEFAULT: colorPalette.red[500],
            active: colorPalette.red[400],
            hover: colorPalette.red[600],
            background: colorPalette.red[100]
          },
          warning: {
            DEFAULT: colorPalette.orange[500],
            active: colorPalette.orange[500],
            hover: colorPalette.orange[600],
            background: colorPalette.orange[100]
          },
          info: {
            DEFAULT: colorPalette.blue[500],
            active: colorPalette.blue[500],
            hover: colorPalette.blue[600],
            background: colorPalette.blue[100]
          },
          panel: {
            // Panel backgrounds, such as cards, tables, popovers, dialogs, dropdown menus, etc.
            DEFAULT: colorPalette["white"],
            content: colorPalette["vulcan"],
            "secondary-content": colorPalette.gray[700],
            accent: colorPalette["mystic"]
          },
          surface: {
            // Form component backgrounds, such as text fields, checkboxes, select, etc.
            DEFAULT: colorPalette.gray[300],
            content: colorPalette.black,
            accent: colorPalette.blue[500],
            disabled: colors$1.gray[300]
          }
        },
        dark: {
          primary: {
            DEFAULT: colorPalette.blue[500],
            active: colorPalette.blue[500],
            hover: colorPalette.blue[400],
            inactive: colorPalette.blue[200]
          },
          secondary: {
            DEFAULT: colorPalette.charade,
            active: colorPalette.charade,
            hover: colorPalette.gray[700],
            inactive: colorPalette.gray[600]
          },
          success: {
            DEFAULT: colorPalette.green[500],
            active: colorPalette.green[500],
            hover: colorPalette.green[400],
            background: colorPalette.green[950]
          },
          error: {
            DEFAULT: colorPalette.red[500],
            active: colorPalette.red[500],
            hover: colorPalette.red[400],
            background: colorPalette.red[950]
          },
          warning: {
            DEFAULT: colorPalette.orange[500],
            active: colorPalette.orange[500],
            hover: colorPalette.orange[400],
            background: colorPalette.orange[950]
          },
          info: {
            DEFAULT: colorPalette.blue[500],
            active: colorPalette.blue[500],
            hover: colorPalette.blue[400],
            background: colorPalette.blue[950]
          },
          panel: {
            // Panel backgrounds, such as cards, tables, popovers, dialogs, dropdown menus, etc.
            DEFAULT: colorPalette["black-pearl"],
            content: colorPalette["athens-gray"],
            "secondary-content": colorPalette["waterloo"],
            accent: colorPalette["charade"]
          },
          surface: {
            // Form component backgrounds, such as text fields, checkboxes, select, etc.
            DEFAULT: colorPalette["charade"],
            content: colorPalette["athens-gray"],
            accent: colorPalette.blue[500],
            disabled: colors$1.gray[800]
          }
        }
      }),
      plugin$1(({ addVariant }) => {
        addVariant(
          "disabled-within",
          "&:has(input:is(:disabled),button:is(:disabled))"
        );
      })
    ]
  };
  const { theme: TWConfig } = resolveConfig$1(config);
  const baseTheme$s = {
    base: "inline-flex items-center w-full",
    label: {
      base: "ml-2.5 w-full",
      clickable: "cursor-pointer",
      sizes: {
        small: "text-sm",
        medium: "text-base",
        large: "text-lg"
      }
    },
    check: "",
    border: "",
    checkbox: "flex items-center justify-center cursor-pointer focus-visible:outline-none",
    disabled: "opacity-60 cursor-not-allowed",
    sizes: {
      small: "[&>svg]:w-3 [&>svg]:h-3",
      medium: "[&>svg]:w-4 [&>svg]:h-4",
      large: "[&>svg]:w-5 [&>svg]:h-5"
    }
  };
  const checkboxTheme = {
    ...baseTheme$s,
    checkbox: [baseTheme$s.checkbox, "fill-transparent border border-surface"].join(
      " "
    ),
    check: [baseTheme$s.check, "stroke-primary"].join(" "),
    label: {
      ...baseTheme$s.label,
      base: [baseTheme$s.label.base, "text-surface-content"].join(" ")
    },
    boxVariants: {
      hover: {
        strokeWidth: 2,
        stroke: TWConfig.colors.slate[400]
      },
      pressed: { scale: 0.95 },
      checked: {
        stroke: TWConfig.colors.primary["active"]
      },
      unchecked: {
        stroke: TWConfig.colors.slate[500]
      }
    }
  };
  const legacyCheckboxTheme = {
    ...baseTheme$s,
    checkbox: [baseTheme$s.checkbox, "fill-transparent"].join(" "),
    check: [baseTheme$s.check, "stroke-[var(--checkbox-check-stroke)]"].join(" "),
    label: {
      ...baseTheme$s.label,
      base: [
        baseTheme$s.label.base,
        "text-[var(--checkbox-label-color)] ml-[var(--spacing-md)]"
      ].join(" ")
    }
  };
  const Input = React.forwardRef(
    ({
      className,
      containerClassname,
      error,
      fullWidth,
      selectOnFocus,
      start,
      end,
      startAdornment,
      endAdornment,
      autoFocus,
      disabled,
      value,
      size = "medium",
      onFocus,
      onChange,
      onValueChange,
      onBlur,
      theme: customTheme,
      ...rest
    }, ref) => {
      const containerRef = React.useRef(null);
      const inputRef = React.useRef(null);
      const [focused, setFocused] = React.useState(false);
      React.useImperativeHandle(ref, () => ({
        inputRef,
        containerRef,
        blur: () => {
          var _a;
          return (_a = inputRef.current) == null ? void 0 : _a.blur();
        },
        focus: () => {
          var _a;
          return (_a = inputRef.current) == null ? void 0 : _a.focus();
        },
        select: () => {
          var _a;
          return (_a = inputRef.current) == null ? void 0 : _a.select();
        }
      }));
      React.useLayoutEffect(() => {
        if (autoFocus) {
          requestAnimationFrame(() => {
            var _a;
            return (_a = inputRef.current) == null ? void 0 : _a.focus();
          });
        }
      }, [autoFocus]);
      const theme2 = useComponentTheme("input", customTheme);
      return /* @__PURE__ */ jsxRuntime.jsxs(
        "div",
        {
          className: tailwindMerge.twMerge(
            theme2.base,
            focused && theme2.focused,
            fullWidth && theme2.fullWidth,
            error && theme2.error,
            theme2.sizes[size],
            disabled && theme2.disabled,
            containerClassname
          ),
          ref: containerRef,
          children: [
            (start || startAdornment) && /* @__PURE__ */ jsxRuntime.jsx("div", { className: tailwindMerge.twMerge(theme2.adornment.base, theme2.adornment.start), children: start ?? startAdornment }),
            /* @__PURE__ */ jsxRuntime.jsx(
              "input",
              {
                ...rest,
                ref: inputRef,
                value,
                disabled,
                className: tailwindMerge.twMerge(theme2.input, className),
                onFocus: (event) => {
                  if (selectOnFocus) {
                    event.target.select();
                  }
                  setFocused(true);
                  onFocus == null ? void 0 : onFocus(event);
                },
                onBlur: (event) => {
                  onBlur == null ? void 0 : onBlur(event);
                  setFocused(false);
                },
                onChange: (event) => {
                  onValueChange == null ? void 0 : onValueChange(event.target.value);
                  onChange == null ? void 0 : onChange(event);
                }
              }
            ),
            (end || endAdornment) && /* @__PURE__ */ jsxRuntime.jsx("div", { className: tailwindMerge.twMerge(theme2.adornment.base, theme2.adornment.end), children: end ?? endAdornment })
          ]
        }
      );
    }
  );
  const InlineInput = React.forwardRef(
    ({
      inputClassName,
      className,
      placeholder,
      value,
      theme: customTheme,
      ...props
    }, ref) => {
      const theme2 = useComponentTheme("input", customTheme);
      return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: cn("inline-grid", className), children: [
        /* @__PURE__ */ jsxRuntime.jsxs("span", { className: "invisible", style: { gridArea: " 1 / 1 " }, children: [
          !value && " ",
          typeof value === "string" ? !value ? placeholder == null ? void 0 : placeholder.replace(/ /g, " ") : value == null ? void 0 : value.replace(/ /g, " ") : value
        ] }),
        /* @__PURE__ */ jsxRuntime.jsx(
          "input",
          {
            ...props,
            size: 1,
            ref,
            style: { gridArea: " 1 / 1 " },
            type: "text",
            placeholder,
            value,
            className: cn(
              "border-none bg-transparent focus:outline-none",
              theme2.inline,
              inputClassName
            )
          }
        )
      ] });
    }
  );
  const DebouncedInput = React.forwardRef(
    ({ debounce = 100, value, onChange, onValueChange, ...rest }, ref) => {
      const timeoutRef = React.useRef(null);
      const [internalValue, setInternalValue] = React.useState(value);
      React.useEffect(() => {
        setInternalValue(value);
      }, [value]);
      return /* @__PURE__ */ jsxRuntime.jsx(
        Input,
        {
          ...rest,
          ref,
          value: internalValue,
          onKeyDown: (event) => {
            if (event.key === "Enter") {
              onValueChange == null ? void 0 : onValueChange(event.target.value);
              onChange == null ? void 0 : onChange(event);
            }
          },
          onChange: (event) => {
            setInternalValue(event.target.value);
            if (debounce) {
              clearTimeout(timeoutRef.current);
              timeoutRef.current = setTimeout(() => {
                onValueChange == null ? void 0 : onValueChange(event.target.value);
                onChange == null ? void 0 : onChange(event);
              }, debounce);
            } else {
              onValueChange == null ? void 0 : onValueChange(event.target.value);
              onChange == null ? void 0 : onChange(event);
            }
          }
        }
      );
    }
  );
  const baseTheme$r = {
    base: "flex relative flex-row items-center flex-nowrap box-border transition-colors rounded-sm",
    focused: "",
    input: "flex-1 font-normal font-sans bg-transparent border-0 p-0 m-0 disabled:pointer-events-none outline-none px-0.5 disabled:cursor-not-allowed disabled:text-disabled",
    inline: "bg-transparent border-0 outline-none",
    disabled: "",
    fullWidth: "w-full",
    error: "border-error",
    sizes: {
      small: "[&>input]:text-sm p-1 text-sm",
      medium: "[&>input]:text-base px-2.5 py-1.5 text-base",
      large: "[&>input]:text-lg p-5 text-lg"
    },
    adornment: {
      base: "flex items-center justify-center [&>svg]:w-4 [&>svg]:h-4 [&>svg]:current-color",
      start: "pr-1.5",
      end: "pl-1.5"
    }
  };
  const inputTheme = {
    ...baseTheme$r,
    base: [
      baseTheme$r.base,
      "bg-panel border border-surface text-surface-content"
    ].join(" "),
    focused: `${baseTheme$r.focused} after:bg-bottom-border-glow after:content-[""] after:absolute after:h-0.5 after:z-[2] after:rounded after:-bottom-px after:inset-x-0.5`,
    input: [baseTheme$r.input, " placeholder-accent"].join(" "),
    disabled: [baseTheme$r.disabled, "disabled-within:bg-dark-disabled"].join(" "),
    adornment: {
      ...baseTheme$r.adornment,
      base: [baseTheme$r.adornment.base, "text-surface-content"].join(" ")
    }
  };
  const legacyInputTheme = {
    ...baseTheme$r,
    base: [
      baseTheme$r.base,
      "bg-[var(--input-background)] rounded-[var(--input-border-radius)] [border:_var(--input-border)] focus-within:border-[var(--input-border-focus)]"
    ].join(" "),
    error: [baseTheme$r.error, "border-[var(--error-background)]"].join(" "),
    sizes: {
      small: "[padding:_var(--input-spacing-sm)]",
      medium: "[padding:_var(--input-spacing-md)]",
      large: "padding:_var(--input-spacing-lg)"
    },
    adornment: {
      base: [
        baseTheme$r.adornment.base,
        "[&>svg]:w-[var(--input-adornment-size)] [&>svg]:h-[var(--input-adornment-size)] [&>svg]:fill-[var(--input-adornment-fill)]"
      ].join(" "),
      start: "[padding-right:_calc(var(--list-item-spacing)_/_2)]",
      end: "[padding-left:_calc(var(--list-item-spacing)_/_2)]"
    },
    input: [
      baseTheme$r.input,
      "placeholder-[var(--input-color-placeholder)] "
    ].join(" "),
    disabled: [baseTheme$r.disabled, "text-[var(--disabled-color)]"].join(" ")
  };
  const RadioGroupContext = React.createContext({
    onChange: null,
    selectedValue: null
  });
  const VARIANTS = {
    check: { opacity: 1, scale: 1 },
    uncheck: { opacity: 0, scale: 0 }
  };
  const Radio = React.forwardRef(
    ({
      checked: isRadioChecked,
      label,
      disabled,
      onChange,
      onBlur,
      className,
      size = "medium",
      value,
      theme: customTheme,
      ...rest
    }, ref) => {
      const { onChange: onGroupValueChange, selectedValue } = React.useContext(RadioGroupContext);
      const checked = React.useMemo(() => {
        if (selectedValue === null) {
          return isRadioChecked;
        } else {
          return selectedValue === value;
        }
      }, [isRadioChecked, selectedValue, value]);
      const onValueChange = (checked2) => {
        onGroupValueChange == null ? void 0 : onGroupValueChange(value);
        onChange == null ? void 0 : onChange(checked2);
      };
      const theme2 = useComponentTheme("radio", customTheme);
      return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: cn(theme2.base, className), children: [
        /* @__PURE__ */ jsxRuntime.jsx(
          "div",
          {
            ...rest,
            ref,
            tabIndex: 0,
            className: cn(theme2.radio.base, theme2.sizes[size], {
              [theme2.radio.checked]: checked,
              [theme2.radio.disabled]: disabled
            }),
            onClick: () => {
              if (!disabled) {
                onValueChange(!checked);
              }
            },
            onBlur,
            onKeyDown: (event) => {
              if (!disabled && event.code === "Space") {
                onValueChange(!checked);
              }
            },
            children: /* @__PURE__ */ jsxRuntime.jsx(
              framerMotion.motion.div,
              {
                className: cn(theme2.indicator.base, theme2.indicator.sizes[size], {
                  [theme2.indicator.disabled]: disabled
                }),
                initial: !disabled ? { opacity: 0, scale: 0.5 } : {},
                variants: VARIANTS,
                animate: checked ? "check" : "uncheck",
                transition: { duration: 0.15 }
              }
            )
          }
        ),
        label && /* @__PURE__ */ jsxRuntime.jsx(
          "span",
          {
            className: cn(theme2.label.base, {
              [theme2.label.checked]: checked,
              [theme2.label.disabled]: disabled,
              [theme2.label.clickable]: !disabled
            }),
            onClick: () => {
              if (!disabled) {
                onValueChange(!checked);
              }
            },
            children: label
          }
        )
      ] });
    }
  );
  const RadioGroup = ({
    children,
    className,
    onChange,
    selectedValue: defaultValue
  }) => {
    const [selectedValue, setSelectedValue] = React.useState(defaultValue);
    const handleValueChange = React.useCallback(
      (value) => {
        setSelectedValue(value);
        onChange(value);
      },
      [onChange]
    );
    const values = React.useMemo(
      () => ({
        onChange: handleValueChange,
        selectedValue
      }),
      [handleValueChange, selectedValue]
    );
    return /* @__PURE__ */ jsxRuntime.jsx(RadioGroupContext.Provider, { value: values, children });
  };
  const baseTheme$q = {
    base: "box-border leading-none group",
    radio: {
      base: "will-change-[border-color] inline-flex justify-center items-center box-border align-middle rounded-[100%] bg-transparent border cursor-pointer",
      disabled: "cursor-not-allowed",
      checked: ""
    },
    indicator: {
      base: "rounded-[100%]",
      disabled: "cursor-not-allowed",
      sizes: {
        small: "w-2 h-2",
        medium: "w-2.5 h-2.5",
        large: "w-3.5 h-3.5"
      }
    },
    label: {
      base: "w-full align-middle ml-2.5",
      clickable: "cursor-pointer hover:text-blue-300",
      disabled: "cursor-not-allowed",
      checked: ""
    },
    sizes: {
      small: "w-3 h-3",
      medium: "w-4 h-4",
      large: "w-5 h-5"
    }
  };
  const radioTheme = {
    ...baseTheme$q,
    label: {
      ...baseTheme$q.label,
      base: [baseTheme$q.label.base, "text-panel-secondary-content"].join(" "),
      checked: [baseTheme$q.label.checked, "text-panel-content"].join(" "),
      disabled: [baseTheme$q.label.disabled, "!text-secondary-inactive/40"].join(
        " "
      )
    },
    radio: {
      ...baseTheme$q.radio,
      base: [
        baseTheme$q.radio.base,
        "border-surface group-hover:border-primary-hover hover:border-primary-hover"
      ].join(" "),
      checked: [
        baseTheme$q.radio.checked,
        "border-primary-active group-hover:border-primary-hover"
      ].join(" "),
      disabled: [baseTheme$q.radio.disabled, "!border-secondary-inactive"].join(" ")
    },
    indicator: {
      ...baseTheme$q.indicator,
      base: [
        baseTheme$q.indicator.base,
        "bg-primary group-hover:bg-primary-hover"
      ].join(" "),
      disabled: [baseTheme$q.indicator.disabled, "!bg-secondary-inactive"].join(" ")
    }
  };
  const legacyRadioTheme = {
    ...baseTheme$q,
    label: {
      ...baseTheme$q.label,
      base: [
        baseTheme$q.label.base,
        "text-[var(--radio-label-color)] ml-[var(--spacing-md)]"
      ].join(" ")
    },
    radio: {
      ...baseTheme$q.radio,
      base: [
        baseTheme$q.radio.base,
        "bg-[var(--radio-background)] [border:_var(--radio-stroke-size)_solid_var(--radio-stroke)]"
      ].join(" "),
      checked: [
        baseTheme$q.radio.checked,
        "border-[var(--radio-stroke-active)]"
      ].join(" ")
    },
    indicator: {
      ...baseTheme$q.indicator,
      base: [baseTheme$q.indicator.base, "bg-[var(--radio-indicator-active)]"].join(
        " "
      ),
      sizes: {
        small: "w-[var(--radio-indicator-size,_6px)] h-[var(--radio-indicator-size,_6px)]",
        medium: "w-[var(--radio-indicator-size,_8px)] h-[var(--radio-indicator-size,_8px)]",
        large: "w-[var(--radio-indicator-size,_10px)] h-[var(--radio-indicator-size,_10px)]"
      }
    }
  };
  const RangeTooltip = ({ children, visible }) => {
    const theme2 = useComponentTheme("range");
    return /* @__PURE__ */ jsxRuntime.jsx(framerMotion.AnimatePresence, { children: visible && /* @__PURE__ */ jsxRuntime.jsx(
      framerMotion.motion.div,
      {
        className: theme2.tooltip,
        initial: {
          opacity: 0,
          scale: 0.3,
          translateX: "-50%"
        },
        animate: {
          opacity: 1,
          scale: 1
        },
        exit: { opacity: 0, scale: 0.3 },
        children
      }
    ) });
  };
  const RangeDouble = ({
    disabled,
    style,
    className,
    handleClassName,
    min,
    max,
    value,
    valueDisplay = "hover",
    valueFormat = (value2) => value2.toLocaleString(),
    onChange,
    theme: customTheme,
    step = 1
  }) => {
    const minValueBetween = step;
    const [minValue, maxValue] = value;
    const initialMinValue = Math.max(minValue, min);
    const initalMaxValue = Math.min(
      maxValue < initialMinValue + minValueBetween ? initialMinValue + minValueBetween : maxValue,
      max
    );
    const [currentMin, setCurrentMin] = React.useState(initialMinValue);
    const [currentMax, setCurrentMax] = React.useState(initalMaxValue);
    const range = React.useRef(null);
    const [rangeWidth, setRangeWidth] = React.useState(0);
    const [rangeLeft, setRangeLeft] = React.useState(0);
    const minX = framerMotion.useMotionValue(0);
    const maxX = framerMotion.useMotionValue(0);
    const fractionDigits = React.useMemo(
      () => {
        var _a, _b;
        return ((_b = (_a = step.toString()) == null ? void 0 : _a[1]) == null ? void 0 : _b.length) || 0;
      },
      [step]
    );
    const getValue = (xPosition) => {
      const draggedWidth = xPosition - rangeLeft;
      const draggedWidthPercentage = draggedWidth * 100 / rangeWidth;
      const scaledStep = step / (max - min) * 100;
      const scaledValue = Math.round(draggedWidthPercentage / scaledStep) * scaledStep;
      const scaledValueWithStep = scaledValue / 100 * (max - min) + min;
      const rawValue = Math.round(scaledValueWithStep / step) * step;
      const newValue = fractionDigits > 0 ? +rawValue.toFixed(fractionDigits) : rawValue;
      return Math.max(min, Math.min(newValue, max));
    };
    const getPosition = React.useCallback(
      (value2) => (value2 - min) / (max - min) * rangeWidth,
      [min, max, rangeWidth]
    );
    const minSpaceBetween = getPosition(min + minValueBetween);
    const updateCurrentMin = React.useCallback(
      (newMin, notifyChange = false) => {
        newMin = Math.max(newMin, min);
        if (newMin <= currentMax - minValueBetween) {
          setCurrentMin(newMin);
          minX.set(getPosition(newMin));
          notifyChange && (onChange == null ? void 0 : onChange([newMin, currentMax]));
        }
      },
      [currentMax, min, minX, getPosition, onChange, minValueBetween]
    );
    const updateCurrentMax = React.useCallback(
      (newMax, notifyChange = false) => {
        newMax = Math.min(newMax, max);
        if (newMax >= currentMin + minValueBetween) {
          setCurrentMax(newMax);
          maxX.set(getPosition(newMax));
          notifyChange && (onChange == null ? void 0 : onChange([currentMin, newMax]));
        }
      },
      [currentMin, max, maxX, getPosition, onChange, minValueBetween]
    );
    React.useLayoutEffect(() => {
      const updateRange = () => {
        const rect = range.current.getBoundingClientRect();
        setRangeWidth(rect.width);
        setRangeLeft(rect.left);
        minX.set(getPosition(currentMin));
        maxX.set(getPosition(currentMax));
      };
      updateRange();
      requestAnimationFrame(updateRange);
    }, [currentMin, minX, currentMax, maxX, getPosition]);
    React.useEffect(() => {
      setCurrentMin(initialMinValue);
      setCurrentMax(initalMaxValue);
    }, [initalMaxValue, initialMinValue]);
    const [draggingMin, setDraggingMin] = React.useState(false);
    const [focusedMin, setFocusedMin] = React.useState(false);
    const [hoveringMin, setHoveringMin] = React.useState(false);
    const minTooltipVisible = draggingMin || focusedMin || hoveringMin;
    const minPercentage = (currentMin - min) / (max - min) * 100;
    const [draggingMax, setDraggingMax] = React.useState(false);
    const [focusedMax, setFocusedMax] = React.useState(false);
    const [hoveringMax, setHoveringMax] = React.useState(false);
    const maxTooltipVisible = draggingMax || focusedMax || hoveringMax;
    const maxPercentage = (currentMax - min) / (max - min) * 100;
    const theme2 = useComponentTheme("range", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "div",
      {
        style,
        ref: range,
        className: tailwindMerge.twMerge(theme2.base, disabled && theme2.disabled, className),
        children: [
          /* @__PURE__ */ jsxRuntime.jsxs(
            framerMotion.motion.div,
            {
              className: tailwindMerge.twMerge(theme2.drag, handleClassName),
              drag: !disabled ? "x" : null,
              dragMomentum: false,
              style: { x: minX },
              onMouseEnter: () => setHoveringMin(true),
              onMouseLeave: () => setHoveringMin(false),
              onDragStart: () => setDraggingMin(true),
              onDrag: (e) => updateCurrentMin(getValue(e.clientX)),
              onDragEnd: (e) => {
                updateCurrentMin(getValue(e.clientX), true);
                setDraggingMin(false);
              },
              dragConstraints: {
                left: 0,
                right: maxX.get() - minSpaceBetween
              },
              dragElastic: false,
              children: [
                /* @__PURE__ */ jsxRuntime.jsx(
                  "div",
                  {
                    className: tailwindMerge.twMerge(
                      theme2.inputWrapper.base,
                      disabled && theme2.inputWrapper.disabled
                    ),
                    children: /* @__PURE__ */ jsxRuntime.jsx(
                      "input",
                      {
                        type: "range",
                        className: theme2.input,
                        min,
                        max,
                        value: currentMin,
                        onChange: (e) => updateCurrentMin(e.target.valueAsNumber),
                        onBlur: () => setFocusedMin(false),
                        onFocus: () => setFocusedMin(true),
                        disabled
                      }
                    )
                  }
                ),
                valueDisplay === "hover" ? /* @__PURE__ */ jsxRuntime.jsx(RangeTooltip, { visible: minTooltipVisible, children: valueFormat(currentMin) }) : valueFormat(currentMin)
              ]
            }
          ),
          /* @__PURE__ */ jsxRuntime.jsxs(
            framerMotion.motion.div,
            {
              className: tailwindMerge.twMerge(theme2.drag),
              drag: !disabled ? "x" : null,
              dragMomentum: false,
              style: { x: maxX },
              onMouseEnter: () => setHoveringMax(true),
              onMouseLeave: () => setHoveringMax(false),
              onDragStart: () => setDraggingMax(true),
              onDrag: (e) => updateCurrentMax(getValue(e.clientX)),
              onDragEnd: (e) => {
                updateCurrentMax(getValue(e.clientX), true);
                setDraggingMax(false);
              },
              dragConstraints: {
                left: minX.get() + minSpaceBetween,
                right: rangeWidth
              },
              dragElastic: false,
              children: [
                /* @__PURE__ */ jsxRuntime.jsx(
                  "div",
                  {
                    className: tailwindMerge.twMerge(
                      theme2.inputWrapper.base,
                      disabled && theme2.inputWrapper.disabled
                    ),
                    children: /* @__PURE__ */ jsxRuntime.jsx(
                      "input",
                      {
                        type: "range",
                        className: theme2.input,
                        min,
                        max,
                        value: currentMax,
                        onChange: (e) => updateCurrentMax(e.target.valueAsNumber),
                        onBlur: () => setFocusedMax(false),
                        onFocus: () => setFocusedMax(true),
                        disabled
                      }
                    )
                  }
                ),
                valueDisplay === "hover" ? /* @__PURE__ */ jsxRuntime.jsx(RangeTooltip, { visible: maxTooltipVisible, children: valueFormat(currentMax) }) : valueFormat(currentMax)
              ]
            }
          ),
          /* @__PURE__ */ jsxRuntime.jsx(
            "div",
            {
              className: cn(theme2.rangeHighlight.base, {
                [theme2.rangeHighlight.disabled]: disabled
              }),
              style: {
                width: `${maxPercentage - minPercentage}%`,
                marginLeft: `${minPercentage}%`
              }
            }
          )
        ]
      }
    );
  };
  const RangeSingle = ({
    disabled,
    style,
    handleClassName,
    onChange,
    className,
    min,
    max,
    value,
    valueDisplay = "hover",
    valueFormat = (value2) => value2.toLocaleString(),
    step = 1,
    showHighlight = false,
    theme: customTheme
  }) => {
    const [currentValue, setCurrentValue] = React.useState(value);
    const range = React.useRef(null);
    const [rangeWidth, setRangeWidth] = React.useState(0);
    const [rangeLeft, setRangeLeft] = React.useState(0);
    const valueX = framerMotion.useMotionValue(0);
    const fractionDigits = React.useMemo(
      () => {
        var _a, _b;
        return ((_b = (_a = step.toString()) == null ? void 0 : _a[1]) == null ? void 0 : _b.length) || 0;
      },
      [step]
    );
    const getValue = (xPosition) => {
      const draggedWidth = xPosition - rangeLeft;
      const draggedWidthPercentage = draggedWidth * 100 / rangeWidth;
      const scaledStep = step / (max - min) * 100;
      const scaledValue = Math.round(draggedWidthPercentage / scaledStep) * scaledStep;
      const rawValue = min + (max - min) * scaledValue / 100;
      const newValue = fractionDigits > 0 ? +rawValue.toFixed(fractionDigits) : rawValue;
      return Math.max(min, Math.min(newValue, max));
    };
    const getPosition = React.useCallback(
      (value2) => (value2 - min) / (max - min) * rangeWidth,
      [min, max, rangeWidth]
    );
    const updateCurrentValue = React.useCallback(
      (newValue) => {
        newValue = Math.max(newValue, min);
        newValue = Math.min(newValue, max);
        setCurrentValue(newValue);
        valueX.set(getPosition(newValue));
        onChange == null ? void 0 : onChange(newValue);
      },
      [min, max, valueX, getPosition, onChange]
    );
    React.useEffect(() => {
      var _a, _b;
      setRangeWidth(range.current.offsetWidth);
      setRangeLeft(((_b = (_a = range.current) == null ? void 0 : _a.getBoundingClientRect()) == null ? void 0 : _b.left) || 0);
      valueX.set(getPosition(currentValue));
    }, [range, currentValue, valueX, getPosition]);
    const [dragging, setDragging] = React.useState(false);
    const [hovering, setHovering] = React.useState(false);
    const [focused, setFocused] = React.useState(false);
    const tooltipVisible = dragging || focused || hovering;
    const maxPercentage = (currentValue - min) / (max - min) * 100;
    const theme2 = useComponentTheme("range", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "div",
      {
        ref: range,
        style,
        className: tailwindMerge.twMerge(theme2.base, disabled && theme2.disabled, className),
        children: [
          /* @__PURE__ */ jsxRuntime.jsxs(
            framerMotion.motion.div,
            {
              className: tailwindMerge.twMerge(theme2.drag, handleClassName),
              drag: !disabled ? "x" : null,
              dragMomentum: false,
              style: { x: valueX },
              onMouseEnter: () => setHovering(true),
              onMouseLeave: () => setHovering(false),
              onDragStart: () => setDragging(true),
              onDrag: (e) => updateCurrentValue(getValue(e.clientX)),
              onDragEnd: (e) => {
                updateCurrentValue(getValue(e.clientX));
                setDragging(false);
              },
              dragConstraints: {
                left: 0,
                right: rangeWidth
              },
              children: [
                /* @__PURE__ */ jsxRuntime.jsx(
                  "div",
                  {
                    className: tailwindMerge.twMerge(
                      theme2.inputWrapper.base,
                      disabled && theme2.inputWrapper.disabled
                    ),
                    children: /* @__PURE__ */ jsxRuntime.jsx(
                      "input",
                      {
                        type: "range",
                        className: theme2.input,
                        min,
                        max,
                        step: 0.5,
                        value: currentValue,
                        disabled,
                        onChange: (e) => updateCurrentValue(e.target.valueAsNumber),
                        onBlur: () => setFocused(false),
                        onFocus: () => setFocused(true)
                      }
                    )
                  }
                ),
                valueDisplay === "hover" ? /* @__PURE__ */ jsxRuntime.jsx(RangeTooltip, { visible: tooltipVisible, children: valueFormat(currentValue) }) : valueFormat(currentValue)
              ]
            }
          ),
          showHighlight && /* @__PURE__ */ jsxRuntime.jsx(
            "div",
            {
              className: cn(theme2.rangeHighlight.base, {
                [theme2.rangeHighlight.disabled]: disabled
              }),
              style: {
                width: `${maxPercentage}%`
              }
            }
          )
        ]
      }
    );
  };
  const baseTheme$p = {
    base: "relative box-border w-full h-0.5",
    drag: "absolute w-4 h-4 -left-2 -top-2 rounded-full",
    inputWrapper: {
      base: "cursor-pointer inline-block relative h-full w-full rounded-full",
      disabled: "cursor-not-allowed"
    },
    rangeHighlight: {
      base: "pointer-events-none h-0.5",
      disabled: "cursor-not-allowed"
    },
    disabled: "cursor-not-allowed",
    input: "absolute left-[-9999px]",
    // The hidden input used for keyboard controls
    tooltip: "absolute top-[-45px] -translate-x-2/4 whitespace-nowrap text-center left-2/4 rounded-lg p-2.5"
  };
  const rangeTheme = {
    ...baseTheme$p,
    base: [baseTheme$p.base, "bg-surface light:bg-gray-200"].join(" "),
    inputWrapper: {
      ...baseTheme$p.inputWrapper,
      base: [
        baseTheme$p.inputWrapper.base,
        "bg-primary-active hover:bg-primary-hover shadow-[0px_4px_4px_0px_rgba(0,0,0,0.20)]"
      ].join(" "),
      disabled: [
        baseTheme$p.inputWrapper.disabled,
        "bg-secondary-inactive hover:bg-secondary-inactive"
      ].join(" ")
    },
    rangeHighlight: {
      base: [baseTheme$p.rangeHighlight.base, "bg-primary-active"].join(" "),
      disabled: [baseTheme$p.rangeHighlight.disabled, "bg-secondary-inactive"].join(
        " "
      )
    },
    tooltip: [baseTheme$p.tooltip, "text-surface-content bg-surface"].join(" ")
  };
  const legacyRangeTheme = {
    ...baseTheme$p,
    base: [
      baseTheme$p.base,
      "h-[var(--range-track-size)] bg-[var(--range-track-background)] rounded-[var(--range-track-border-radius)]"
    ].join(" "),
    drag: [
      baseTheme$p.drag,
      "top-[calc(-1_*_(var(--range-handle-size)_-_var(--range-track-size))_/_2)] left-[calc(-1_*_var(--range-handle-size)_/_2)] w-[var(--range-handle-size)] h-[var(--range-handle-size)] bg-[var(--range-handle-background)] rounded-[var(--range-handle-border-radius)]"
    ].join(" "),
    rangeHighlight: {
      ...baseTheme$p.rangeHighlight,
      base: [
        baseTheme$p.rangeHighlight.base,
        "h-[var(--range-track-size)] bg-[var(--range-track-active-background)]"
      ].join(" ")
    },
    tooltip: [
      baseTheme$p.tooltip,
      "rounded-[var(--border-radius-md)] [padding:_var(--spacing-md)] bg-[var(--tooltip-background)] text-[var(--tooltip-color)]"
    ].join(" ")
  };
  const DownArrowIcon$1 = () => /* @__PURE__ */ jsxRuntime.jsx(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      x: "0px",
      y: "0px",
      width: "50",
      height: "50",
      viewBox: "0 0 32 32",
      children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M 4.21875 10.78125 L 2.78125 12.21875 L 15.28125 24.71875 L 16 25.40625 L 16.71875 24.71875 L 29.21875 12.21875 L 27.78125 10.78125 L 16 22.5625 Z" })
    }
  );
  const CloseIcon = ({ height = 32, width = 32 }) => /* @__PURE__ */ jsxRuntime.jsx(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      x: "0px",
      y: "0px",
      width,
      height,
      viewBox: "0 0 32 32",
      fill: "currentColor",
      children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M 7.21875 5.78125 L 5.78125 7.21875 L 14.5625 16 L 5.78125 24.78125 L 7.21875 26.21875 L 16 17.4375 L 24.78125 26.21875 L 26.21875 24.78125 L 17.4375 16 L 26.21875 7.21875 L 24.78125 5.78125 L 16 14.5625 Z" })
    }
  );
  const DotsLoader = ({
    className,
    size = "medium",
    speed = 0.2,
    theme: customTheme
  }) => {
    const theme2 = useComponentTheme("dotsLoader", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsx(framerMotion.motion.div, { className: tailwindMerge.twMerge(theme2.base, className), children: [...Array(3)].map((_, i) => /* @__PURE__ */ jsxRuntime.jsx(
      framerMotion.motion.div,
      {
        className: tailwindMerge.twMerge(theme2.dot, theme2.sizes[size]),
        animate: {
          opacity: [0, 1, 0],
          scale: [1, 2, 2, 1, 1]
        },
        transition: {
          duration: speed * 4,
          ease: "easeInOut",
          times: [0, 0.2, 0.5, 0.8, 1],
          repeat: Infinity,
          repeatDelay: speed,
          delay: speed * i
        }
      },
      i
    )) });
  };
  const RefreshIcon = () => /* @__PURE__ */ jsxRuntime.jsx(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      width: "64px",
      height: "64px",
      children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M 16 4 C 10.886719 4 6.617188 7.160156 4.875 11.625 L 6.71875 12.375 C 8.175781 8.640625 11.710938 6 16 6 C 19.242188 6 22.132813 7.589844 23.9375 10 L 20 10 L 20 12 L 27 12 L 27 5 L 25 5 L 25 8.09375 C 22.808594 5.582031 19.570313 4 16 4 Z M 25.28125 19.625 C 23.824219 23.359375 20.289063 26 16 26 C 12.722656 26 9.84375 24.386719 8.03125 22 L 12 22 L 12 20 L 5 20 L 5 27 L 7 27 L 7 23.90625 C 9.1875 26.386719 12.394531 28 16 28 C 21.113281 28 25.382813 24.839844 27.125 20.375 Z" })
    }
  );
  const SelectInputChip = ({
    option,
    disabled,
    clearable,
    className,
    maxLength = 20,
    closeIcon = /* @__PURE__ */ jsxRuntime.jsx(CloseIcon, {}),
    onTagKeyDown,
    onSelectedChange,
    theme: customTheme
  }) => {
    const origLabel = option.inputLabel || option.children;
    const label = typeof origLabel === "string" ? ellipsize(origLabel, maxLength) : origLabel;
    const { selectInput: theme2 } = useComponentTheme(
      "select",
      customTheme
    );
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "span",
      {
        className: tailwindMerge.twMerge(
          theme2.chip.base,
          theme2.chip.hover,
          theme2.chip.focused,
          theme2.chip.disabled,
          className,
          "select-input-chip"
        ),
        title: origLabel,
        tabIndex: -1,
        onKeyDown: (event) => onTagKeyDown(event, option),
        children: [
          label,
          !disabled && clearable && /* @__PURE__ */ jsxRuntime.jsx(
            "button",
            {
              type: "button",
              onClick: () => onSelectedChange(option),
              className: tailwindMerge.twMerge(theme2.chip.removeButton),
              children: closeIcon
            }
          )
        ]
      }
    );
  };
  const horiztonalArrowKeys = ["ArrowLeft", "ArrowRight"];
  const verticalArrowKeys = ["ArrowUp", "ArrowDown"];
  const actionKeys = [...verticalArrowKeys, "Enter", "Escape"];
  const SelectInput = ({
    reference,
    autoFocus,
    selectedOption,
    disabled,
    placeholder,
    filterable,
    id: id2,
    name: name2,
    className,
    activeClassName,
    inputText,
    required,
    loading,
    clearable,
    multiple,
    refreshable,
    error,
    menuDisabled,
    menuOpen,
    refreshIcon = /* @__PURE__ */ jsxRuntime.jsx(RefreshIcon, {}),
    closeIcon = /* @__PURE__ */ jsxRuntime.jsx(CloseIcon, {}),
    expandIcon = /* @__PURE__ */ jsxRuntime.jsx(DownArrowIcon$1, {}),
    loadingIcon = /* @__PURE__ */ jsxRuntime.jsx(DotsLoader, { size: "small" }),
    closeOnSelect,
    onSelectedChange,
    onKeyDown,
    onKeyUp,
    onExpandClick,
    onInputChange,
    onFocus,
    onBlur,
    onRefresh,
    onPaste,
    chip = /* @__PURE__ */ jsxRuntime.jsx(SelectInputChip, {}),
    theme: customTheme
  }) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
    const { selectInput: theme2 } = useComponentTheme(
      "select",
      customTheme
    );
    const containerRef = React.useRef(null);
    const inputRef = React.useRef(null);
    const hasValue = multiple && (selectedOption == null ? void 0 : selectedOption.length) > 0 || !multiple && selectedOption;
    const placeholderText = hasValue ? "" : placeholder;
    const showClear = clearable && !disabled && hasValue;
    React.useImperativeHandle(reference, () => ({
      containerRef,
      inputRef,
      focus: () => focusInput()
    }));
    const inputTextValue = React.useMemo(() => {
      if (!inputText && hasValue) {
        if (!Array.isArray(selectedOption)) {
          const singleOption = selectedOption;
          if (!singleOption.inputLabel) {
            return singleOption.children;
          }
        }
        return "";
      }
      return inputText;
    }, [hasValue, inputText, selectedOption]);
    const onClearValues = React.useCallback(
      (event) => {
        if (closeOnSelect) {
          event.stopPropagation();
        }
        onSelectedChange(null);
      },
      [onSelectedChange, closeOnSelect]
    );
    const focusInput = React.useCallback(() => {
      const input = inputRef.current;
      if (input) {
        if (input.value) {
          const len = input.value.length;
          setTimeout(() => input.setSelectionRange(len, len));
          input.focus();
        } else {
          input.focus();
        }
      }
    }, []);
    const onInputFocus = React.useCallback(
      (event) => {
        if (!multiple && filterable && selectedOption) {
          event.preventDefault();
          event.stopPropagation();
          focusInput();
        }
        onFocus == null ? void 0 : onFocus(event);
      },
      [filterable, focusInput, multiple, onFocus, selectedOption]
    );
    const onContainerClick = React.useCallback(
      (event) => {
        if (!disabled) {
          focusInput();
        }
      },
      [disabled, focusInput]
    );
    const removeLastValue = React.useCallback(() => {
      if (multiple) {
        const selectedOptions = selectedOption;
        onSelectedChange(selectedOptions[selectedOptions.length - 1]);
      } else {
        onSelectedChange(null);
      }
    }, [multiple, onSelectedChange, selectedOption]);
    const onInputKeyDown = React.useCallback(
      (event) => {
        const key = event.key;
        const isActionKey = actionKeys.includes(key);
        if (isActionKey) {
          event.preventDefault();
          event.stopPropagation();
        }
        if (clearable && key === "Backspace" && hasValue) {
          if (!multiple || multiple && !inputText) {
            event.preventDefault();
            event.stopPropagation();
            removeLastValue();
          }
        }
        onKeyDown == null ? void 0 : onKeyDown(event);
      },
      [clearable, hasValue, inputText, multiple, onKeyDown, removeLastValue]
    );
    const onInputKeyUp = React.useCallback(
      (event) => {
        const key = event.key;
        const isActionKey = actionKeys.includes(key);
        const isHorzKey = horiztonalArrowKeys.includes(key);
        if (!filterable && !isActionKey || isHorzKey) {
          event.preventDefault();
          event.stopPropagation();
        } else {
          onKeyUp == null ? void 0 : onKeyUp(event);
        }
      },
      [filterable, onKeyUp]
    );
    const onChange = React.useCallback(
      (event) => {
        if (filterable) {
          onInputChange(event);
        }
      },
      [filterable, onInputChange]
    );
    const onTagKeyDown = React.useCallback(
      (event, option) => {
        const key = event.key;
        if (key === "Backspace" && !disabled && clearable) {
          onSelectedChange(option);
        }
      },
      [clearable, disabled, onSelectedChange]
    );
    const renderPrefix = React.useCallback(() => {
      var _a2, _b2;
      if (multiple) {
        const multipleOptions = selectedOption;
        if (multipleOptions == null ? void 0 : multipleOptions.length) {
          return /* @__PURE__ */ jsxRuntime.jsx(
            "div",
            {
              className: tailwindMerge.twMerge(
                theme2.prefix,
                multiple && ((_a2 = theme2.multiple) == null ? void 0 : _a2.prefix),
                "select-input-value"
              ),
              children: multipleOptions.map((option) => /* @__PURE__ */ jsxRuntime.jsx(
                CloneElement,
                {
                  element: chip,
                  option,
                  clearable,
                  disabled,
                  closeIcon,
                  onSelectedChange,
                  onTagKeyDown
                },
                option.value
              ))
            }
          );
        }
      } else {
        const singleOption = selectedOption;
        if ((singleOption == null ? void 0 : singleOption.inputLabel) && !inputText) {
          return /* @__PURE__ */ jsxRuntime.jsx(
            "div",
            {
              className: tailwindMerge.twMerge(
                theme2.prefix,
                (_b2 = theme2.single) == null ? void 0 : _b2.prefix,
                "select-input-value"
              ),
              children: singleOption == null ? void 0 : singleOption.inputLabel
            }
          );
        }
      }
      return null;
    }, [
      chip,
      clearable,
      closeIcon,
      disabled,
      inputText,
      multiple,
      onSelectedChange,
      onTagKeyDown,
      selectedOption,
      theme2.multiple,
      theme2.prefix,
      theme2.single
    ]);
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "div",
      {
        ref: containerRef,
        className: tailwindMerge.twMerge(
          theme2.base,
          disabled && theme2.disabled,
          !filterable && theme2.unfilterable,
          error && theme2.error,
          ...menuOpen ? [activeClassName, theme2.open] : [],
          className
        ),
        onClick: onContainerClick,
        children: [
          /* @__PURE__ */ jsxRuntime.jsxs(
            "div",
            {
              className: tailwindMerge.twMerge(
                theme2.inputContainer,
                multiple && ((_a = theme2.multiple) == null ? void 0 : _a.inputContainer),
                !multiple && ((_b = theme2.single) == null ? void 0 : _b.inputContainer)
              ),
              onClick: onInputFocus,
              children: [
                renderPrefix(),
                /* @__PURE__ */ jsxRuntime.jsx(
                  InlineInput,
                  {
                    ref: inputRef,
                    id: id2,
                    name: name2,
                    disabled,
                    required,
                    autoFocus,
                    placeholder: placeholderText,
                    inputClassName: tailwindMerge.twMerge(
                      theme2.input,
                      theme2.placeholder,
                      "select-input-input"
                    ),
                    value: inputTextValue,
                    autoCorrect: "off",
                    spellCheck: "false",
                    autoComplete: "off",
                    onKeyDown: onInputKeyDown,
                    onKeyUp: onInputKeyUp,
                    onChange,
                    onFocus: onInputFocus,
                    onBlur,
                    onPaste,
                    placeholderIsMinWidth: false
                  }
                )
              ]
            }
          ),
          /* @__PURE__ */ jsxRuntime.jsxs("div", { className: (_c = theme2.suffix) == null ? void 0 : _c.container, children: [
            refreshable && !loading && /* @__PURE__ */ jsxRuntime.jsx(
              "button",
              {
                type: "button",
                title: "Refresh Options",
                disabled,
                className: tailwindMerge.twMerge(
                  (_d = theme2.suffix) == null ? void 0 : _d.button,
                  (_e = theme2.suffix) == null ? void 0 : _e.refresh,
                  "select-input-refresh"
                ),
                onClick: onRefresh,
                children: refreshIcon
              }
            ),
            loading && /* @__PURE__ */ jsxRuntime.jsx("div", { className: (_f = theme2.suffix) == null ? void 0 : _f.loader, children: loadingIcon }),
            showClear && /* @__PURE__ */ jsxRuntime.jsx(
              "button",
              {
                type: "button",
                title: "Clear selection",
                disabled,
                className: tailwindMerge.twMerge(
                  (_g = theme2.suffix) == null ? void 0 : _g.button,
                  (_h = theme2.suffix) == null ? void 0 : _h.close,
                  "select-input-clear"
                ),
                onClick: onClearValues,
                children: closeIcon
              }
            ),
            !menuDisabled && /* @__PURE__ */ jsxRuntime.jsx(
              "button",
              {
                type: "button",
                title: "Toggle options menu",
                disabled,
                className: tailwindMerge.twMerge(
                  (_i = theme2.suffix) == null ? void 0 : _i.button,
                  (_j = theme2.suffix) == null ? void 0 : _j.expand,
                  "select-input-toggle"
                ),
                onClick: onExpandClick,
                tabIndex: -1,
                children: expandIcon
              }
            )
          ] })
        ]
      }
    );
  };
  const baseTheme$o = {
    base: "flex flex-nowrap items-center box-border border rounded py-1.5 px-3 ",
    inputContainer: "flex-wrap flex items-center overflow-hidden flex-1 max-w-full [&>div]:max-w-full",
    input: "p-0 bg-transparent text-xs text-ellipsis align-middle max-w-full read-only:cursor-not-allowed focus:outline-none disabled:text-disabled",
    placeholder: "",
    prefix: "overflow-hidden whitespace-nowrap text-ellipsis",
    suffix: {
      container: "flex items-center justify-center",
      button: "disabled:cursor-not-allowed",
      refresh: "mr-1.5 [&>svg]:w-4 [&>svg]:h-4 [&>svg]:fill-panel-secondary-content",
      loader: "mr-2.5",
      close: "mr-1.5 [&>svg]:w-4 [&>svg]:h-4 [&>svg]:fill-panel-secondary-content",
      expand: "[&>svg]:w-4 [&>svg]:h-4 [&>svg]:fill-panel-secondary-content"
    },
    disabled: "cursor-not-allowed text-disabled",
    unfilterable: "caret-transparent",
    error: "border border-solid",
    open: "rounded rounded-ee-none rounded-es-none",
    single: {
      prefix: "overflow-hidden whitespace-nowrap text-ellipsis max-w-full",
      inputContainer: "flex-nowrap",
      input: "max-w-full"
    },
    multiple: {
      prefix: "contents",
      inputContainer: "flex-wrap"
    },
    chip: {
      base: "cursor-pointer flex text-xs leading-none box-border mr-1 my-px px-1 py-1 rounded border-solid border-transparent",
      hover: "",
      focused: "focused:border-transparent focused:outline-none",
      disabled: "disabled:cursor-not-allowed",
      removeButton: "cursor-pointer leading-[0] ml-1 p-0 border-0 [&>svg]:w-3 [&>svg]:h-3 [&>svg]:align-baseline [&>svg]:pointer-events-none"
    }
  };
  const selectInputTheme = {
    ...baseTheme$o,
    base: [
      baseTheme$o.base,
      "bg-panel text-panel-content border-panel-accent border-solid"
    ].join(" "),
    disabled: [baseTheme$o.disabled, "opacity-75"].join(" "),
    error: [baseTheme$o.error, "border-error"].join(" "),
    chip: {
      ...baseTheme$o.chip,
      base: [baseTheme$o.chip.base, "bg-panel-accent text-surface-content"].join(
        " "
      ),
      hover: [baseTheme$o.chip.hover, "hover:brightness-150"].join(" "),
      focused: [baseTheme$o.chip.focused, "border-panel-accent"].join(" "),
      removeButton: [
        baseTheme$o.chip.removeButton,
        "[&>svg]:fill-panel-content"
      ].join(" ")
    }
  };
  const cssVarsSelectInputTheme = {
    ...baseTheme$o,
    base: [
      baseTheme$o.base,
      "bg-[var(--select-input-background)] p-[var(--select-input-spacing)] rounded-[var(--select-input-border-radius)] [border:_var(--select-input-border)]"
    ].join(" "),
    disabled: [
      baseTheme$o.disabled,
      "text-[var(--select-input-disabled-color)]"
    ].join(" "),
    placeholder: [
      baseTheme$o.placeholder,
      "text-[var(--select-input-placeholder-color)]"
    ].join(" "),
    error: [baseTheme$o.error, "border-[var(--select-input-error)]"].join(" "),
    input: [baseTheme$o.input, "text-[var(--select-input-color)]"].join(" "),
    suffix: {
      ...baseTheme$o.suffix,
      close: [
        baseTheme$o.suffix.close,
        "[&>svg]:fill-[var(--select-input-icon-color)]"
      ].join(" "),
      expand: [
        baseTheme$o.suffix.expand,
        "[&>svg]:fill-[var(--select-input-icon-color)]"
      ].join(" ")
    },
    chip: {
      ...baseTheme$o.chip,
      base: [
        baseTheme$o.chip.base,
        "bg-[var(--select-chip-background)] text-[var(--select-chip-color)] [border:_var(--select-chip-border)]"
      ].join(" "),
      removeButton: [
        baseTheme$o.chip.removeButton,
        "[&>svg]:fill-[var(--select-chip-icon-color)]"
      ].join(" ")
    }
  };
  const SelectMenu = ({
    style,
    disabled,
    createable,
    selectedOption,
    options,
    loading,
    className,
    index,
    filterable,
    groups,
    multiple,
    inputSearchText,
    onSelectedChange,
    theme: customTheme
  }) => {
    const trimmedText = inputSearchText.trim();
    const checkOptionSelected = React.useCallback(
      (option) => {
        if (multiple) {
          if (Array.isArray(selectedOption)) {
            return selectedOption.find((o) => o.value === option.value);
          }
          return false;
        }
        return (selectedOption == null ? void 0 : selectedOption.value) === option.value;
      },
      [selectedOption, multiple]
    );
    const { selectMenu: theme2 } = useComponentTheme(
      "select",
      customTheme
    );
    const renderListItems = React.useCallback(
      (items, group) => items.map((o, i) => {
        var _a, _b, _c, _d, _e;
        return /* @__PURE__ */ jsxRuntime.jsx(
          ListItem,
          {
            className: tailwindMerge.twMerge(
              (_a = theme2.option) == null ? void 0 : _a.base,
              (_b = theme2.option) == null ? void 0 : _b.hover,
              checkOptionSelected(o) && ((_c = theme2.option) == null ? void 0 : _c.selected),
              index === i + ((group == null ? void 0 : group.offset) || 0) && ((_d = theme2.option) == null ? void 0 : _d.active),
              (disabled || o.disabled) && ((_e = theme2.option) == null ? void 0 : _e.disabled)
            ),
            onClick: (event) => {
              event.preventDefault();
              event.stopPropagation();
              onSelectedChange(o);
            },
            children: o.menuLabel ? o.menuLabel : /* @__PURE__ */ jsxRuntime.jsx(
              Highlighter,
              {
                searchWords: [inputSearchText],
                autoEscape: true,
                textToHighlight: o.children
              }
            )
          },
          `${group == null ? void 0 : group.name}-${o.value}`
        );
      }),
      [
        checkOptionSelected,
        disabled,
        index,
        inputSearchText,
        onSelectedChange,
        theme2.option
      ]
    );
    return /* @__PURE__ */ jsxRuntime.jsx(
      framerMotion.motion.div,
      {
        style,
        className: tailwindMerge.twMerge(theme2.base, className, "select-menu"),
        initial: {
          opacity: 0,
          y: -20,
          pointerEvents: "none"
        },
        animate: {
          opacity: 1,
          y: 0,
          pointerEvents: "auto",
          transition: {
            when: "beforeChildren"
          }
        },
        exit: {
          y: -14,
          opacity: 0,
          pointerEvents: "none",
          transition: { duration: 0.3, ease: "anticipate" }
        },
        children: /* @__PURE__ */ jsxRuntime.jsxs(List, { children: [
          (options == null ? void 0 : options.length) === 0 && createable && trimmedText && !loading && /* @__PURE__ */ jsxRuntime.jsxs(
            ListItem,
            {
              className: "select-menu-create-option",
              onClick: (event) => {
                event.preventDefault();
                event.stopPropagation();
                onSelectedChange({
                  value: trimmedText.toLowerCase(),
                  children: trimmedText.toLowerCase()
                });
              },
              children: [
                'Create option "',
                trimmedText.toLowerCase(),
                '"'
              ]
            }
          ),
          (options == null ? void 0 : options.length) === 0 && !createable && filterable && trimmedText && !loading && /* @__PURE__ */ jsxRuntime.jsxs(ListItem, { className: "select-menu-empty-search", children: [
            'No option(s) for "',
            trimmedText,
            '"'
          ] }),
          (options == null ? void 0 : options.length) === 0 && !createable && filterable && !trimmedText && !loading && /* @__PURE__ */ jsxRuntime.jsx(ListItem, { className: "select-menu-empty", children: "No option(s) available" }),
          groups.hasGroups ? groups.groups.map((g) => /* @__PURE__ */ jsxRuntime.jsx(React.Fragment, { children: g.name === "undefined" ? renderListItems(g.items, g) : /* @__PURE__ */ jsxRuntime.jsxs(
            ListItem,
            {
              className: tailwindMerge.twMerge(theme2.groupItem, "select-menu-group"),
              children: [
                /* @__PURE__ */ jsxRuntime.jsx(
                  "h3",
                  {
                    className: tailwindMerge.twMerge(
                      theme2.groupTitle,
                      "select-menu-group-header"
                    ),
                    children: g.name
                  }
                ),
                /* @__PURE__ */ jsxRuntime.jsx(List, { children: renderListItems(g.items, g) })
              ]
            }
          ) }, g.name)) : renderListItems(options)
        ] })
      }
    );
  };
  const baseTheme$n = {
    base: "border border-solid rounded-b-md text-center will-change-[transform,opacity] min-w-[112px] max-h-[300px] overflow-y-auto text-left box-border",
    groupItem: "p-0 border-0",
    groupTitle: "text-xs font-bold uppercase m-0 px-1.5 py-2.5",
    option: {
      base: "text-sm flex-1 whitespace-break-spaces break-words py-1.5 px-2.5",
      hover: "",
      selected: "",
      active: "",
      disabled: ""
    }
  };
  const selectMenuTheme = {
    ...baseTheme$n,
    base: [
      baseTheme$n.base,
      "bg-panel text-panel-content border-panel-accent border-t-transparent"
    ].join(" "),
    groupTitle: [baseTheme$n.groupTitle, "text-panel-secondary-content"].join(" "),
    option: {
      ...baseTheme$n.option,
      base: [baseTheme$n.option.base, "text-surface-content"].join(" "),
      hover: [baseTheme$n.option.hover, "hover:bg-panel-accent"].join(" "),
      active: [baseTheme$n.option.active, "bg-panel-accent"].join(" "),
      selected: [
        baseTheme$n.option.selected,
        "bg-primary-active hover:bg-primary-hover light:bg-primary-active light:[&>div>span]:invert"
      ].join(" ")
    }
  };
  const cssVarsSelectMenuTheme = {
    ...baseTheme$n,
    base: [
      baseTheme$n.base,
      "bg-[var(--select-menu-background)] [border:_var(--select-menu-border)] rounded-[var(--select-menu-border-radius)]"
    ].join(" "),
    groupTitle: [baseTheme$n.groupTitle, "text-gray-600"].join(" "),
    option: {
      ...baseTheme$n.option,
      base: [
        baseTheme$n.option.base,
        "text-[var(--select-menu-item-color)] [padding:_var(--select-menu-item-spacing)]"
      ].join(" "),
      hover: [
        baseTheme$n.option.hover,
        "hover:bg-[var(--select-menu-item-active-background)] hover:text-[var(--select-menu-item-active-color)]"
      ].join(" "),
      active: [
        baseTheme$n.option.active,
        "hover:bg-[var(--select-menu-item-active-background)] text-[var(--select-menu-item-active-color)]"
      ].join(" "),
      selected: [
        baseTheme$n.option.selected,
        "bg-[var(--select-menu-item-selected-background)] text-[var(--select-menu-item-selected-color)]"
      ].join(" ")
    }
  };
  function getGroups(options) {
    if (!(options == null ? void 0 : options.length)) {
      return {
        groups: [],
        itemsCount: 0,
        hasGroups: false
      };
    }
    const groupsMap = options.reduce((acc, option) => {
      if (!acc[option.group]) {
        acc[option.group] = [];
      }
      acc[option.group].push(option);
      return acc;
    }, {});
    const groupNames = Object.keys(groupsMap);
    if (groupNames.length === 1 && groupNames[0] === "undefined") {
      return {
        groups: [],
        itemsCount: options.length,
        hasGroups: false
      };
    }
    let index = 0;
    const groups = groupNames.map((key, i) => ({
      offset: 0,
      index: i,
      items: groupsMap[key],
      name: key
    }));
    for (const group of groups) {
      group.offset = index;
      for (const _item of group.items) {
        index++;
      }
    }
    return {
      groups,
      itemsCount: (groups == null ? void 0 : groups.length) !== 0 ? groups.reduce((acc, g) => acc + g.items.length, 0) : options.length,
      hasGroups: (groups == null ? void 0 : groups.length) !== 0
    };
  }
  const SelectOption = ({ children }) => children;
  function createOptions(children) {
    const arr = React.Children.toArray(children);
    return arr.filter((child) => {
      var _a;
      return ((_a = child.type) == null ? void 0 : _a.name) === SelectOption.name;
    }).map((child) => child.props);
  }
  const useWidth = (ref, overlayRef) => {
    const [menuWidth, setMenuWidth] = React.useState(0);
    const updateWidthInternal = React.useCallback(() => {
      if (ref == null ? void 0 : ref.current) {
        const { width } = ref.current.getBoundingClientRect();
        if (width !== menuWidth) {
          setMenuWidth(width);
          return true;
        }
      }
    }, [ref, menuWidth]);
    React.useEffect(() => {
      updateWidthInternal();
    }, [updateWidthInternal]);
    React.useEffect(() => {
      if (typeof window !== "undefined") {
        window.addEventListener("resize", updateWidthInternal);
        return () => window.removeEventListener("resize", updateWidthInternal);
      }
    }, [updateWidthInternal]);
    const updateWidth = React.useCallback(() => {
      var _a;
      if (updateWidthInternal()) {
        (_a = overlayRef.current) == null ? void 0 : _a.updatePosition();
      }
    }, [updateWidthInternal, overlayRef]);
    return [menuWidth, updateWidth];
  };
  const keyNameToCode = {
    Backspace: 8,
    Tab: 9,
    Enter: 13,
    Shift: 16,
    Ctrl: 17,
    Alt: 18,
    "Pause/Break": 19,
    "Caps Lock": 20,
    Esc: 27,
    Space: 32,
    "Page Up": 33,
    "Page Down": 34,
    End: 35,
    Home: 36,
    Left: 37,
    Up: 38,
    Right: 39,
    Down: 40,
    Insert: 45,
    Delete: 46,
    "0": 48,
    "1": 49,
    "2": 50,
    "3": 51,
    "4": 52,
    "5": 53,
    "6": 54,
    "7": 55,
    "8": 56,
    "9": 57,
    A: 65,
    B: 66,
    C: 67,
    D: 68,
    E: 69,
    F: 70,
    G: 71,
    H: 72,
    I: 73,
    J: 74,
    K: 75,
    L: 76,
    M: 77,
    N: 78,
    O: 79,
    P: 80,
    Q: 81,
    R: 82,
    S: 83,
    T: 84,
    U: 85,
    V: 86,
    W: 87,
    X: 88,
    Y: 89,
    Z: 90,
    Windows: 91,
    "Right Click": 93,
    "Numpad 0": 96,
    "Numpad 1": 97,
    "Numpad 2": 98,
    "Numpad 3": 99,
    "Numpad 4": 100,
    "Numpad 5": 101,
    "Numpad 6": 102,
    "Numpad 7": 103,
    "Numpad 8": 104,
    "Numpad 9": 105,
    "Numpad *": 106,
    "Numpad +": 107,
    "Numpad -": 109,
    "Numpad .": 110,
    "Numpad /": 111,
    F1: 112,
    F2: 113,
    F3: 114,
    F4: 115,
    F5: 116,
    F6: 117,
    F7: 118,
    F8: 119,
    F9: 120,
    F10: 121,
    F11: 122,
    F12: 123,
    "Num Lock": 144,
    "Scroll Lock": 145,
    "My Computer": 182,
    "My Calculator": 183,
    ";": 186,
    "=": 187,
    ",": 188,
    "-": 189,
    ".": 190,
    "/": 191,
    "`": 192,
    "[": 219,
    "\\": 220,
    "]": 221,
    "'": 222
  };
  const Select = ({
    id: id2,
    name: name2,
    autoFocus,
    clearable = true,
    tabToSelect,
    filterable = true,
    menuPlacement = "bottom-start",
    closeOnSelect = true,
    menuDisabled = false,
    refreshable = false,
    placeholder,
    disabled,
    createable,
    selectOnPaste,
    selectOnKeys = ["Enter"],
    loading,
    multiple,
    error,
    className,
    activeClassName,
    children,
    value,
    defaultFilterValue,
    required,
    input = /* @__PURE__ */ jsxRuntime.jsx(SelectInput, {}),
    menu = /* @__PURE__ */ jsxRuntime.jsx(SelectMenu, {}),
    onRefresh,
    onChange,
    onBlur: onInputBlur,
    onFocus: onInputFocus,
    onInputKeydown,
    onInputKeyUp,
    onOptionsChange,
    onInputChange,
    searchOptions,
    onOpenMenu,
    onCloseMenu
  }) => {
    var _a, _b;
    const overlayRef = React.useRef(null);
    const inputRef = React.useRef(null);
    const [internalValue, setInternalValue] = React.useState(
      value
    );
    const [open, setOpen] = React.useState(false);
    const [index, setIndex] = React.useState(-1);
    const internalId = useId(id2);
    const [menuWidth, updateMenuWidth] = useWidth(
      (_a = inputRef.current) == null ? void 0 : _a.containerRef,
      overlayRef
    );
    const [options, setOptions] = React.useState(
      createOptions(children)
    );
    React.useEffect(() => {
      const opts = createOptions(children);
      if (!isEqual(opts, options)) {
        setOptions(opts);
      }
    }, [children, options]);
    const { result, keyword, search, resetSearch } = reactUseFuzzy.useFuzzy(
      options,
      {
        keys: ["children", "group"],
        ...searchOptions
      }
    );
    React.useEffect(() => {
      if (keyword && keyword.length > 0) {
        if (index === -1 || !result[index]) {
          setIndex(0);
        }
      }
    }, [keyword, index, setIndex, result]);
    React.useEffect(() => {
      if (!value && defaultFilterValue) {
        search(defaultFilterValue);
      }
    }, []);
    const groups = React.useMemo(() => getGroups(result), [result]);
    const selectedOption = React.useMemo(() => {
      if (multiple) {
        if (internalValue || internalValue === "") {
          return options.filter(
            (o) => internalValue.includes(o.value)
          );
        }
        return [];
      } else if (internalValue || internalValue === "") {
        return options.find((o) => o.value === internalValue);
      }
      return null;
    }, [options, multiple, internalValue]);
    React.useLayoutEffect(() => {
      var _a2;
      updateMenuWidth();
      (_a2 = overlayRef == null ? void 0 : overlayRef.current) == null ? void 0 : _a2.updatePosition();
    }, [internalValue, updateMenuWidth]);
    React.useEffect(() => {
      if (!isEqual(value, internalValue)) {
        setInternalValue(value);
      }
    }, [value, internalValue]);
    React.useEffect(() => {
      if (internalValue && createable) {
        if (multiple) {
          for (const v of internalValue) {
            const newOptions = [];
            const has = options.find((o) => o.value === v);
            if (!has) {
              newOptions.push({
                children: v,
                value: v
              });
            }
            if (newOptions.length) {
              const updatedOptions = [...options, ...newOptions];
              onOptionsChange == null ? void 0 : onOptionsChange(updatedOptions);
            }
          }
        } else {
          const has = options.find((o) => o.value === internalValue);
          if (!has) {
            const updatedOptions = [
              ...options,
              {
                children: internalValue,
                value: internalValue
              }
            ];
            onOptionsChange == null ? void 0 : onOptionsChange(updatedOptions);
          }
        }
      }
    }, [createable, internalValue, multiple, options, onOptionsChange]);
    const resetInput = React.useCallback(() => {
      setIndex(-1);
      resetSearch();
    }, [resetSearch]);
    const resetSelect = React.useCallback(() => {
      setOpen(false);
      resetInput();
    }, [resetInput]);
    const onArrowUpKeyUp = React.useCallback(
      (event) => {
        event.preventDefault();
        setIndex(Math.max(index - 1, -1));
      },
      [index]
    );
    const onArrowDownKeyUp = React.useCallback(
      (event) => {
        event.preventDefault();
        setIndex(Math.min(index + 1, groups.itemsCount - 1));
      },
      [groups.itemsCount, index]
    );
    const onInputFocused = React.useCallback(
      (event) => {
        if (!disabled && !menuDisabled) {
          setOpen(true);
        }
        onInputFocus == null ? void 0 : onInputFocus(event);
      },
      [disabled, menuDisabled, onInputFocus]
    );
    const onInputExpanded = React.useCallback(
      (event) => {
        event.stopPropagation();
        if (!disabled && !menuDisabled) {
          setOpen(!open);
        }
      },
      [disabled, menuDisabled, open]
    );
    const onInputChanged = React.useCallback(
      (event) => {
        const value2 = event.target.value;
        search(value2);
        onInputChange == null ? void 0 : onInputChange(event);
      },
      [onInputChange, search]
    );
    const toggleSelectedMultiOption = React.useCallback(
      (selections) => {
        const newOptions = [];
        let newSelectedOptions = selectedOption;
        if (!selections) {
          newSelectedOptions = [];
        } else {
          if (!Array.isArray(selections)) {
            selections = [selections];
          }
          for (const next of selections) {
            const hasOption = options.find((o) => o.value === next.value);
            const has = (internalValue || []).includes(next.value);
            if (has) {
              newSelectedOptions = newSelectedOptions.filter(
                (o) => o.value !== next.value
              );
            } else {
              newSelectedOptions = [...newSelectedOptions, next];
            }
            if (!hasOption && createable) {
              newOptions.push(next);
            }
          }
        }
        return {
          newValue: newSelectedOptions.map((o) => o.value),
          newSelectedOptions,
          newOptions
        };
      },
      [createable, internalValue, options, selectedOption]
    );
    const toggleSelectedOption = React.useCallback(
      (option) => {
        var _a2;
        let newValue;
        if (multiple) {
          const result2 = toggleSelectedMultiOption(option);
          newValue = result2.newValue;
          if ((_a2 = result2.newOptions) == null ? void 0 : _a2.length) {
            onOptionsChange == null ? void 0 : onOptionsChange([...options, ...result2.newOptions]);
          }
          if (closeOnSelect) {
            setOpen(false);
          }
        } else {
          const singleOption = option;
          const hasOption = options.find((o) => o.value === (singleOption == null ? void 0 : singleOption.value));
          newValue = singleOption == null ? void 0 : singleOption.value;
          const hasValue = newValue !== void 0 && newValue !== null;
          if (createable && !hasOption && hasValue) {
            onOptionsChange == null ? void 0 : onOptionsChange([...options, singleOption]);
          }
          if (closeOnSelect && hasOption) {
            setOpen(false);
          }
        }
        setInternalValue(newValue);
        if (!multiple || keyword) {
          resetInput();
        }
        onChange == null ? void 0 : onChange(newValue);
      },
      [
        keyword,
        closeOnSelect,
        createable,
        multiple,
        onChange,
        onOptionsChange,
        options,
        resetInput,
        toggleSelectedMultiOption
      ]
    );
    const onAddSelection = React.useCallback(
      (event) => {
        const inputElement = event.target;
        let inputValue = inputElement.value.trim();
        inputValue = inputValue.charAt(inputValue.length - 1) === event.key ? inputValue.slice(0, -1) : inputValue;
        if (index === -1 && createable && !inputValue) {
          return;
        }
        if (index > -1 || createable) {
          let newSelection;
          const hasSelection = index > -1 && result[index];
          if (createable && !hasSelection) {
            newSelection = {
              value: inputValue,
              children: inputValue
            };
          } else {
            newSelection = result[index];
          }
          if (newSelection) {
            toggleSelectedOption(newSelection);
          }
        }
      },
      [createable, index, result, toggleSelectedOption]
    );
    const onTabKeyDown = React.useCallback(
      (event) => {
        const inputElement = event.target;
        const inputValue = inputElement.value.trim();
        if (event.shiftKey) {
          setOpen(false);
          return;
        }
        if (index > -1 || createable && inputValue) {
          onAddSelection(event);
        }
        if (multiple) {
          event.preventDefault();
        } else {
          setOpen(false);
        }
      },
      [index, onAddSelection, setOpen, multiple, createable]
    );
    const onInputKeyedUp = React.useCallback(
      (event) => {
        const key = event.code;
        if (key === "ArrowUp") {
          onArrowUpKeyUp(event);
        } else if (key === "ArrowDown") {
          onArrowDownKeyUp(event);
        } else if (key === "Escape") {
          resetSelect();
        } else if (selectOnKeys == null ? void 0 : selectOnKeys.includes(key)) {
          onAddSelection(event);
        }
        onInputKeyUp == null ? void 0 : onInputKeyUp(event);
      },
      [
        selectOnKeys,
        onInputKeyUp,
        onArrowUpKeyUp,
        onArrowDownKeyUp,
        resetSelect,
        onAddSelection
      ]
    );
    const onInputKeyedDown = React.useCallback(
      (event) => {
        const key = event.key;
        if (key === "Tab") {
          if (tabToSelect) {
            onTabKeyDown(event);
          } else {
            setOpen(false);
          }
        }
        onInputKeydown == null ? void 0 : onInputKeydown(event);
      },
      [onInputKeydown, onTabKeyDown, tabToSelect]
    );
    const onInputBlured = React.useCallback(
      (event) => {
        const inputElement = event.target;
        const inputValue = inputElement.value.trim();
        if (menuDisabled && createable && inputValue) {
          const newSelection = {
            value: inputValue,
            children: inputValue
          };
          toggleSelectedOption(newSelection);
        }
        onInputBlur == null ? void 0 : onInputBlur(event);
      },
      [createable, menuDisabled, onInputBlur, toggleSelectedOption]
    );
    const onPasteHandler = React.useCallback(
      (e) => {
        var _a2;
        if (selectOnPaste) {
          const inputElement = e.target;
          const inputValue = inputElement.value;
          const clipboardValue = e.clipboardData.getData("Text");
          const value2 = `${inputValue}${clipboardValue}`.trim();
          if (multiple) {
            const separators = selectOnKeys == null ? void 0 : selectOnKeys.map(
              (key) => String.fromCharCode(keyNameToCode[key])
            );
            const expression = `[${separators}]`;
            const regex = new RegExp(expression, "g");
            const items = value2.split(regex);
            const result2 = toggleSelectedMultiOption(
              items.map((item) => ({ value: item, children: item }))
            );
            const optionsToSelect = createable ? result2.newOptions : result2.newSelectedOptions;
            if ((_a2 = result2.newOptions) == null ? void 0 : _a2.length) {
              onOptionsChange == null ? void 0 : onOptionsChange([...options, ...optionsToSelect]);
            }
            setInternalValue(result2.newValue);
            onChange == null ? void 0 : onChange(result2.newValue);
          } else {
            toggleSelectedOption({ value: value2, children: value2 });
            setInternalValue(value2);
            onChange == null ? void 0 : onChange(value2);
          }
          resetInput();
          e.preventDefault();
        }
      },
      [
        createable,
        selectOnPaste,
        multiple,
        onChange,
        onOptionsChange,
        options,
        resetInput,
        selectOnKeys,
        toggleSelectedMultiOption,
        toggleSelectedOption
      ]
    );
    const onMenuSelectedChange = React.useCallback(
      (option) => {
        var _a2;
        toggleSelectedOption(option);
        if (closeOnSelect) {
          setOpen(false);
        } else {
          (_a2 = inputRef.current) == null ? void 0 : _a2.focus();
        }
      },
      [closeOnSelect, toggleSelectedOption]
    );
    const onOverlayClose = React.useCallback(() => {
      const inputValue = keyword.trim();
      if (createable && inputValue) {
        const newSelection = {
          value: inputValue,
          children: inputValue
        };
        toggleSelectedOption(newSelection);
      }
      resetSelect();
      onCloseMenu == null ? void 0 : onCloseMenu();
    }, [createable, keyword, onCloseMenu, resetSelect, toggleSelectedOption]);
    return /* @__PURE__ */ jsxRuntime.jsx(
      ConnectedOverlay,
      {
        open,
        closeOnBodyClick: true,
        closeOnEscape: true,
        appendToBody: true,
        placement: menuPlacement,
        reference: (_b = inputRef == null ? void 0 : inputRef.current) == null ? void 0 : _b.containerRef,
        ref: overlayRef,
        onClose: onOverlayClose,
        onOpen: onOpenMenu,
        content: () => /* @__PURE__ */ jsxRuntime.jsx(
          CloneElement,
          {
            element: menu,
            id: `${internalId}-menu`,
            style: { width: menuWidth },
            selectedOption,
            createable,
            disabled,
            options: result,
            groups,
            index,
            multiple,
            inputSearchText: keyword,
            loading,
            filterable,
            onSelectedChange: onMenuSelectedChange
          }
        ),
        children: /* @__PURE__ */ jsxRuntime.jsx(
          CloneElement,
          {
            element: input,
            id: `${internalId}-input`,
            name: name2,
            disabled,
            reference: inputRef,
            menuOpen: open,
            autoFocus,
            options,
            error,
            closeOnSelect,
            inputText: keyword,
            multiple,
            createable,
            filterable,
            refreshable,
            className,
            activeClassName,
            required,
            loading,
            placeholder,
            selectedOption,
            clearable,
            menuDisabled,
            onSelectedChange: toggleSelectedOption,
            onExpandClick: onInputExpanded,
            onKeyDown: onInputKeyedDown,
            onKeyUp: onInputKeyedUp,
            onInputChange: onInputChanged,
            onBlur: onInputBlured,
            onFocus: onInputFocused,
            onRefresh,
            onPaste: onPasteHandler
          }
        )
      }
    );
  };
  const selectTheme = {
    selectInput: selectInputTheme,
    selectMenu: selectMenuTheme
  };
  const legacySelectTheme = {
    selectInput: cssVarsSelectInputTheme,
    selectMenu: cssVarsSelectMenuTheme
  };
  const Textarea = React.forwardRef(
    ({
      fullWidth,
      size = "medium",
      containerClassName,
      className,
      error,
      theme: customTheme,
      ...rest
    }, ref) => {
      const containerRef = React.useRef(null);
      const inputRef = React.useRef(null);
      React.useImperativeHandle(ref, () => ({
        inputRef,
        containerRef,
        blur: () => {
          var _a;
          return (_a = inputRef.current) == null ? void 0 : _a.blur();
        },
        focus: () => {
          var _a;
          return (_a = inputRef.current) == null ? void 0 : _a.focus();
        }
      }));
      const theme2 = useComponentTheme("textarea", customTheme);
      return /* @__PURE__ */ jsxRuntime.jsx(
        "div",
        {
          className: tailwindMerge.twMerge(
            theme2.base,
            fullWidth && theme2.fullWidth,
            error && theme2.error,
            containerClassName
          ),
          ref: containerRef,
          children: /* @__PURE__ */ jsxRuntime.jsx(
            TextareaAutosize,
            {
              ref: inputRef,
              className: tailwindMerge.twMerge(
                theme2.input,
                fullWidth && theme2.fullWidth,
                rest.disabled && theme2.disabled,
                theme2.sizes[size],
                className
              ),
              ...rest
            }
          )
        }
      );
    }
  );
  const baseTheme$m = {
    input: "resize-none read-only:cursor-not-allowed"
  };
  const textareaTheme = {
    ...baseTheme$m,
    base: [baseTheme$m.base, inputTheme.base].join(" "),
    input: [baseTheme$m.input, inputTheme.input].join(" "),
    disabled: [baseTheme$m.disabled, inputTheme.disabled].join(" "),
    fullWidth: inputTheme.fullWidth,
    error: inputTheme.error,
    sizes: inputTheme.sizes
  };
  const legacyTextareaTheme = {
    ...baseTheme$m,
    base: [
      baseTheme$m.base,
      legacyInputTheme.base,
      "bg-[var(--textarea-background)] rounded-[var(--textarea-border-radius)] [border:_var(--textarea-border)] focus:border-[var(--textarea-border-focus)]"
    ].join(" "),
    input: [
      baseTheme$m.input,
      legacyInputTheme.input,
      "[font-family:_var(--font-family)] text-[var(--textarea-color)] placeholder-[var(--textarea-color-placeholder)]"
    ].join(" "),
    disabled: [
      baseTheme$m.disabled,
      legacyInputTheme.disabled,
      "text-[var(--disabled-color)]"
    ].join(" "),
    fullWidth: legacyInputTheme.fullWidth,
    error: legacyInputTheme.error,
    sizes: {
      small: "[padding:_var(--textarea-spacing-sm)]",
      medium: "[padding: var(--textarea-spacing-md)]",
      large: "padding: var(--textarea-spacing-lg)"
    }
  };
  const Toggle = React.forwardRef(
    ({
      checked,
      disabled,
      onChange,
      onBlur,
      className,
      size = "medium",
      theme: customTheme,
      ...rest
    }, ref) => {
      const theme2 = useComponentTheme("toggle", customTheme);
      return /* @__PURE__ */ jsxRuntime.jsx(
        "div",
        {
          ...rest,
          ref,
          tabIndex: 0,
          className: cn(
            theme2.base,
            theme2.sizes[size],
            {
              [theme2.checked]: checked,
              [theme2.disabled]: disabled,
              [theme2.disabledAndChecked]: disabled && checked
            },
            className
          ),
          onClick: () => {
            if (!disabled && onChange) {
              onChange(!checked);
            }
          },
          onBlur,
          onKeyDown: (event) => {
            if (!disabled && onChange && event.code === "Space") {
              onChange(!checked);
            }
          },
          children: /* @__PURE__ */ jsxRuntime.jsx(
            framerMotion.motion.div,
            {
              className: cn(theme2.handle.base, theme2.handle.sizes[size], {
                [theme2.handle.disabled]: disabled,
                [theme2.handle.disabledAndChecked]: disabled && checked
              }),
              layout: true,
              transition: {
                type: "spring",
                stiffness: 700,
                damping: 30
              }
            }
          )
        }
      );
    }
  );
  const baseTheme$l = {
    base: "flex items-center justify-start cursor-pointer bg-surface box-border border border-panel-accent rounded-full hover:bg-primary-hover transition-[background-color] ease-in-out duration-300",
    disabled: "cursor-not-allowed bg-transparent hover:bg-transparent",
    checked: "justify-end bg-primary",
    disabledAndChecked: "bg-secondary-inactive hover:bg-secondary-inactive light:bg-gray-400 light:hover:bg-gray-400",
    handle: {
      base: "rounded-full bg-panel",
      sizes: {
        small: "w-3 h-full",
        medium: "w-5 h-full",
        large: "w-6 h-full"
      },
      disabled: "bg-secondary-inactive light:bg-gray-400",
      disabledAndChecked: "bg-black light:bg-white"
    },
    sizes: {
      small: "w-8 h-4 p-px",
      medium: "w-12 h-6 p-px",
      large: "w-16 h-7 p-px"
    }
  };
  const toggleTheme = baseTheme$l;
  const legacyToggleTheme = {
    ...baseTheme$l,
    base: [
      baseTheme$l.base,
      "bg-[var(--toggle-background)] rounded-[var(--toggle-border-radius)] [border:_var(--toggle-border)]"
    ].join(" "),
    disabled: [
      baseTheme$l.disabled,
      "opacity-[var(--toggle-disabled-opacity,0.8)] bg-[var(--toggle-disabled-background)]"
    ].join(" "),
    checked: [
      baseTheme$l.checked,
      "bg-[var(--toggle-background-checked)] [border:_var(--toggle-border-checked)]"
    ].join(" "),
    sizes: {
      small: "h-[calc(var(--toggle-height,35px)_/_2)] w-[calc(var(--toggle-width,55px)_/_2)] pt-[calc(var(--toggle-spacing)] pb-[2)] px-[/]",
      medium: "h-[calc(var(--toggle-height,35px)_/_1.5)] w-[calc(var(--toggle-width,55px)_/_1.5)] pt-[calc(var(--toggle-spacing)] pb-[1.5)] px-[/]",
      large: "h-[var(--toggle-height,35px)] w-[var(--toggle-width,55px)] pt-[var(--toggle-spacing)] pr-[var(--toggle-spacing)] pb-[var(--toggle-spacing)] pl-[var(--toggle-spacing)]"
    },
    handle: {
      ...baseTheme$l.handle,
      base: [
        baseTheme$l.handle.base,
        "bg-[var(--toggle-handle-background)] rounded-[var(--toggle-handle-border-radius)]"
      ].join(" "),
      sizes: {
        small: "h-[calc(var(--toggle-handle-size,25px)_/_2)] w-[calc(var(--toggle-handle-size,25px)_/_2)]",
        medium: "h-[calc(var(--toggle-handle-size,25px)_/_1.5)] w-[calc(var(--toggle-handle-size,25px)_/_1.5)]",
        large: "h-[var(--toggle-handle-size,25px)] w-[var(--toggle-handle-size,25px)]"
      }
    }
  };
  const DeletableChip = React.forwardRef(
    ({
      children,
      disabled,
      deleteIcon = /* @__PURE__ */ jsxRuntime.jsx(CloseIcon, { height: 12, width: 12 }),
      onDelete,
      size = "medium",
      color: color2 = "default",
      theme: customTheme,
      variant = "filled",
      ...rest
    }, ref) => {
      const theme2 = useComponentTheme("chip", customTheme);
      return /* @__PURE__ */ jsxRuntime.jsx(
        Chip,
        {
          ref,
          size,
          disabled,
          color: color2,
          end: /* @__PURE__ */ jsxRuntime.jsx(
            Button,
            {
              tabIndex: 0,
              variant: "text",
              size,
              className: tailwindMerge.twMerge(
                theme2.deleteButton.base,
                theme2.deleteButton[size]
              ),
              onClick: (event) => {
                if (!disabled) {
                  event.stopPropagation();
                  onDelete == null ? void 0 : onDelete();
                }
              },
              disabled,
              disableMargins: true,
              disablePadding: true,
              children: deleteIcon
            }
          ),
          variant,
          ...rest,
          children
        }
      );
    }
  );
  const baseTheme$k = {
    base: `
  inline-flex whitespace-no-wrap select-none items-center justify-center px-2.5 py-0.5
  rounded-sm leading-none text-white transition-colors
  duration-300 ease [&>svg]:transition-[fill] [&>svg]:will-change-[fill] font-medium
  `,
    colors: {
      default: {
        selectable: {
          base: "hover:cursor-pointer"
        }
      },
      primary: {
        selectable: {
          base: "hover:cursor-pointer"
        }
      },
      secondary: {
        selectable: {
          base: "hover:cursor-pointer"
        }
      },
      success: {
        selectable: {
          base: "hover:cursor-pointer"
        }
      },
      warning: {
        selectable: {
          base: "hover:cursor-pointer"
        }
      },
      error: {
        selectable: {
          base: "hover:cursor-pointer"
        }
      },
      info: {
        selectable: {
          base: "hover:cursor-pointer"
        }
      }
    },
    adornment: {
      base: "flex items-center justify-center",
      start: "mr-1",
      end: "ml-1",
      sizes: {
        small: "[&>svg]:w-3 [&>svg]:h-3",
        medium: "[&>svg]:w-4 [&>svg]:h-4",
        large: "[&>svg]:w-5 [&>svg]:h-5"
      }
    },
    sizes: {
      small: "text-[10px] px-1 py-0.5",
      medium: "text-sm px-2 py-0.5",
      large: "text-base px-3 py-0.5"
    },
    focus: "focus-visible:outline-dashed focus-visible:outline-1 focus-visible:outline-offset-2",
    deleteButton: {
      base: "text-inherit",
      sizes: {
        small: "leading-[10px] max-h-2.5",
        medium: "leading-3 max-h-3",
        large: "leading-[14px] max-h-3.5"
      }
    },
    disabled: "bg-opacity-50 border-opacity-50 text-opacity-50 cursor-not-allowed"
  };
  const chipTheme = {
    base: baseTheme$k.base,
    adornment: baseTheme$k.adornment,
    sizes: baseTheme$k.sizes,
    focus: baseTheme$k.focus,
    variants: {
      filled: "border border-transparent box-border",
      outline: "bg-opacity-0 border hover:bg-transparent"
    },
    colors: {
      default: {
        variants: {
          filled: "bg-panel border-panel text-panel-content",
          outline: "text-panel-content border-panel-content"
        },
        selectable: {
          base: `${baseTheme$k.colors.default.selectable.base}`,
          variants: {
            filled: {
              base: "hover:bg-primary-hover hover:border-primary-hover hover:text-panel",
              selected: "bg-primary text-panel"
            },
            outline: {
              base: "hover:text-primary-hover hover:border-panel-accent",
              selected: "border-panel-accent text-primary"
            }
          }
        }
      },
      primary: {
        variants: {
          outline: "text-primary border-panel-accent",
          filled: "bg-primary border-primary text-panel"
        },
        selectable: {
          base: `${baseTheme$k.colors.primary.selectable.base}`,
          variants: {
            filled: {
              base: "hover:bg-primary-hover hover:border-primary-hover hover:text-panel",
              selected: "bg-primary-hover"
            },
            outline: {
              base: "hover:text-primary-hover hover:border-primary",
              selected: "border-primary"
            }
          }
        }
      },
      secondary: {
        variants: {
          filled: "bg-secondary border-secondary text-panel-content",
          outline: "text-secondary border-panel-accent"
        },
        selectable: {
          base: `${baseTheme$k.colors.secondary.selectable.base}`,
          variants: {
            filled: {
              base: "hover:bg-secondary-hover hover:border-secondary-hover hover:text-panel",
              selected: "bg-secondary-hover text-panel"
            },
            outline: {
              base: "hover:text-secondary-hover hover:border-secondary",
              selected: "border-secondary"
            }
          }
        }
      },
      success: {
        variants: {
          filled: "bg-success border-success text-panel",
          outline: "text-success border-panel-accent"
        },
        selectable: {
          base: `${baseTheme$k.colors.success.selectable.base}`,
          variants: {
            filled: {
              base: "hover:bg-success-hover hover:border-success-hover",
              selected: "bg-success-hover"
            },
            outline: {
              base: "hover:text-success-hover hover:border-success",
              selected: "border-success"
            }
          }
        }
      },
      warning: {
        variants: {
          filled: "bg-warning border-warning text-panel",
          outline: "text-warning border-panel-accent"
        },
        selectable: {
          base: `${baseTheme$k.colors.warning.selectable.base}`,
          variants: {
            filled: {
              base: "hover:bg-warning-hover hover:border-warning-hover hover:text-panel",
              selected: "bg-warning-hover"
            },
            outline: {
              base: "hover:text-warning-hover hover:border-warning",
              selected: "border-warning"
            }
          }
        }
      },
      error: {
        variants: {
          filled: "bg-error border-error text-panel",
          outline: "text-error border-panel-accent"
        },
        selectable: {
          base: `${baseTheme$k.colors.error.selectable.base}`,
          variants: {
            filled: {
              base: "hover:bg-error-hover hover:border-error-hover hover:text-panel",
              selected: "bg-error-hover"
            },
            outline: {
              base: "hover:text-error-hover hover:border-error",
              selected: "border-error"
            }
          }
        }
      },
      info: {
        variants: {
          filled: "bg-info border-info text-panel",
          outline: "text-info border-panel-accent"
        },
        selectable: {
          base: `${baseTheme$k.colors.info.selectable.base}`,
          variants: {
            filled: {
              base: "hover:bg-info-hover hover:border-info-hover hover:text-panel",
              selected: "bg-info-hover"
            },
            outline: {
              base: "hover:text-info-hover hover:border-info",
              selected: "border-info"
            }
          }
        }
      }
    },
    deleteButton: baseTheme$k.deleteButton,
    disabled: baseTheme$k.disabled
  };
  const legacyChipTheme = {
    base: [
      baseTheme$k.base,
      "[font-family:_var(--chip-font-family)] rounded-[var(--chip-border-radius)]"
    ].join(" "),
    adornment: {
      ...baseTheme$k.adornment,
      start: [baseTheme$k.adornment.start, "pr-[var(--spacing-xs)]"].join(" "),
      end: [baseTheme$k.adornment.end, "pl-[var(--spacing-xs)]"].join(" ")
    },
    sizes: {
      small: [baseTheme$k.sizes.small, "p-[var(--spacing-xs)]"].join(" "),
      medium: [
        baseTheme$k.sizes.medium,
        "py-[var(--spacing-xs)] px-[var(--spacing-md)]"
      ].join(" "),
      large: [baseTheme$k.sizes.large, "p-[var(--spacing-md)]"].join(" ")
    },
    focus: baseTheme$k.focus,
    variants: {
      filled: "[&>svg]:fill-[var(--chip-color)]",
      outline: "bg-opacity-0 border hover:bg-transparent border-[var(--chip-background)] text-[var(--chip-color)] [&>svg]:fill-[var(--chip-color)]"
    },
    colors: {
      default: {
        base: "bg-[var(--chip-background)] border-[var(--chip-background)] text-[var(--chip-color)] ",
        variants: baseTheme$k.colors.default.variants,
        selectable: baseTheme$k.colors.default.selectable
      },
      primary: {
        base: "bg-[color:var(--primary-background)] border-[color:var(--primary-background)]",
        variants: baseTheme$k.colors.primary.variants,
        selectable: baseTheme$k.colors.primary.selectable
      },
      secondary: {
        base: "bg-[color:var(--secondary-background)] border-[color:var(--secondary-background)]",
        variants: baseTheme$k.colors.secondary.variants,
        selectable: baseTheme$k.colors.secondary.selectable
      },
      success: {
        base: "bg-[color:var(--success-background)] border-[color:var(--success-background)]",
        variants: baseTheme$k.colors.success.variants,
        selectable: baseTheme$k.colors.success.selectable
      },
      warning: {
        base: "bg-[color:var(--warning-background)] border-[color:var(--warning-background)]",
        variants: baseTheme$k.colors.warning.variants,
        selectable: baseTheme$k.colors.warning.selectable
      },
      error: {
        base: "bg-[color:var(--error-background)] border-[color:var(--error-background)]",
        variants: baseTheme$k.colors.error.variants,
        selectable: baseTheme$k.colors.error.selectable
      },
      info: {
        base: "bg-[color:var(--info-background)] border-[color:var(--info-background)]",
        variants: baseTheme$k.colors.info.variants,
        selectable: baseTheme$k.colors.info.selectable
      }
    },
    deleteButton: baseTheme$k.deleteButton,
    disabled: baseTheme$k.disabled
  };
  const baseTheme$j = {
    base: "flex",
    dot: "rounded-[50%]",
    sizes: {
      small: "w-1 h-1 m-1",
      medium: "w-1.5 h-1.5 m-1.5",
      large: "w-2 h-2 m-2"
    }
  };
  const dotsLoaderTheme = {
    ...baseTheme$j,
    dot: [baseTheme$j.dot, "bg-surface-content"].join(" ")
  };
  const legacyLoaderTheme = {
    ...baseTheme$j,
    dot: [baseTheme$j.dot, "bg-[var(--loader-background)]"].join(" "),
    sizes: {
      small: "w-1 h-1 ml-[var(--spacing-sm)]",
      medium: "w-1.5 h-1.5 ml-[var(--spacing-md)]",
      large: "w-2 h-2 ml-[var(--spacing-lg)]"
    }
  };
  const Avatar = React.forwardRef(
    ({
      name: name2,
      src,
      color: color2,
      size = 24,
      variant = "filled",
      rounded = true,
      className,
      colorOptions,
      theme: customTheme,
      ...rest
    }, ref) => {
      const fontSize = size * 0.4;
      const initials = React.useMemo(() => getInitials(name2 || ""), [name2]);
      const backgroundColor = React.useMemo(() => {
        if (src) {
          return "transparent";
        }
        if (color2) {
          return color2;
        }
        return stringToColor.generateColor(name2 || "", colorOptions);
      }, [color2, name2, src, colorOptions]);
      const theme2 = useComponentTheme("avatar", customTheme);
      return /* @__PURE__ */ jsxRuntime.jsx(
        "div",
        {
          ...rest,
          className: tailwindMerge.twMerge(theme2.base, rounded && theme2.rounded, className),
          style: {
            width: `${size}px`,
            height: `${size}px`,
            fontSize: `${fontSize}px`,
            backgroundImage: src ? `url(${src})` : "none",
            backgroundColor,
            ...variant === "outline" && {
              backgroundColor: "transparent",
              border: `solid 1px ${backgroundColor}`,
              color: backgroundColor
            }
          },
          ref,
          children: !src && name2 && /* @__PURE__ */ jsxRuntime.jsx("span", { children: initials })
        }
      );
    }
  );
  const baseTheme$i = {
    base: "flex justify-center items-center bg-cover bg-center font-bold",
    rounded: "rounded-[50%]"
  };
  const avatarTheme = {
    ...baseTheme$i,
    base: [baseTheme$i.base, "text-white"].join(" ")
  };
  const legacyAvatarTheme = {
    ...baseTheme$i,
    base: [
      baseTheme$i.base,
      "text-[var(--avatar-initials-color)] [border:_var(--avatar-border)]"
    ].join(" ")
  };
  const pluralize = ({
    count,
    zero,
    singular,
    plural,
    showCount
  }) => {
    if (count === 0 && zero) {
      return zero;
    }
    let returnedString = singular;
    if (count !== 1) {
      returnedString = plural || pluralizeLib(singular, count);
    }
    return showCount ? `${count.toLocaleString()} ${returnedString}` : returnedString;
  };
  const Pluralize = ({
    count = 0,
    singular,
    className,
    showCount = true,
    plural,
    zero
  }) => {
    const text = React.useMemo(
      () => pluralize({ count, singular, showCount, plural, zero }),
      [count, singular, showCount, plural, zero]
    );
    return /* @__PURE__ */ jsxRuntime.jsx("span", { className, children: text });
  };
  function formatSize(size, emptyValue = "N/A", scale = ["B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"], decimals = 2) {
    let newSize = size;
    var binaryScale = humanFormat.Scale.create(scale, 1024);
    if (typeof size === "string") {
      newSize = parseFloat(size);
    } else if (size === null || size === void 0) {
      return [emptyValue];
    }
    return humanFormat(newSize, {
      scale: binaryScale,
      decimals
    });
  }
  const DataSize = ({
    value,
    emptyValue,
    scale,
    decimals
  }) => /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: formatSize(value, emptyValue, scale, decimals) });
  const Redact = ({
    allowToggle = true,
    compactLength = 8,
    tooltipText = "Click to toggle sensitive content",
    className,
    character = "*",
    value,
    theme: customTheme
  }) => {
    const [visible, setVisible] = React.useState(false);
    const masked = React.useMemo(
      () => coverup(value, {
        keepLeft: 1,
        keepRight: 1,
        compactTo: compactLength,
        char: character
      }) || "",
      [value, character, compactLength]
    );
    const theme2 = useComponentTheme("redact", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsx(
      "span",
      {
        title: allowToggle ? tooltipText : void 0,
        role: "button",
        className: tailwindMerge.twMerge(
          theme2.base,
          allowToggle && theme2.interactive,
          className
        ),
        onClick: () => allowToggle && setVisible(!visible),
        children: visible ? value : masked
      }
    );
  };
  const baseTheme$h = {
    base: "cursor-text",
    interactive: "cursor-pointer hover:underline"
  };
  const redactTheme = {
    ...baseTheme$h,
    base: [baseTheme$h.base, "text-surface-content"].join(" ")
  };
  const legacyRedactTheme = {
    ...baseTheme$h
  };
  const timeScale = new humanFormat.Scale({
    ms: 1,
    s: 1 * 1e3,
    min: 60 * 1e3,
    hr: 3600 * 1e3,
    day: 86400 * 1e3,
    month: 2592e3 * 1e3
  });
  function formatDuration(time, emptyValue = "N/A") {
    let newTime = time;
    if (typeof time === "string") {
      newTime = parseFloat(time);
    } else if (time === null || time === void 0) {
      return [emptyValue];
    }
    const humanized = humanFormat(newTime, { scale: timeScale });
    const [valueStr, unitStr] = humanized.split(" ");
    const value = parseFloat(valueStr);
    if (value === 1) {
      return humanized;
    }
    if (unitStr === null || unitStr === void 0 || value === null || value === void 0) {
      return [emptyValue];
    }
    return `${value} ${pluralizeLib(unitStr, value)}`;
  }
  const Duration = ({ value, emptyValue = "N/A" }) => /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: formatDuration(value, emptyValue) });
  function getDifference(date) {
    return dateFns.differenceInSeconds(/* @__PURE__ */ new Date(), date);
  }
  function formatRelative(date, options) {
    const diff = getDifference(date);
    if (diff < 30) {
      return "now";
    } else {
      return dateFns.formatDistance(date, /* @__PURE__ */ new Date(), options);
    }
  }
  function getInterval(date) {
    const diff = getDifference(date);
    if (diff < 3600) {
      return 6e4;
    } else if (diff >= 3600 && diff <= 86400) {
      return 36e5;
    } else {
      return 0;
    }
  }
  function safeFormat(date, options) {
    let relative;
    let formatted;
    let dateObj;
    if (date) {
      dateObj = new Date(date);
      if (dateFns.isValid(dateObj)) {
        const { format, includeSeconds, addSuffix } = options;
        formatted = dateFns.format(dateObj, format);
        relative = formatRelative(dateObj, { includeSeconds, addSuffix });
      }
    }
    return {
      dateObj,
      formatted,
      relative
    };
  }
  const DateFormat = ({
    allowToggle = false,
    cacheKey,
    className,
    format = "MM/dd/yy hh:mm:ss a",
    emptyMessage = "N/A",
    includeSeconds = false,
    addSuffix = true,
    fromNow,
    date,
    theme: customTheme
  }) => {
    const [cache, setCache] = React.useState(
      typeof window !== "undefined" ? window.localStorage.getItem(`DATES_${cacheKey}`) ?? null : null
    );
    React.useEffect(() => {
      if (cacheKey && typeof window !== "undefined") {
        window.localStorage.setItem(`DATES_${cacheKey}`, cache);
      }
    }, [cache, cacheKey]);
    let should = fromNow;
    if (cacheKey && cache) {
      should = cache === "true";
    }
    const [isRelative, setIsRelative] = React.useState(should);
    const timeout = React.useRef(null);
    const { dateObj, formatted, relative } = React.useMemo(
      () => safeFormat(date, { format, includeSeconds, addSuffix }),
      [addSuffix, date, format, includeSeconds]
    );
    const [curRelative, setCurRelative] = React.useState(relative);
    const onToggle = React.useCallback(
      (event) => {
        if (allowToggle) {
          event.preventDefault();
          event.stopPropagation();
          const next = !isRelative;
          setIsRelative(next);
          if (cacheKey) {
            setCache(`${next}`);
          }
        }
      },
      [allowToggle, cacheKey, isRelative, setCache]
    );
    const updateTime = React.useCallback(() => {
      if (isRelative) {
        clearTimeout(timeout.current);
        const interval = getInterval(dateObj);
        if (interval > 0) {
          timeout.current = setTimeout(() => {
            setCurRelative(
              formatRelative(dateObj, { includeSeconds, addSuffix })
            );
            updateTime();
          }, interval);
        }
      }
    }, [isRelative, dateObj, includeSeconds, addSuffix]);
    React.useEffect(() => {
      updateTime();
      const cur = timeout.current;
      return () => clearTimeout(cur);
    });
    const theme2 = useComponentTheme("dateFormat", customTheme);
    if (!date) {
      return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: emptyMessage });
    }
    return /* @__PURE__ */ jsxRuntime.jsx(
      "time",
      {
        title: allowToggle ? "Toggle relative / absolute time" : void 0,
        role: "button",
        className: tailwindMerge.twMerge(
          theme2.base,
          allowToggle && theme2.interactive,
          className
        ),
        onClick: onToggle,
        children: isRelative ? curRelative : formatted
      }
    );
  };
  const baseTheme$g = {
    base: "cursor-text",
    interactive: "cursor-pointer hover:underline"
  };
  const dateFormatTheme = {
    ...baseTheme$g
  };
  const legacyDateFormatTheme = {
    ...baseTheme$g,
    base: [baseTheme$g.base, "text-[var(--color-primary)]"].join(" ")
  };
  const DownArrowIcon = ({ className }) => /* @__PURE__ */ jsxRuntime.jsx(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      x: "0px",
      y: "0px",
      width: "50",
      height: "50",
      viewBox: "0 0 32 32",
      className,
      children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M 4.21875 10.78125 L 2.78125 12.21875 L 15.28125 24.71875 L 16 25.40625 L 16.71875 24.71875 L 29.21875 12.21875 L 27.78125 10.78125 L 16 22.5625 Z" })
    }
  );
  function getNextDirection(direction, defaultDirection = "asc", canBeNull = true) {
    if (!direction) {
      return defaultDirection;
    } else if (direction === "asc") {
      return "desc";
    } else if (direction === "desc") {
      return canBeNull ? null : "asc";
    }
  }
  const Sort = ({
    className,
    disabled,
    direction,
    iconClassName,
    icon: Icon = DownArrowIcon,
    neutralIcon: NeutralIcon,
    neutralIconClassName,
    children,
    onSort,
    theme: customTheme
  }) => {
    const onSortClick = React.useCallback(() => {
      if (!disabled) {
        onSort == null ? void 0 : onSort(getNextDirection(direction));
      }
    }, [disabled, direction, onSort]);
    const onKeydown = React.useCallback(
      (event) => {
        if (!disabled && (event.key === "Enter" || event.key === "Space")) {
          onSort == null ? void 0 : onSort(getNextDirection(direction));
        }
      },
      [disabled, direction, onSort]
    );
    const theme2 = useComponentTheme("sort", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "div",
      {
        className: tailwindMerge.twMerge(
          theme2.base,
          disabled && theme2.disabled,
          disabled && direction !== void 0 && direction !== null && theme2.hasValue
        ),
        role: "button",
        tabIndex: -1,
        "aria-label": "Toggle sort direction",
        onClick: onSortClick,
        onKeyDown: onKeydown,
        children: [
          children,
          /* @__PURE__ */ jsxRuntime.jsxs(framerMotion.AnimatePresence, { initial: false, mode: "wait", children: [
            direction === "asc" && /* @__PURE__ */ jsxRuntime.jsx(
              framerMotion.motion.div,
              {
                initial: { opacity: 0, y: -10 },
                animate: { opacity: 1, y: 0 },
                exit: { opacity: 0, y: 10, transition: { duration: 0.05 } },
                children: /* @__PURE__ */ jsxRuntime.jsx(
                  Icon,
                  {
                    className: tailwindMerge.twMerge(
                      theme2.icon.base,
                      theme2.icon.ascending,
                      iconClassName
                    )
                  }
                )
              },
              "asc"
            ),
            direction === "desc" && /* @__PURE__ */ jsxRuntime.jsx(
              framerMotion.motion.div,
              {
                initial: { opacity: 0, y: -10 },
                animate: { opacity: 1, y: 0 },
                exit: { opacity: 0, y: 10, transition: { duration: 0.05 } },
                children: /* @__PURE__ */ jsxRuntime.jsx(Icon, { className: tailwindMerge.twMerge(theme2.icon.base, iconClassName) })
              },
              "desc"
            ),
            !!NeutralIcon && !direction && /* @__PURE__ */ jsxRuntime.jsx(
              framerMotion.motion.div,
              {
                initial: { opacity: 0, y: -10 },
                animate: { opacity: 1, y: 0 },
                exit: { opacity: 0, y: 10, transition: { duration: 0.05 } },
                children: /* @__PURE__ */ jsxRuntime.jsx(
                  NeutralIcon,
                  {
                    className: tailwindMerge.twMerge(theme2.icon.base, neutralIconClassName)
                  }
                )
              },
              "neutral"
            )
          ] })
        ]
      }
    );
  };
  const baseTheme$f = {
    base: "cursor-pointer select-none flex items-center relative",
    disabled: "cursor-[initial]",
    hasValue: "cursor-not-allowed",
    icon: {
      base: "w-4 h-4 align-middle mx-1.5 fill-current",
      ascending: "rotate-180"
    }
  };
  const sortTheme = {
    ...baseTheme$f,
    base: [baseTheme$f.base, "text-surface-content"].join(" ")
  };
  const legacySortTheme = {
    ...baseTheme$f,
    icon: {
      ...baseTheme$f.icon,
      base: "h-[var(--sort-icon-size)] w-[var(--sort-icon-size)] mx-[var(--spacing-sm)] fill-[var(--sort-icon-color)]"
    }
  };
  const SearchIcon = () => /* @__PURE__ */ jsxRuntime.jsx(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "none",
      viewBox: "0 0 24 24",
      strokeWidth: "1.5",
      stroke: "currentColor",
      children: /* @__PURE__ */ jsxRuntime.jsx(
        "path",
        {
          strokeLinecap: "round",
          strokeLinejoin: "round",
          d: "M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"
        }
      )
    }
  );
  const CommandPaletteInput = ({
    value,
    autoFocus,
    icon = /* @__PURE__ */ jsxRuntime.jsx(SearchIcon, {}),
    hotkeys,
    placeholder,
    onHotkey,
    onBlur,
    onChange,
    onKeyPress,
    theme: customTheme
  }) => {
    const inputRef = React.useRef(null);
    const handlerRef = React.useRef(keys$1());
    const keyMapRef = React.useRef(/* @__PURE__ */ new Map());
    React.useLayoutEffect(() => {
      if (autoFocus) {
        requestAnimationFrame(() => {
          var _a;
          return (_a = inputRef.current) == null ? void 0 : _a.focus();
        });
      }
    }, [autoFocus]);
    React.useEffect(() => {
      if (typeof window !== "undefined") {
        const handler = handlerRef.current;
        const keyMap = keyMapRef.current;
        for (const hotkey of hotkeys) {
          const callback = () => onHotkey(hotkey);
          handler.add(hotkey.hotkey, callback);
          keyMap.set(hotkey.hotkey, callback);
        }
        window.addEventListener("keydown", handler.handle);
        return () => {
          [...keyMap].forEach(([key, cb]) => handler.remove(key, cb));
          window.removeEventListener("keydown", handler.handle);
          keyMapRef.current = /* @__PURE__ */ new Map();
        };
      }
    }, [onHotkey, hotkeys]);
    const { input: inputTheme2 } = useComponentTheme(
      "commandPalette",
      customTheme
    );
    return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: inputTheme2.base, children: [
      icon && /* @__PURE__ */ jsxRuntime.jsx("span", { className: inputTheme2.icon, children: icon }),
      /* @__PURE__ */ jsxRuntime.jsx(
        "input",
        {
          className: inputTheme2.input,
          ref: inputRef,
          type: "text",
          value,
          placeholder,
          autoCorrect: "off",
          spellCheck: "false",
          autoComplete: "off",
          onChange: (e) => onChange(e.target.value),
          onKeyDown: onKeyPress,
          onBlur
        }
      )
    ] });
  };
  const baseTheme$e = {
    base: "flex w-full items-center border-b-2",
    input: "flex-1 border-0 box-border p-2.5 focus-within:outline-none focus-visible:outline-none",
    icon: "w-4 h-4 ml-2.5"
  };
  const commandPaletteInputTheme = {
    ...baseTheme$e,
    base: [baseTheme$e.base, "bg-panel border-bottom border-panel-accent"].join(
      " "
    ),
    input: [
      baseTheme$e.input,
      "bg-panel text-panel-content placeholder:placeholder-accent"
    ].join(" ")
  };
  const cssVarsCommandPaletteInputTheme = {
    ...baseTheme$e,
    base: [baseTheme$e.base, "border-[var(--body-background)]"].join(" "),
    input: [
      baseTheme$e.input,
      "text-[var(--input-color)] placeholder:text-[var(--input-color-placeholder)] [padding:_var(--spacing-md)] [font-family:_var(--font-family)]"
    ].join(" ")
  };
  const DATA_ATTRIBUTE_INDEX = "keyboard_index";
  const useFlattenedTree = (children, selectedIndex, onSelectedIndexChange) => {
    const itemsRef = React.useRef([]);
    const hotkeyRef = React.useRef([]);
    const [flattenedTree, setFlattenedTree] = React.useState([]);
    function flattenChildren(nodes) {
      const result = [];
      React.Children.forEach(nodes, (child, index) => {
        if (React.isValidElement(child)) {
          if (child.type.displayName === "CommandPaletteSection") {
            result.push(
              React.cloneElement(child, {
                children: flattenChildren(child.props.children),
                index
              })
            );
          } else if (child.type.displayName === "CommandPaletteItem") {
            const index2 = itemsRef.current.length;
            if (child.props.hotkey) {
              hotkeyRef.current.push({
                hotkey: child.props.hotkey,
                index: index2
              });
            }
            const clone = React.cloneElement(child, {
              // NOTE: This isn't working for some reason
              ref: (ref) => itemsRef.current[index2] = ref,
              active: index2 === selectedIndex,
              onClick: () => onSelectedIndexChange == null ? void 0 : onSelectedIndexChange(index2),
              [DATA_ATTRIBUTE_INDEX]: index2
            });
            itemsRef.current[index2] = clone;
            result.push(clone);
          } else {
            result.push(child);
          }
        }
      });
      return result;
    }
    React.useEffect(() => {
      itemsRef.current = [];
      hotkeyRef.current = [];
      setFlattenedTree(flattenChildren(children));
    }, [children, selectedIndex]);
    return {
      flattenedTree,
      hotkeys: hotkeyRef.current,
      itemsRef
    };
  };
  const CommandPalette = ({
    search,
    placeholder,
    children,
    inputIcon,
    autoFocus = true,
    emptyMessage,
    onHotkey,
    onSelectedIndexChange,
    onSearchChange,
    theme: customTheme
  }) => {
    const [selectedIndex, setSelectedIndex] = React.useState(-1);
    const [filterText, setFilterText] = React.useState(search);
    const { flattenedTree, itemsRef, hotkeys } = useFlattenedTree(
      children,
      selectedIndex,
      onSelectedIndexChange
    );
    const hasChildren = React.Children.count(children) > 0;
    const elementRef = React.useRef(null);
    const handleKeyDown = (event) => {
      if (event.key === "ArrowUp") {
        setSelectedIndex((prev) => Math.max(prev - 1, -1));
      } else if (event.key === "ArrowDown") {
        setSelectedIndex((prev) => Math.min(prev + 1, itemsRef.current.length - 1));
      } else if (event.key === "Enter" && itemsRef.current[selectedIndex]) {
        onSelectedIndexChange == null ? void 0 : onSelectedIndexChange(selectedIndex);
        setSelectedIndex(-1);
      }
    };
    React.useEffect(() => {
      var _a;
      if (selectedIndex > -1) {
        (_a = elementRef.current.querySelector(`[${DATA_ATTRIBUTE_INDEX}="${selectedIndex}"]`)) == null ? void 0 : _a.scrollIntoView();
      }
    }, [selectedIndex, flattenedTree]);
    const theme2 = useComponentTheme(
      "commandPalette",
      customTheme
    );
    return /* @__PURE__ */ jsxRuntime.jsxs(Card, { className: theme2.base, disablePadding: true, ref: elementRef, children: [
      /* @__PURE__ */ jsxRuntime.jsx(
        CommandPaletteInput,
        {
          value: filterText,
          placeholder,
          autoFocus,
          icon: inputIcon,
          hotkeys,
          onHotkey,
          onChange: (val) => {
            setFilterText(val);
            onSearchChange == null ? void 0 : onSearchChange(val);
          },
          onKeyPress: handleKeyDown,
          onBlur: () => setSelectedIndex(-1)
        }
      ),
      /* @__PURE__ */ jsxRuntime.jsxs(MotionGroup, { children: [
        hasChildren && /* @__PURE__ */ jsxRuntime.jsx(Card, { className: theme2.inner, disablePadding: true, children: /* @__PURE__ */ jsxRuntime.jsx(List, { children: flattenedTree }) }),
        !hasChildren && emptyMessage && /* @__PURE__ */ jsxRuntime.jsx(List, { className: theme2.emptyContainer, children: /* @__PURE__ */ jsxRuntime.jsx(ListItem, { children: emptyMessage }) })
      ] })
    ] });
  };
  let isMac = false;
  try {
    if (typeof window !== "undefined") {
      isMac = navigator.platform.toUpperCase().indexOf("MAC") >= 0;
    }
  } catch (e) {
  }
  const MODIFIER_KEY = isMac ? "⌘" : "CTRL";
  function getHotkeyText(hotkey) {
    return hotkey.replace("modifier", MODIFIER_KEY).replace("mod", MODIFIER_KEY).replace("meta", MODIFIER_KEY).replace("shift", "⌥").replace("plus", "+").replace("minus", "-");
  }
  const Kbd = ({
    className,
    keycode,
    theme: customTheme,
    ...rest
  }) => {
    const split = keycode.split("+").map(getHotkeyText);
    const theme2 = useComponentTheme("kbd");
    return /* @__PURE__ */ jsxRuntime.jsx("span", { className: theme2.base, children: split == null ? void 0 : split.map((key, index) => /* @__PURE__ */ jsxRuntime.jsx(Chip, { ...rest, className: tailwindMerge.twMerge(theme2.chip, className), children: /* @__PURE__ */ jsxRuntime.jsx("kbd", { children: key }) }, index)) });
  };
  const baseTheme$d = {
    base: "inline-flex gap-1 items-center",
    chip: "whitespace-nowrap rounded font-mono"
  };
  const kbdTheme = {
    ...baseTheme$d
  };
  const legacyKbdTheme = {
    ...baseTheme$d,
    base: [baseTheme$d.base, "gap-[var(--spacing-sm);]"].join(" "),
    chip: [
      baseTheme$d.chip,
      "rounded-[var(--border-radius-sm)] [font-family:_var(--mono-font-family)]"
    ].join(" ")
  };
  const CommandPaletteItem = React.forwardRef(
    ({
      children,
      active,
      className,
      end,
      hotkey,
      onClick,
      theme: customTheme,
      ...rest
    }, ref) => {
      const { item: itemTheme } = useComponentTheme(
        "commandPalette",
        customTheme
      );
      return /* @__PURE__ */ jsxRuntime.jsx(MotionItem, { layout: true, children: /* @__PURE__ */ jsxRuntime.jsx(
        ListItem,
        {
          ...rest,
          ref,
          className: tailwindMerge.twMerge(
            itemTheme.base,
            active && itemTheme.active,
            onClick && itemTheme.clickable
          ),
          end: /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
            hotkey && /* @__PURE__ */ jsxRuntime.jsx(Kbd, { keycode: hotkey, size: "small" }),
            end
          ] }),
          children
        }
      ) });
    }
  );
  CommandPaletteItem.displayName = "CommandPaletteItem";
  const baseTheme$c = {
    base: "transition-colors ease-in-out duration-200",
    active: "",
    clickable: "cursor-pointer"
  };
  const commandPaletteItemTheme = {
    ...baseTheme$c,
    active: [baseTheme$c.active, "bg-primary text-panel-content"].join(" "),
    clickable: [
      baseTheme$c.clickable,
      "hover:bg-primary-hover/70 dark:hover:bg-primary-hover hover:dark:text-white"
    ].join(" ")
  };
  const cssVarsCommandPaletteItemTheme = {
    ...baseTheme$c,
    clickable: [
      baseTheme$c.clickable,
      "hover:bg-[var(--primary-background)] text-[var(--primary-color-hover)]"
    ].join(" ")
  };
  const CommandPaletteSection = React.forwardRef(({ children, className, title, index, theme: customTheme, ...rest }, ref) => {
    const { section: sectionTheme } = useComponentTheme(
      "commandPalette",
      customTheme
    );
    return /* @__PURE__ */ jsxRuntime.jsx(MotionItem, { layout: true, children: /* @__PURE__ */ jsxRuntime.jsxs(
      List,
      {
        ref,
        ...rest,
        className: tailwindMerge.twMerge(
          sectionTheme.base,
          index === 0 && sectionTheme.first,
          className
        ),
        children: [
          title && /* @__PURE__ */ jsxRuntime.jsx(ListHeader, { children: title }),
          /* @__PURE__ */ jsxRuntime.jsx(MotionGroup, { children })
        ]
      }
    ) });
  });
  CommandPaletteSection.displayName = "CommandPaletteSection";
  const baseTheme$b = {
    base: "",
    first: "pt-2.5"
  };
  const commandPaletteSectionTheme = {
    ...baseTheme$b,
    base: [baseTheme$b.base, "bg-panel"].join(" ")
  };
  const cssVarsCommandPaletteSectionTheme = {
    ...baseTheme$b,
    first: "pt-[var(--spacing-md)]"
  };
  const baseTheme$a = {
    base: "w-full border",
    inner: "max-h-[80vh] overflow-y-auto"
  };
  const commandPaletteTheme = {
    base: [baseTheme$a.base, "border-panel-accent"].join(" "),
    inner: [baseTheme$a.inner, "bg-panel border-0"].join(" "),
    emptyContainer: "bg-panel",
    input: commandPaletteInputTheme,
    item: commandPaletteItemTheme,
    section: commandPaletteSectionTheme
  };
  const legacyCommandPaletteTheme = {
    base: [baseTheme$a.base, "border-panel-accent"].join(" "),
    inner: baseTheme$a.inner,
    emptyContainer: "",
    input: cssVarsCommandPaletteInputTheme,
    item: cssVarsCommandPaletteItemTheme,
    section: cssVarsCommandPaletteSectionTheme
  };
  const SvgArrowEnd = (props) => /* @__PURE__ */ React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: "32px", height: "32px", fill: "currentColor", ...props }, /* @__PURE__ */ React__namespace.createElement("path", { d: "M 9.4140625 4 L 8 5.4140625 L 18.585938 16 L 8 26.585938 L 9.4140625 28 L 21 16.414062 L 21 28 L 23 28 L 23 4 L 21 4 L 21 15.585938 L 9.4140625 4 z" }));
  const SvgArrowNext = (props) => /* @__PURE__ */ React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: "32px", height: "32px", fill: "currentColor", ...props }, /* @__PURE__ */ React__namespace.createElement("path", { d: "M 12.96875 4.28125 L 11.53125 5.71875 L 21.8125 16 L 11.53125 26.28125 L 12.96875 27.71875 L 23.96875 16.71875 L 24.65625 16 L 23.96875 15.28125 Z" }));
  const SvgArrowPrevious = (props) => /* @__PURE__ */ React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: "32px", height: "32px", fill: "currentColor", ...props }, /* @__PURE__ */ React__namespace.createElement("path", { d: "M 19.03125 4.28125 L 8.03125 15.28125 L 7.34375 16 L 8.03125 16.71875 L 19.03125 27.71875 L 20.46875 26.28125 L 10.1875 16 L 20.46875 5.71875 Z" }));
  const SvgArrowStart = (props) => /* @__PURE__ */ React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: "32px", height: "32px", fill: "currentColor", ...props }, /* @__PURE__ */ React__namespace.createElement("path", { d: "M 9 4 L 9 28 L 11 28 L 11 16.414062 L 22.585938 28 L 24 26.585938 L 13.414062 16 L 24 5.4140625 L 22.585938 4 L 11 15.585938 L 11 4 L 9 4 z" }));
  const PAGE_COUNT = 6;
  const FUZZY_RANGE = 3;
  function getPageRange(page, totalPages) {
    let startPage = Math.max(page - FUZZY_RANGE, 0);
    let endPage = Math.min(page + FUZZY_RANGE, totalPages);
    if (startPage === 0 && endPage !== totalPages) {
      endPage = startPage + PAGE_COUNT;
    } else if (endPage === totalPages && startPage !== 0) {
      startPage = endPage - PAGE_COUNT;
    }
    return [startPage, endPage];
  }
  function getItemsRange(page, perPage, totalItems) {
    const startItem = page * perPage + 1;
    const endOfPage = (page + 1) * perPage;
    const endItem = Math.min(endOfPage, totalItems);
    return [startItem, endItem];
  }
  const Pager = ({
    className,
    pageClassName,
    activePageClassName,
    pagesContainerClassName,
    page,
    size,
    total,
    startArrow = /* @__PURE__ */ jsxRuntime.jsx(SvgArrowStart, {}),
    endArrow = /* @__PURE__ */ jsxRuntime.jsx(SvgArrowEnd, {}),
    previousArrow = /* @__PURE__ */ jsxRuntime.jsx(SvgArrowPrevious, {}),
    nextArrow = /* @__PURE__ */ jsxRuntime.jsx(SvgArrowNext, {}),
    onPageChange,
    displayMode = "pages",
    theme: customTheme
  }) => {
    const pageCount = Math.ceil(total / size);
    const canPrevious = page !== 0;
    const canNext = page < pageCount - 1;
    const [startPage, endPage] = getPageRange(page, pageCount - 1);
    const [startItem, endItem] = getItemsRange(page, size, total);
    const theme2 = useComponentTheme("pager", customTheme);
    const previousPage = React.useCallback(() => {
      if (canPrevious) {
        onPageChange == null ? void 0 : onPageChange(page - 1);
      } else {
        onPageChange == null ? void 0 : onPageChange(0);
      }
    }, [canPrevious, page, onPageChange]);
    const nextPage = React.useCallback(() => {
      if (canNext) {
        onPageChange == null ? void 0 : onPageChange(page + 1);
      } else {
        onPageChange == null ? void 0 : onPageChange(pageCount - 1);
      }
    }, [canNext, page, onPageChange, pageCount]);
    if (pageCount === 1) {
      return null;
    }
    return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: tailwindMerge.twMerge(theme2.base, className), children: [
      (displayMode === "items" || displayMode === "all") && /* @__PURE__ */ jsxRuntime.jsxs("div", { className: theme2.pagerDisplayItems, children: [
        pageCount === 1 && total > 0 && /* @__PURE__ */ jsxRuntime.jsxs(Text, { children: [
          "Showing ",
          total === 1 ? total : `all ${total.toLocaleString()}`,
          " ",
          /* @__PURE__ */ jsxRuntime.jsx(Pluralize, { count: total, singular: "item", showCount: false })
        ] }),
        pageCount > 1 && /* @__PURE__ */ jsxRuntime.jsx(Stack, { dense: true, children: /* @__PURE__ */ jsxRuntime.jsxs(Text, { children: [
          startItem.toLocaleString(),
          "-",
          endItem.toLocaleString(),
          " of",
          " ",
          /* @__PURE__ */ jsxRuntime.jsx(Pluralize, { count: total, singular: "item" })
        ] }) })
      ] }),
      startArrow && /* @__PURE__ */ jsxRuntime.jsx(
        Button,
        {
          className: tailwindMerge.twMerge(theme2.control, theme2.firstPage),
          variant: "text",
          size: "small",
          disablePadding: true,
          title: "First Page",
          onClick: () => onPageChange == null ? void 0 : onPageChange(0),
          disabled: !canPrevious,
          children: startArrow
        }
      ),
      /* @__PURE__ */ jsxRuntime.jsx(
        Button,
        {
          className: tailwindMerge.twMerge(theme2.control, theme2.prevPage),
          variant: "text",
          size: "small",
          disablePadding: true,
          title: "Previous page",
          onClick: previousPage,
          disabled: !canPrevious,
          children: previousArrow
        }
      ),
      (displayMode === "pages" || displayMode === "all") && /* @__PURE__ */ jsxRuntime.jsxs("div", { className: tailwindMerge.twMerge(theme2.pages.base, pagesContainerClassName), children: [
        startPage >= 2 && /* @__PURE__ */ jsxRuntime.jsx("div", { className: tailwindMerge.twMerge(theme2.ellipsis), children: " ..." }),
        [...Array(pageCount)].map((_, i) => /* @__PURE__ */ jsxRuntime.jsx(React.Fragment, { children: i >= startPage && i <= endPage && /* @__PURE__ */ jsxRuntime.jsx(
          Button,
          {
            variant: "text",
            size: "small",
            disabled: page === i,
            title: `Page ${(i + 1).toLocaleString()}`,
            className: tailwindMerge.twMerge(
              theme2.pages.page.base,
              page === i && (activePageClassName || theme2.pages.page.active),
              pageClassName
            ),
            onClick: () => onPageChange == null ? void 0 : onPageChange(i),
            children: (i + 1).toLocaleString()
          }
        ) }, i)),
        endPage <= pageCount - FUZZY_RANGE && /* @__PURE__ */ jsxRuntime.jsx("div", { className: tailwindMerge.twMerge(theme2.ellipsis), children: "... " })
      ] }),
      /* @__PURE__ */ jsxRuntime.jsx(
        Button,
        {
          className: tailwindMerge.twMerge(theme2.control, theme2.nextPage),
          variant: "text",
          title: "Next Page",
          size: "small",
          disablePadding: true,
          onClick: nextPage,
          disabled: !canNext,
          children: nextArrow
        }
      ),
      endArrow && /* @__PURE__ */ jsxRuntime.jsx(
        Button,
        {
          className: tailwindMerge.twMerge(theme2.control, theme2.lastPage),
          size: "small",
          title: "Last Page",
          disablePadding: true,
          variant: "text",
          onClick: () => onPageChange == null ? void 0 : onPageChange(pageCount - 1),
          disabled: !canNext,
          children: endArrow
        }
      )
    ] });
  };
  const baseTheme$9 = {
    base: "items-center flex user-select-none",
    arrows: "h-8 w-8",
    pages: {
      base: "inline-flex",
      page: {
        base: "py-1",
        active: "font-bold"
      }
    },
    ellipsis: "cursor-pointer",
    pagerDisplayItems: "mr-1.5",
    control: "[&>svg]:w-5 [&>svg]:h-5",
    firstPage: "",
    prevPage: "",
    lastPage: "",
    nextPage: ""
  };
  const pagerTheme = {
    ...baseTheme$9,
    pages: {
      ...baseTheme$9.pages,
      page: {
        base: [baseTheme$9.pages.page.base, "text-slate-500"].join(" "),
        active: [baseTheme$9.pages.page.active, "!text-surface-content"].join(" ")
      }
    },
    control: [
      baseTheme$9.control,
      "text-slate-200 light:text-slate-400 disabled:light:text-slate-300"
    ].join(" "),
    pagerDisplayItems: [baseTheme$9.pagerDisplayItems, "text-slate-500"].join(" ")
  };
  const legacyPagerTheme = {
    ...baseTheme$9,
    pages: {
      ...baseTheme$9.pages,
      page: {
        base: [baseTheme$9.pages.page.base, "px-[var(--spacing-sm)]"].join(" "),
        active: [baseTheme$9.pages.page.active, "!text-[var(--input-color)]"].join(
          " "
        )
      }
    },
    pagerDisplayItems: ["text-[var(--gray-100)] mr-[var(--spacing-sm)]"].join(" ")
  };
  const AvatarGroup = React.forwardRef(
    ({
      children,
      className,
      size = 10,
      theme: customTheme,
      ...rest
    }, ref) => {
      const childrenArray = React.Children.toArray(children);
      const { data, hasMore, remaining } = useInfinityList({
        items: childrenArray,
        size
      });
      const theme2 = useComponentTheme(
        "avatarGroup",
        customTheme
      );
      return /* @__PURE__ */ jsxRuntime.jsxs("div", { ...rest, ref, className: tailwindMerge.twMerge(theme2.base, className), children: [
        data.map((child, index) => /* @__PURE__ */ jsxRuntime.jsx("div", { className: theme2.avatar, children: child }, index)),
        hasMore && /* @__PURE__ */ jsxRuntime.jsxs("span", { className: theme2.overflow, children: [
          "+",
          remaining,
          " more"
        ] })
      ] });
    }
  );
  const baseTheme$8 = {
    base: "flex items-center",
    avatar: "-ml-2.5",
    overflow: "ml-[5px]"
  };
  const avatarGroupTheme = {
    ...baseTheme$8,
    base: [baseTheme$8.base, "text-surface-content"].join(" ")
  };
  const legacyAvatarGroupTheme = {
    ...baseTheme$8,
    base: [
      baseTheme$8.base,
      "text-[var(--avatar-initials-color)] border-[var(--avatar-border)]"
    ].join(" ")
  };
  const Badge = React.forwardRef(
    ({
      children,
      color: color2 = "default",
      className,
      disableMargins,
      content,
      hidden,
      placement = "top-end",
      theme: customTheme,
      ...rest
    }, ref) => {
      const theme2 = useComponentTheme("badge", customTheme);
      return /* @__PURE__ */ jsxRuntime.jsxs(
        "span",
        {
          className: tailwindMerge.twMerge(theme2.base, disableMargins && theme2.disableMargins),
          children: [
            children,
            !hidden && /* @__PURE__ */ jsxRuntime.jsx(
              framerMotion.motion.span,
              {
                initial: { opacity: 0, scale: 1 },
                animate: { opacity: 1, scale: 1 },
                "aria-hidden": "true",
                children: /* @__PURE__ */ jsxRuntime.jsx(
                  "span",
                  {
                    ...rest,
                    ref,
                    className: tailwindMerge.twMerge(
                      theme2.badge,
                      theme2.position,
                      theme2.colors[color2],
                      theme2.positions[placement],
                      className
                    ),
                    children: content
                  }
                )
              }
            )
          ]
        }
      );
    }
  );
  const baseTheme$7 = {
    base: "relative inline-flex align-middle shrink-0 mx-2 my-0",
    disableMargins: "m-0",
    badge: `flex flex-row flex-wrap justify-center content-center items-center absolute box-border
   leading-none text-xs p-1.5 w-[18px] h-[18px] z-[1] rounded-[50%] pointer-events-none `,
    position: "translate-x-2/4 -translate-y-2/4 origin-[100%_0%] right-0 top-0",
    positions: {
      "top-start": "top-0 left-0 -translate-x-2/4 -translate-y-2/4 origin-[0%_0%]",
      "top-end": "top-0 right-0 translate-x-2/4 -translate-y-2/4 origin-[100%_0%]",
      "bottom-start": "bottom-0 left-0 -translate-x-2/4 translate-y-2/4 origin-[0%_100%]",
      "bottom-end": "bottom-0 right-0 translate-x-2/4 translate-y-2/4 origin-[100%_100%]"
    }
  };
  const badgeTheme = {
    base: baseTheme$7.base,
    disableMargins: baseTheme$7.disableMargins,
    badge: baseTheme$7.badge,
    position: baseTheme$7.position,
    positions: baseTheme$7.positions,
    colors: {
      default: "bg-white text-black",
      primary: "bg-primary text-surface-content",
      secondary: "bg-secondary text-surface-content",
      error: "bg-error text-surface-content"
    }
  };
  const legacyBadgeTheme = {
    base: baseTheme$7.base,
    disableMargins: baseTheme$7.disableMargins,
    badge: [
      baseTheme$7.badge,
      "p-[var(--spacing-xs)] rounded-[var(--badge-border-radius)] text-[var(--font-size-sm)]"
    ].join(" "),
    position: baseTheme$7.position,
    positions: baseTheme$7.positions,
    colors: {
      default: "bg-[var(--badge-color-background-default)] text-[var(--badge-color-default)]",
      primary: "bg-[var(--badge-color-background-primary)] text-[var(--badge-color-primary)]",
      secondary: "bg-[var(--badge-color-background-secondary)] text-[var(--badge-color-secondary)]",
      error: "bg-[var(--badge-color-background-error)] text-[var(--badge-color-error)]"
    }
  };
  const IconButton = React.forwardRef(
    ({ children, ...rest }, ref) => /* @__PURE__ */ jsxRuntime.jsx(Button, { ...rest, ref, children })
  );
  const createStateHook = () => {
    let tooltips = [];
    function addTooltip(newTip) {
      tooltips = [...tooltips, newTip];
    }
    function deactivateTooltip(tooltip, isPopover) {
      const idx = tooltips.indexOf(tooltip);
      if (idx > -1) {
        const tip = tooltips[idx];
        const shouldRemove = tip(false, isPopover);
        if (shouldRemove) {
          tooltips.splice(idx, 1);
        }
      }
    }
    function deactivateAllTooltips(isPopover) {
      const newTooltips = [];
      tooltips.forEach((ref) => {
        const shouldRemvoe = ref(false, isPopover);
        if (!shouldRemvoe) {
          newTooltips.push(ref);
        }
      });
      tooltips = [...newTooltips];
    }
    return () => {
      const [state, setState] = React.useState([]);
      React.useEffect(() => {
        setState(tooltips);
      }, []);
      return {
        tooltips: state,
        deactivateAllTooltips,
        deactivateTooltip,
        addTooltip
      };
    };
  };
  const useTooltipState = createStateHook();
  const Tooltip = ({
    className,
    children,
    content,
    triggerClassName,
    disabled = false,
    enterDelay = 0,
    leaveDelay = 200,
    placement = "top",
    trigger = "hover",
    visible = false,
    followCursor = false,
    closeOnClick = false,
    closeOnEscape = true,
    closeOnBodyClick = true,
    pointerEvents = "none",
    isPopover,
    onOpen,
    onClose,
    theme: customTheme,
    ...rest
  }) => {
    const { addTooltip, deactivateTooltip, deactivateAllTooltips } = useTooltipState();
    const [internalVisible, setInternalVisible] = React.useState(visible);
    const timeout = React.useRef(null);
    const mounted = React.useRef(false);
    const ref = React.useRef(
      (vis, isPop) => {
        if (isPop === isPopover) {
          setInternalVisible(vis);
        }
        return isPop === isPopover;
      }
    );
    React.useEffect(() => {
      if (!mounted.current) {
        mounted.current = true;
      } else {
        setInternalVisible(visible);
      }
      const curRef = ref.current;
      const timer = timeout.current;
      return () => {
        clearTimeout(timer);
        deactivateTooltip(curRef, isPopover);
      };
    }, [deactivateTooltip, isPopover, visible]);
    const theme2 = useComponentTheme("tooltip", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsx(
      ConnectedOverlay,
      {
        ...rest,
        placement,
        trigger,
        followCursor,
        triggerClassName,
        portalClassName: pointerEvents === "none" && theme2.disablePointer,
        open: internalVisible,
        closeOnBodyClick,
        closeOnEscape,
        content: () => {
          const contentChildren = typeof content === "function" ? content() : content;
          if (!contentChildren) {
            return null;
          }
          return /* @__PURE__ */ jsxRuntime.jsx(
            framerMotion.motion.div,
            {
              className: tailwindMerge.twMerge(theme2.base, className),
              initial: {
                opacity: 0,
                scale: 0.3,
                transition: {
                  when: "beforeChildren"
                }
              },
              animate: {
                opacity: 1,
                scale: 1,
                transition: {
                  when: "beforeChildren"
                }
              },
              exit: { opacity: 0, scale: 0.3 },
              onClick: () => {
                if (closeOnClick) {
                  deactivateAllTooltips(isPopover);
                }
              },
              children: contentChildren
            }
          );
        },
        onOpen: () => {
          if (!internalVisible) {
            clearTimeout(timeout.current);
            timeout.current = setTimeout(() => {
              if (!disabled) {
                deactivateAllTooltips(isPopover);
                setInternalVisible(true);
                addTooltip(ref.current);
                onOpen == null ? void 0 : onOpen();
              }
            }, enterDelay);
          }
        },
        onClose: (e) => {
          var _a, _b;
          if (((_a = e == null ? void 0 : e.nativeEvent) == null ? void 0 : _a.type) !== "click" || ((_b = e == null ? void 0 : e.nativeEvent) == null ? void 0 : _b.type) === "click" && closeOnClick) {
            clearTimeout(timeout.current);
            timeout.current = setTimeout(() => {
              deactivateTooltip(ref.current, isPopover);
              onClose == null ? void 0 : onClose();
            }, leaveDelay);
          }
        },
        children
      }
    );
  };
  const baseTheme$6 = {
    base: "whitespace-nowrap text-center will-change-[transform,opacity] p-1.5 rounded",
    disablePointer: "pointer-events-none"
  };
  const tooltipTheme = {
    ...baseTheme$6,
    base: [baseTheme$6.base, "bg-surface text-surface-content"].join(" ")
  };
  const legacyTooltipTheme = {
    ...baseTheme$6,
    base: [
      baseTheme$6.base,
      "text-[color:var(--tooltip-color)] rounded-[var(--tooltip-border-radius)] border-[length:var(--tooltip-border)] pt-[var(--tooltip-spacing)] pr-[var(--tooltip-spacing)] pb-[var(--tooltip-spacing)] pl-[var(--tooltip-spacing)] bg-[var(--tooltip-background)]"
    ].join(" ")
  };
  const Popover = ({
    closeOnEscape = true,
    closeOnBodyClick = true,
    trigger = "click",
    leaveDelay = 200,
    children,
    content,
    className,
    disablePadding,
    popoverStyle,
    popoverClassName,
    theme: customTheme,
    autoFocus,
    ...rest
  }) => {
    const id2 = useId();
    const theme2 = useComponentTheme("popover", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsx(
      Tooltip,
      {
        ...rest,
        trigger,
        pointerEvents: "initial",
        leaveDelay,
        isPopover: true,
        className: tailwindMerge.twMerge(
          theme2.base,
          disablePadding && theme2.disablePadding,
          className
        ),
        content: () => {
          const isContentFunction = typeof content === "function";
          const children2 = isContentFunction ? content() : content;
          if (!children2) {
            return null;
          }
          return /* @__PURE__ */ jsxRuntime.jsx(
            FocusTrap,
            {
              focusTrapOptions: {
                escapeDeactivates: true,
                clickOutsideDeactivates: true,
                fallbackFocus: `#${id2}`,
                initialFocus: autoFocus
              },
              children: /* @__PURE__ */ jsxRuntime.jsx(
                "div",
                {
                  id: id2,
                  tabIndex: -1,
                  style: popoverStyle,
                  className: popoverClassName,
                  children: children2
                }
              )
            }
          );
        },
        children
      }
    );
  };
  const baseTheme$5 = {
    base: "whitespace-nowrap text-center will-change-[transform,opacity] p-1.5 rounded",
    disablePadding: "p-0"
  };
  const popoverTheme = {
    ...baseTheme$5,
    base: [baseTheme$5.base, "bg-panel text-panel-content"].join(" ")
  };
  const legacyPopoverTheme = {
    ...baseTheme$5,
    base: [
      baseTheme$5.base,
      "text-[color:var(--popover-color)] rounded-[var(--popover-border-radius)] pt-[var(--popover-spacing)] pr-[var(--popover-spacing)] pb-[var(--popover-spacing)] pl-[var(--popover-spacing)] bg-[var(--popover-background)]"
    ].join(" ")
  };
  const DialogHeader = ({
    children,
    className,
    showCloseButton,
    disablePadding,
    onClose,
    theme: customTheme
  }) => {
    const theme2 = useComponentTheme("dialog", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "header",
      {
        className: tailwindMerge.twMerge(
          theme2.header.base,
          className,
          disablePadding && "pt-0 pb-0 pl-0 pr-0"
        ),
        children: [
          /* @__PURE__ */ jsxRuntime.jsx("div", { children: typeof children === "string" ? /* @__PURE__ */ jsxRuntime.jsx("h1", { className: theme2.header.text, children }) : children }),
          showCloseButton && /* @__PURE__ */ jsxRuntime.jsx(
            "button",
            {
              type: "button",
              className: theme2.header.closeButton,
              onClick: onClose,
              children: "✕"
            }
          )
        ]
      }
    );
  };
  const Dialog = ({
    children,
    open,
    className,
    innerClassName,
    contentClassName,
    header,
    headerElement = /* @__PURE__ */ jsxRuntime.jsx(DialogHeader, {}),
    footer,
    onClose,
    size = "50%",
    disablePadding = false,
    hasBackdrop = true,
    showCloseButton = true,
    closeOnBackdropClick = true,
    closeOnEscape = true,
    theme: customTheme
  }) => {
    const id2 = useId();
    const theme2 = useComponentTheme("dialog", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsx(
      GlobalOverlay,
      {
        open,
        hasBackdrop,
        closeOnEscape,
        closeOnBackdropClick,
        onClose,
        children: ({ overlayIndex }) => /* @__PURE__ */ jsxRuntime.jsx(
          FocusTrap,
          {
            focusTrapOptions: {
              clickOutsideDeactivates: true,
              escapeDeactivates: true,
              fallbackFocus: `#${id2}-content`
            },
            children: /* @__PURE__ */ jsxRuntime.jsx("div", { id: id2, tabIndex: -1, children: /* @__PURE__ */ jsxRuntime.jsx(
              framerMotion.motion.div,
              {
                initial: { opacity: 0, y: "-20%" },
                animate: { opacity: 1, y: 0 },
                exit: { opacity: 0, y: "20%" },
                transition: { duration: 0.5, ease: [0.04, 0.62, 0.23, 0.98] },
                style: { zIndex: overlayIndex },
                className: tailwindMerge.twMerge(theme2.base, className),
                children: /* @__PURE__ */ jsxRuntime.jsxs(
                  "div",
                  {
                    className: tailwindMerge.twMerge(theme2.inner, innerClassName),
                    style: { width: size },
                    children: [
                      (header || headerElement) && /* @__PURE__ */ jsxRuntime.jsx(
                        CloneElement,
                        {
                          element: headerElement,
                          showCloseButton,
                          disablePadding,
                          onClose,
                          children: header
                        }
                      ),
                      /* @__PURE__ */ jsxRuntime.jsx(
                        "section",
                        {
                          id: `${id2}-content`,
                          className: classNames(
                            theme2.content,
                            contentClassName,
                            !header && "p-[20px]",
                            disablePadding && "pt-0 pb-0 pl-0 pr-0"
                          ),
                          children: typeof children === "function" ? children() : children
                        }
                      ),
                      footer && /* @__PURE__ */ jsxRuntime.jsx("footer", { className: theme2.footer, children: footer })
                    ]
                  }
                )
              }
            ) })
          }
        )
      }
    );
  };
  const useDialog = (prop) => {
    const { open, onClose } = prop || {};
    const [internalOpen, setInternalOpen] = React.useState(open);
    React.useEffect(() => {
      setInternalOpen(open);
    }, [open]);
    const onCloseInternal = React.useCallback(() => {
      setInternalOpen(false);
      onClose == null ? void 0 : onClose();
    }, [onClose]);
    const onToggleOpen = () => {
      setInternalOpen(!open);
    };
    const Component = React.useCallback(
      (props) => /* @__PURE__ */ jsxRuntime.jsx(Dialog, { ...props, open: internalOpen, onClose: onCloseInternal }),
      [internalOpen, onCloseInternal]
    );
    return {
      isOpen: internalOpen,
      setOpen: setInternalOpen,
      toggleOpen: onToggleOpen,
      Dialog: Component
    };
  };
  const baseTheme$4 = {
    base: "justify-center items-center flex pointer-events-none top-0 left-0 w-full h-full fixed will-change-transform will-change-opacity",
    inner: "flex flex-col box-border outline-0 pointer-events-auto overflow-auto max-w-[80vw] max-h-[80vh]",
    content: "p-[20px] flex-auto overflow-auto",
    footer: "flex p-[20px] pb-[10px]",
    header: {
      base: "flex justify-between pt-[20px] px-[20px] pb-[10px]",
      text: "flex-1 m-0 p-0 inline-flex text-3xl font-bold",
      closeButton: "p-0 m-0 ml-[15px] opacity-80 h-auto w-auto inline-flex bg-none border-none cursor-pointer items-center text-[16px] focus:outline-none"
    }
  };
  const dialogTheme = {
    ...baseTheme$4,
    inner: [baseTheme$4.inner, "bg-panel text-panel-content"].join(" "),
    header: {
      ...baseTheme$4.header,
      closeButton: [baseTheme$4.header.closeButton, "text-panel-content"].join(" ")
    }
  };
  const legacyDialogTheme = {
    ...baseTheme$4,
    inner: [
      baseTheme$4.inner,
      "bg-[var(--dialog-background)] text-[var(--dialog-color)]"
    ].join(" ")
  };
  const variants = {
    start: {
      initial: {
        x: "-100%"
      },
      animate: {
        x: "0%"
      }
    },
    end: {
      initial: {
        x: "100%"
      },
      animate: {
        x: "0%"
      }
    },
    top: {
      initial: {
        y: "-100%"
      },
      animate: {
        y: "0%"
      }
    },
    bottom: {
      initial: {
        y: "100%"
      },
      animate: {
        y: "0%"
      }
    }
  };
  const DrawerHeader = ({
    children,
    className,
    showCloseButton,
    onClose,
    theme: customTheme
  }) => {
    const theme2 = useComponentTheme("drawer", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsxs("header", { className: tailwindMerge.twMerge(theme2.header.base, className), children: [
      /* @__PURE__ */ jsxRuntime.jsx("div", { children: typeof children === "string" ? /* @__PURE__ */ jsxRuntime.jsx("h1", { className: theme2.header.text, children }) : children }),
      showCloseButton && /* @__PURE__ */ jsxRuntime.jsx(
        "button",
        {
          type: "button",
          className: theme2.closeButton.base,
          onClick: onClose,
          children: "✕"
        }
      )
    ] });
  };
  const Drawer = ({
    className,
    contentClassName,
    headerElement = /* @__PURE__ */ jsxRuntime.jsx(DrawerHeader, {}),
    children,
    open,
    backdropClassName,
    header,
    position = "end",
    size = "80%",
    hasBackdrop = true,
    closeOnEscape = true,
    closeOnBackdropClick = true,
    disablePadding = false,
    showCloseButton = true,
    onClose,
    theme: customTheme
  }) => {
    const id2 = useId();
    const variant = variants[position];
    const style = {
      width: position === "start" || position === "end" ? size : "auto",
      height: position === "top" || position === "bottom" ? size : "auto"
    };
    const theme2 = useComponentTheme("drawer", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsx(
      GlobalOverlay,
      {
        open,
        hasBackdrop,
        closeOnEscape,
        closeOnBackdropClick,
        onClose,
        backdropClassName,
        children: ({ overlayIndex }) => /* @__PURE__ */ jsxRuntime.jsx(
          FocusTrap,
          {
            focusTrapOptions: {
              clickOutsideDeactivates: true,
              escapeDeactivates: true,
              fallbackFocus: `#${id2}`
            },
            children: /* @__PURE__ */ jsxRuntime.jsx("div", { id: id2, tabIndex: -1, children: /* @__PURE__ */ jsxRuntime.jsxs(
              framerMotion.motion.div,
              {
                initial: "initial",
                animate: "animate",
                exit: "initial",
                variants: variant,
                transition: {
                  duration: 0.5,
                  ease: [0.04, 0.62, 0.23, 0.98],
                  when: "beforeChildren"
                },
                style: { ...style, zIndex: overlayIndex },
                className: tailwindMerge.twMerge(
                  theme2.base,
                  theme2.positions[position],
                  disablePadding && theme2.disablePadding,
                  className
                ),
                children: [
                  (header || headerElement) && /* @__PURE__ */ jsxRuntime.jsx(
                    CloneElement,
                    {
                      element: headerElement,
                      showCloseButton,
                      onClose,
                      children: header
                    }
                  ),
                  !header && !headerElement && showCloseButton && /* @__PURE__ */ jsxRuntime.jsx(
                    "button",
                    {
                      type: "button",
                      className: tailwindMerge.twMerge(
                        theme2.closeButton.base,
                        theme2.closeButton.headerless
                      ),
                      onClick: onClose,
                      children: "✕"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntime.jsx("div", { className: tailwindMerge.twMerge(theme2.content, contentClassName), children: typeof children === "function" ? children() : children })
                ]
              }
            ) })
          }
        )
      }
    );
  };
  const useDrawer = (prop) => {
    const { open, onClose } = prop || {};
    const [internalOpen, setInternalOpen] = React.useState(open);
    React.useEffect(() => {
      setInternalOpen(open);
    }, [open]);
    const onCloseInternal = React.useCallback(() => {
      setInternalOpen(false);
      onClose == null ? void 0 : onClose();
    }, [onClose]);
    const onToggleOpen = () => {
      setInternalOpen(!internalOpen);
    };
    const Component = React.useCallback(
      (props) => /* @__PURE__ */ jsxRuntime.jsx(Drawer, { ...props, open: internalOpen, onClose: onCloseInternal }),
      [internalOpen, onCloseInternal]
    );
    return {
      isOpen: internalOpen,
      setOpen: setInternalOpen,
      toggleOpen: onToggleOpen,
      Drawer: Component
    };
  };
  const baseTheme$3 = {
    base: "fixed overflow-y-auto overflow-x-hidden",
    header: {
      base: "flex items-center justify-between px-8 py-5 text-3xl font-bold",
      text: "flex-1 m-0"
    },
    content: "px-8 py-5",
    disablePadding: "p-0",
    closeButton: {
      base: "opacity-80 h-auto w-auto min-w-[auto] min-h-[auto] cursor-pointer text-base p-0 border-0 focus:outline-none",
      headerless: "absolute right-5 top-5"
    },
    positions: {
      top: "w-full inset-x-0 top-0",
      end: "h-full inset-y-0 right-0",
      bottom: "w-full inset-x-0 bottom-0",
      start: "h-full inset-y-0 left-0"
    }
  };
  const drawerTheme = {
    ...baseTheme$3,
    base: [baseTheme$3.base, "bg-panel text-panel-content"].join(" ")
  };
  const legacyDrawerTheme = {
    ...baseTheme$3,
    base: [
      baseTheme$3.base,
      "bg-[var(--drawer-background)] text-[var(--drawer-color)]"
    ].join(" "),
    closeButton: {
      ...baseTheme$3.closeButton,
      base: [baseTheme$3.closeButton.base, "text-[var(--drawer-color)]"].join(" ")
    }
  };
  const Menu = React.forwardRef(
    ({
      reference,
      children,
      style,
      className,
      placement = "bottom-start",
      closeOnEscape = true,
      open = false,
      appendToBody = true,
      closeOnBodyClick = true,
      maxHeight = "max-height: calc(100vh - 48px)",
      autofocus = true,
      modifiers,
      autoWidth,
      minWidth,
      maxWidth,
      onClose,
      onMouseEnter,
      onMouseLeave,
      theme: customTheme
    }, ref) => {
      const id2 = useId();
      const internalModifiers = React.useMemo(() => {
        if (autoWidth) {
          const sameWidth = {
            enabled: true,
            order: 840,
            fn: (data) => {
              var _a;
              const { width, left, right } = data.offsets.reference;
              const passedOffset = (_a = modifiers == null ? void 0 : modifiers.offset) == null ? void 0 : _a.offset;
              let passedXOffset = 0;
              let menuWidth = width;
              if (maxWidth && menuWidth > maxWidth) {
                menuWidth = maxWidth;
              } else if (minWidth && menuWidth < minWidth) {
                menuWidth = minWidth;
              }
              if (passedOffset) {
                if (typeof passedOffset === "number") {
                  passedXOffset = passedOffset;
                } else {
                  const [skidding] = passedOffset.split(",");
                  passedXOffset = parseInt(skidding.trim(), 10);
                }
              }
              data.styles.width = menuWidth;
              data.offsets.popper.width = menuWidth;
              data.offsets.popper.left = left + passedXOffset;
              data.offsets.popper.right = right + passedXOffset;
              return data;
            }
          };
          return modifiers ? { ...modifiers, sameWidth } : { sameWidth };
        }
        return modifiers;
      }, [modifiers, autoWidth, minWidth, maxWidth]);
      const theme2 = useComponentTheme("menu", customTheme);
      return /* @__PURE__ */ jsxRuntime.jsx(
        ConnectedOverlay,
        {
          open,
          closeOnBodyClick,
          appendToBody,
          reference,
          placement,
          modifiers: internalModifiers,
          closeOnEscape,
          content: () => /* @__PURE__ */ jsxRuntime.jsx(
            framerMotion.motion.div,
            {
              ref,
              initial: { opacity: 0, y: -10 },
              animate: { opacity: 1, y: 0 },
              exit: { opacity: 0, y: -10 },
              className: tailwindMerge.twMerge(theme2.base, className),
              style,
              onMouseEnter,
              onMouseLeave,
              children: autofocus ? /* @__PURE__ */ jsxRuntime.jsx(
                FocusTrap,
                {
                  focusTrapOptions: {
                    escapeDeactivates: true,
                    clickOutsideDeactivates: true,
                    fallbackFocus: `#${id2}`
                  },
                  children: /* @__PURE__ */ jsxRuntime.jsx(
                    "div",
                    {
                      id: id2,
                      className: theme2.inner,
                      tabIndex: -1,
                      style: { maxHeight },
                      children: typeof children === "function" ? children() : children
                    }
                  )
                }
              ) : /* @__PURE__ */ jsxRuntime.jsx("div", { className: theme2.inner, style: { maxHeight }, children: typeof children === "function" ? children() : children })
            }
          ),
          onClose
        }
      );
    }
  );
  const useMenu = (prop) => {
    const { open, onClose } = prop || {};
    const [internalOpen, setInternalOpen] = React.useState(open);
    const ref = React.useRef(null);
    React.useEffect(() => {
      setInternalOpen(open);
    }, [open]);
    const onCloseInternal = React.useCallback(() => {
      setInternalOpen(false);
      onClose == null ? void 0 : onClose();
    }, [onClose]);
    const onToggleOpen = React.useCallback(() => {
      setInternalOpen(!internalOpen);
    }, [internalOpen]);
    const Component = React.useCallback(
      (props) => /* @__PURE__ */ jsxRuntime.jsx(
        Menu,
        {
          ...props,
          open: internalOpen,
          reference: ref,
          onClose: onCloseInternal
        }
      ),
      [internalOpen, onCloseInternal]
    );
    return {
      isOpen: internalOpen,
      setOpen: setInternalOpen,
      toggleOpen: onToggleOpen,
      Menu: Component,
      ref
    };
  };
  const NestedMenu = ({
    label,
    children,
    style,
    placement = "right-start",
    menuClassName,
    menuStyle,
    enterDelay = 0,
    autofocus = true,
    leaveDelay = 100,
    className,
    maxHeight,
    activeClassName,
    closeOnBodyClick = true,
    closeOnEscape = true,
    onClose
  }) => {
    const [active, setActive] = React.useState(false);
    const itemRef = React.useRef(null);
    const menuRef = React.useRef(null);
    const menuEntered = React.useRef(false);
    const enterTimeoutRef = React.useRef(null);
    const leaveTimeoutRef = React.useRef(null);
    const onMouseEnterItem = React.useCallback(() => {
      clearTimeout(enterTimeoutRef.current);
      clearTimeout(leaveTimeoutRef.current);
      enterTimeoutRef.current = setTimeout(() => setActive(true), enterDelay);
    }, [enterDelay]);
    const onClickItem = React.useCallback(() => {
      clearTimeout(enterTimeoutRef.current);
      clearTimeout(leaveTimeoutRef.current);
      setActive(!active);
    }, [active]);
    const onMouseLeaveItem = React.useCallback(() => {
      leaveTimeoutRef.current = setTimeout(() => {
        if (!menuEntered.current) {
          setActive(false);
        }
      }, leaveDelay);
    }, [leaveDelay]);
    const onMouseEnterMenu = React.useCallback((event) => {
      clearTimeout(enterTimeoutRef.current);
      clearTimeout(leaveTimeoutRef.current);
      menuEntered.current = true;
    }, []);
    const onMouseLeaveMenu = React.useCallback(
      (event) => {
        clearTimeout(enterTimeoutRef.current);
        clearTimeout(leaveTimeoutRef.current);
        menuEntered.current = false;
        leaveTimeoutRef.current = setTimeout(() => {
          var _a;
          if (!((_a = itemRef.current) == null ? void 0 : _a.contains(event.target))) {
            setActive(false);
          }
        }, leaveDelay);
      },
      [leaveDelay]
    );
    const onNestedMenuClose = React.useCallback(
      (event) => {
        setActive(false);
        onClose == null ? void 0 : onClose(event);
      },
      [onClose]
    );
    return /* @__PURE__ */ jsxRuntime.jsxs(React.Fragment, { children: [
      /* @__PURE__ */ jsxRuntime.jsx(
        "div",
        {
          className: classNames(className, { [activeClassName]: active }),
          style,
          ref: itemRef,
          onClick: onClickItem,
          onMouseEnter: onMouseEnterItem,
          onMouseLeave: onMouseLeaveItem,
          children: label
        }
      ),
      /* @__PURE__ */ jsxRuntime.jsx(
        Menu,
        {
          className: menuClassName,
          autofocus,
          style: menuStyle,
          reference: itemRef,
          closeOnBodyClick,
          closeOnEscape,
          open: active,
          placement,
          maxHeight,
          ref: menuRef,
          onMouseEnter: onMouseEnterMenu,
          onMouseLeave: onMouseLeaveMenu,
          onClose: onNestedMenuClose,
          children
        }
      )
    ] });
  };
  const baseTheme$2 = {
    base: "relative min-w-[112px] max-w-[500px] p-px",
    inner: "focus:outline-none"
  };
  const menuTheme = {
    ...baseTheme$2,
    inner: [baseTheme$2.inner, "text-panel-content bg-panel"].join(" ")
  };
  const legacyMenuTheme = {
    ...baseTheme$2
  };
  const useGlobalMenuState = creteGlobalStateHook([]);
  const ContextMenu = ({
    children,
    content,
    disabled,
    triggerClassName,
    triggerOpenClassName,
    autofocus = true,
    autoClose = true,
    theme: customTheme,
    closeOnEscape = true,
    closeOnBodyClick = true,
    ...rest
  }) => {
    const id2 = useId();
    const [menus, setMenus] = useGlobalMenuState();
    const [open, setOpen] = React.useState(false);
    const onOpen = React.useCallback(() => {
      if (!disabled) {
        menus.forEach((m) => m(false));
        setOpen(true);
        setMenus([setOpen]);
      }
    }, [disabled, setOpen, setMenus, menus]);
    const closeAll = React.useCallback(() => {
      setOpen(false);
      setMenus([]);
    }, [setOpen, setMenus]);
    const close = React.useCallback(() => {
      setOpen(false);
      setMenus(menus.filter((m) => m !== setOpen));
    }, [menus, setMenus]);
    const onClose = React.useCallback(() => {
      closeAll();
    }, [closeAll]);
    React.useEffect(() => {
      if (open) {
        closeAll();
      }
    }, [closeAll]);
    const theme2 = useComponentTheme("contextMenu", customTheme);
    return /* @__PURE__ */ jsxRuntime.jsx(
      ConnectedOverlay,
      {
        placement: "bottom-start",
        triggerElement: "span",
        closeOnEscape,
        closeOnBodyClick,
        ...rest,
        triggerClassName: tailwindMerge.twMerge(
          triggerClassName,
          !disabled && theme2.enabled,
          open && triggerOpenClassName
        ),
        trigger: "contextmenu",
        open,
        content: () => /* @__PURE__ */ jsxRuntime.jsx(
          framerMotion.motion.div,
          {
            initial: { opacity: 0, y: -25 },
            animate: { opacity: 1, y: 0 },
            exit: { opacity: 0, y: -25 },
            onClick: () => autoClose && (onClose == null ? void 0 : onClose()),
            children: autofocus ? /* @__PURE__ */ jsxRuntime.jsx(
              FocusTrap,
              {
                focusTrapOptions: {
                  escapeDeactivates: true,
                  clickOutsideDeactivates: true,
                  fallbackFocus: `#${id2}`
                },
                children: /* @__PURE__ */ jsxRuntime.jsx("div", { id: id2, tabIndex: -1, children: typeof content === "function" ? content({ closeAll, close }) : content })
              }
            ) : /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: typeof content === "function" ? content({ closeAll, close }) : content })
          }
        ),
        onOpen,
        onClose,
        children
      }
    );
  };
  const baseTheme$1 = {
    enabled: "cursor-context-menu"
  };
  const contextMenuTheme = {
    ...baseTheme$1
  };
  const legacyContextMenuTheme = {
    ...baseTheme$1
  };
  const Notification = ({
    id: id2,
    title,
    showClose,
    body,
    timeout,
    className,
    variant,
    icon,
    action,
    component,
    onClose,
    theme: customTheme
  }) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
    const timeoutRef = React.useRef(null);
    const clearTimer = React.useCallback(() => clearTimeout(timeoutRef.current), []);
    const startTimer = React.useCallback(() => {
      clearTimer();
      timeoutRef.current = setTimeout(() => onClose == null ? void 0 : onClose(id2), timeout);
    }, [id2, timeout, onClose, clearTimer]);
    React.useEffect(() => {
      startTimer();
      return () => clearTimer();
    }, [clearTimer, startTimer]);
    const theme2 = useComponentTheme(
      "notification",
      customTheme
    );
    return /* @__PURE__ */ jsxRuntime.jsxs(
      framerMotion.motion.div,
      {
        layout: true,
        initial: { opacity: 0, y: 50, scale: 0.5 },
        animate: { opacity: 1, y: 0, scale: 1 },
        exit: { opacity: 0, scale: 0.5, transition: { duration: 0.2 } },
        onMouseEnter: clearTimer,
        onMouseLeave: startTimer,
        children: [
          component,
          !component && /* @__PURE__ */ jsxRuntime.jsxs(
            "div",
            {
              className: tailwindMerge.twMerge(
                (_a = theme2.notification) == null ? void 0 : _a.base,
                (_d = (_c = (_b = theme2.notification) == null ? void 0 : _b.variants) == null ? void 0 : _c[variant]) == null ? void 0 : _d.base,
                className
              ),
              children: [
                /* @__PURE__ */ jsxRuntime.jsxs("div", { className: (_e = theme2.notification) == null ? void 0 : _e.content, children: [
                  title && /* @__PURE__ */ jsxRuntime.jsxs("div", { className: theme2.notification.header, children: [
                    icon && /* @__PURE__ */ jsxRuntime.jsx(
                      "div",
                      {
                        className: (_h = (_g = (_f = theme2.notification) == null ? void 0 : _f.variants) == null ? void 0 : _g[variant]) == null ? void 0 : _h.icon,
                        children: icon
                      }
                    ),
                    title
                  ] }),
                  body && /* @__PURE__ */ jsxRuntime.jsx("div", { className: theme2.notification.body, children: typeof body === "string" ? /* @__PURE__ */ jsxRuntime.jsx("span", { dangerouslySetInnerHTML: { __html: body } }) : body })
                ] }),
                action && /* @__PURE__ */ jsxRuntime.jsx("div", { className: theme2.notification.action, children: action }),
                /* @__PURE__ */ jsxRuntime.jsx("div", { className: (_i = theme2.notification) == null ? void 0 : _i.closeContainer, children: showClose && /* @__PURE__ */ jsxRuntime.jsx(
                  "button",
                  {
                    type: "button",
                    className: (_j = theme2.notification) == null ? void 0 : _j.closeButton,
                    onClick: () => onClose == null ? void 0 : onClose(id2),
                    children: "✕"
                  }
                ) })
              ]
            }
          )
        ]
      }
    );
  };
  const NotificationsContext = React.createContext({
    notify: () => void 0,
    notifyError: () => void 0,
    notifyWarning: () => void 0,
    notifySuccess: () => void 0,
    notifyInfo: () => void 0,
    clearNotification: () => void 0,
    clearAllNotifications: () => void 0
  });
  const SvgInfo = (props) => /* @__PURE__ */ React__namespace.createElement("svg", { width: 16, height: 16, viewBox: "0 0 16 16", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React__namespace.createElement("g", { clipPath: "url(#clip0_241_649)" }, /* @__PURE__ */ React__namespace.createElement("path", { d: "M7.33331 4.66671H8.66665V6.00004H7.33331V4.66671ZM7.33331 7.33337H8.66665V11.3334H7.33331V7.33337ZM7.99998 1.33337C4.31998 1.33337 1.33331 4.32004 1.33331 8.00004C1.33331 11.68 4.31998 14.6667 7.99998 14.6667C11.68 14.6667 14.6666 11.68 14.6666 8.00004C14.6666 4.32004 11.68 1.33337 7.99998 1.33337ZM7.99998 13.3334C5.05998 13.3334 2.66665 10.94 2.66665 8.00004C2.66665 5.06004 5.05998 2.66671 7.99998 2.66671C10.94 2.66671 13.3333 5.06004 13.3333 8.00004C13.3333 10.94 10.94 13.3334 7.99998 13.3334Z" })), /* @__PURE__ */ React__namespace.createElement("defs", null, /* @__PURE__ */ React__namespace.createElement("clipPath", { id: "clip0_241_649" }, /* @__PURE__ */ React__namespace.createElement("rect", { width: 16, height: 16, fill: "white" }))));
  const SvgCheckCircle = (props) => /* @__PURE__ */ React__namespace.createElement("svg", { width: 16, height: 16, viewBox: "0 0 16 16", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React__namespace.createElement("path", { d: "M7.99998 1.33337C4.31998 1.33337 1.33331 4.32004 1.33331 8.00004C1.33331 11.68 4.31998 14.6667 7.99998 14.6667C11.68 14.6667 14.6666 11.68 14.6666 8.00004C14.6666 4.32004 11.68 1.33337 7.99998 1.33337ZM7.99998 13.3334C5.05998 13.3334 2.66665 10.94 2.66665 8.00004C2.66665 5.06004 5.05998 2.66671 7.99998 2.66671C10.94 2.66671 13.3333 5.06004 13.3333 8.00004C13.3333 10.94 10.94 13.3334 7.99998 13.3334ZM11.06 5.05337L6.66665 9.44671L4.93998 7.72671L3.99998 8.66671L6.66665 11.3334L12 6.00004L11.06 5.05337Z" }));
  const SvgWarning = (props) => /* @__PURE__ */ React__namespace.createElement("svg", { width: 16, height: 16, viewBox: "0 0 16 16", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React__namespace.createElement("path", { d: "M8.00002 4.32663L13.02 13H2.98002L8.00002 4.32663ZM8.00002 1.66663L0.666687 14.3333H15.3334L8.00002 1.66663ZM8.66669 11H7.33335V12.3333H8.66669V11ZM8.66669 6.99996H7.33335V9.66663H8.66669V6.99996Z" }));
  const SvgErrorCircle = (props) => /* @__PURE__ */ React__namespace.createElement("svg", { width: 16, height: 16, viewBox: "0 0 16 16", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React__namespace.createElement("path", { d: "M9.72665 5.33337L7.99998 7.06004L6.27331 5.33337L5.33331 6.27337L7.05998 8.00004L5.33331 9.72671L6.27331 10.6667L7.99998 8.94004L9.72665 10.6667L10.6666 9.72671L8.93998 8.00004L10.6666 6.27337L9.72665 5.33337ZM7.99998 1.33337C4.31331 1.33337 1.33331 4.31337 1.33331 8.00004C1.33331 11.6867 4.31331 14.6667 7.99998 14.6667C11.6866 14.6667 14.6666 11.6867 14.6666 8.00004C14.6666 4.31337 11.6866 1.33337 7.99998 1.33337ZM7.99998 13.3334C5.05998 13.3334 2.66665 10.94 2.66665 8.00004C2.66665 5.06004 5.05998 2.66671 7.99998 2.66671C10.94 2.66671 13.3333 5.06004 13.3333 8.00004C13.3333 10.94 10.94 13.3334 7.99998 13.3334Z" }));
  let nextId = 0;
  const Notifications = ({
    children,
    limit = 10,
    timeout = 4e3,
    showClose = true,
    className,
    preventFlooding = true,
    components,
    icons = {
      default: /* @__PURE__ */ jsxRuntime.jsx(SvgInfo, {}),
      success: /* @__PURE__ */ jsxRuntime.jsx(SvgCheckCircle, {}),
      warning: /* @__PURE__ */ jsxRuntime.jsx(SvgWarning, {}),
      error: /* @__PURE__ */ jsxRuntime.jsx(SvgErrorCircle, {}),
      info: /* @__PURE__ */ jsxRuntime.jsx(SvgInfo, {})
    },
    theme: customTheme
  }) => {
    const [notifications, setNotifications] = React.useState([]);
    const clearNotification = React.useCallback(
      (id2) => setNotifications(notifications.filter((n) => n.id !== id2)),
      [notifications]
    );
    const clearAllNotifications = React.useCallback(() => setNotifications([]), []);
    const notify = React.useCallback(
      (title, options = {}) => {
        setNotifications((notifications2) => {
          if (preventFlooding && notifications2.find((n) => n.title === title)) {
            return notifications2;
          }
          const id2 = nextId++;
          const obj = {
            title,
            id: id2,
            variant: "default",
            timeout,
            icon: icons == null ? void 0 : icons.default,
            showClose,
            ...options
          };
          const sorted = [obj, ...notifications2];
          if (sorted.length > limit) {
            sorted.pop();
          }
          return sorted;
        });
      },
      [icons == null ? void 0 : icons.default, limit, preventFlooding, showClose, timeout]
    );
    const notifyError = React.useCallback(
      (title, options = {}) => notify(title, {
        variant: "error",
        icon: icons == null ? void 0 : icons.error,
        ...options
      }),
      [icons == null ? void 0 : icons.error, notify]
    );
    const notifyWarning = React.useCallback(
      (title, options = {}) => notify(title, { variant: "warning", icon: icons == null ? void 0 : icons.warning, ...options }),
      [icons == null ? void 0 : icons.warning, notify]
    );
    const notifySuccess = React.useCallback(
      (title, options = {}) => notify(title, {
        variant: "success",
        icon: icons == null ? void 0 : icons.success,
        ...options
      }),
      [icons == null ? void 0 : icons.success, notify]
    );
    const notifyInfo = React.useCallback(
      (title, options = {}) => notify(title, { variant: "info", icon: icons == null ? void 0 : icons.info, ...options }),
      [icons == null ? void 0 : icons.info, notify]
    );
    const values = React.useMemo(
      () => ({
        notify,
        notifyError,
        notifyWarning,
        notifySuccess,
        notifyInfo,
        clearNotification,
        clearAllNotifications
      }),
      [
        clearNotification,
        clearAllNotifications,
        notify,
        notifyError,
        notifySuccess,
        notifyWarning,
        notifyInfo
      ]
    );
    const theme2 = useComponentTheme(
      "notification",
      customTheme
    );
    return /* @__PURE__ */ jsxRuntime.jsxs(React.Fragment, { children: [
      /* @__PURE__ */ jsxRuntime.jsx(NotificationsContext.Provider, { value: values, children }),
      /* @__PURE__ */ jsxRuntime.jsx("div", { className: theme2.container, children: /* @__PURE__ */ jsxRuntime.jsx("div", { className: theme2.positions, children: /* @__PURE__ */ jsxRuntime.jsx(framerMotion.AnimatePresence, { children: !!notifications.length && /* @__PURE__ */ jsxRuntime.jsx(
        framerMotion.motion.div,
        {
          initial: { opacity: 0 },
          animate: { opacity: 1 },
          exit: { opacity: 0 },
          children: notifications.map((n) => {
            if (components == null ? void 0 : components[n.variant]) {
              const CustomNotification = components == null ? void 0 : components[n.variant];
              return /* @__PURE__ */ React.createElement(
                Notification,
                {
                  ...n,
                  component: /* @__PURE__ */ jsxRuntime.jsx(
                    CustomNotification,
                    {
                      message: n.title,
                      variant: n.variant,
                      onClose: () => clearNotification(n.id)
                    }
                  ),
                  showClose: false,
                  key: n.id,
                  onClose: clearNotification
                }
              );
            }
            return /* @__PURE__ */ React.createElement(
              Notification,
              {
                ...n,
                key: n.id,
                className: tailwindMerge.twMerge(className, n.className),
                onClose: clearNotification
              }
            );
          })
        }
      ) }) }) })
    ] });
  };
  const useNotification = () => {
    const context = React.useContext(NotificationsContext);
    if (context === void 0) {
      throw new Error(
        "`useNotification` hook must be used within a `NotificationsContext` component"
      );
    }
    return context;
  };
  const baseTheme = {
    container: "",
    positions: "fixed z-[9998] h-auto -translate-x-2/4 mb-1 px-24 py-0 left-2/4 bottom-0",
    notification: {
      base: "flex relative text-base min-w-[400px] rounded-sm mb-2.5 py-2 px-4",
      variants: {
        success: {
          base: "bg-success-background border border-success",
          icon: "text-success h-4 w-4"
        },
        error: {
          base: "bg-error-background border border-error",
          icon: "text-error h-4 w-4"
        },
        warning: {
          base: "bg-warning-background border border-warning",
          icon: "text-warning h-4 w-4"
        },
        info: {
          base: "bg-info-background border border-info",
          icon: "text-info h-4 w-4"
        }
      },
      content: "inline-flex items-start flex-1 flex-col justify-center",
      header: "text-base flex gap-2 items-center",
      closeContainer: "inline-flex items-center",
      action: "ml-auto mr-2 items-center flex",
      closeButton: "cursor-pointer text-sm font-semibold m-0 border-0 text-panel-content hover:text-panel-content/70",
      body: "opacity-70 text-sm mt-1"
    }
  };
  const notificationTheme = {
    ...baseTheme,
    notification: {
      ...baseTheme.notification,
      base: [
        baseTheme.notification.base,
        "bg-panel text-panel-content border-panel-accent border"
      ].join(" ")
    }
  };
  const legacyNotificationTheme = {
    ...baseTheme,
    notification: {
      ...baseTheme.notification,
      base: [
        baseTheme.notification.base,
        "bg-[var(--notification-background)] border-[var(--notification-border)] text-[var(--notification-color)]"
      ].join(" "),
      closeButton: [
        baseTheme.notification.closeButton,
        "text-[var(--color-on-notification)]"
      ].join(" "),
      body: [
        baseTheme.notification.body,
        "text-[var(--color-on-notification)]"
      ].join(" "),
      variants: {
        ...baseTheme.notification.variants,
        success: {
          base: [
            baseTheme.notification.variants.success,
            "text-[var(--notification-color-success)]"
          ].join(" ")
        },
        error: {
          base: [
            baseTheme.notification.variants.error,
            "text-[var(--notification-color-error)]"
          ].join(" ")
        },
        warning: {
          base: [
            baseTheme.notification.variants.error,
            "text-[var(--notification-color-warning)]"
          ].join(" ")
        }
      }
    }
  };
  const theme = {
    components: {
      avatar: avatarTheme,
      avatarGroup: avatarGroupTheme,
      arrow: arrowTheme,
      badge: badgeTheme,
      button: buttonTheme,
      block: blockTheme,
      chip: chipTheme,
      contextMenu: contextMenuTheme,
      checkbox: checkboxTheme,
      dateFormat: dateFormatTheme,
      dialog: dialogTheme,
      divider: dividerTheme,
      dotsLoader: dotsLoaderTheme,
      drawer: drawerTheme,
      ellipsis: ellipsisTheme,
      select: selectTheme,
      list: listTheme,
      menu: menuTheme,
      sort: sortTheme,
      stack: stackTheme,
      card: cardTheme,
      kbd: kbdTheme,
      verticalSpacer: verticalSpacerTheme,
      notification: notificationTheme,
      input: inputTheme,
      calendar: calendarTheme,
      calendarRange: calendarRangeTheme,
      commandPalette: commandPaletteTheme,
      collapse: collapseTheme,
      textarea: textareaTheme,
      typography: typographyTheme,
      radio: radioTheme,
      range: rangeTheme,
      redact: redactTheme,
      toggle: toggleTheme,
      tooltip: tooltipTheme,
      tree: treeTheme,
      popover: popoverTheme,
      pager: pagerTheme,
      tabs: tabsTheme,
      jsonTree: jsonTreeTheme,
      breadcrumbs: breadcrumbsTheme
    }
  };
  const legacyThemeVars = {
    components: {
      avatar: legacyAvatarTheme,
      avatarGroup: legacyAvatarGroupTheme,
      arrow: legacyArrowTheme,
      badge: legacyBadgeTheme,
      button: legacyButtonTheme,
      block: legacyBlockTheme,
      chip: legacyChipTheme,
      contextMenu: legacyContextMenuTheme,
      checkbox: legacyCheckboxTheme,
      dateFormat: legacyDateFormatTheme,
      dialog: legacyDialogTheme,
      divider: legacyDividerTheme,
      dotsLoader: legacyLoaderTheme,
      drawer: legacyDrawerTheme,
      ellipsis: legacyEllipsisTheme,
      select: legacySelectTheme,
      list: legacyListTheme,
      menu: legacyMenuTheme,
      sort: legacySortTheme,
      stack: legacyStackTheme,
      card: legacyCardTheme,
      kbd: legacyKbdTheme,
      verticalSpacer: legacyVerticalSpacerTheme,
      notification: legacyNotificationTheme,
      input: legacyInputTheme,
      calendar: legacyCalendarTheme,
      calendarRange: legacyCalendarRangeTheme,
      commandPalette: legacyCommandPaletteTheme,
      collapse: legacyCollapseTheme,
      textarea: legacyTextareaTheme,
      typography: legacyTypographyTheme,
      radio: legacyRadioTheme,
      range: legacyRangeTheme,
      redact: legacyRedactTheme,
      toggle: legacyToggleTheme,
      tooltip: legacyTooltipTheme,
      tree: legacyTreeTheme,
      popover: legacyPopoverTheme,
      pager: legacyPagerTheme,
      tabs: legacyTabsTheme,
      jsonTree: legacyJsonTreeTheme,
      breadcrumbs: legacyBreadcrumbTheme
    }
  };
  const extendTheme = (defaultTheme, theme2) => {
    return mergeDeep(defaultTheme, theme2);
  };
  const extendComponentTheme = (defaultTheme, theme2) => {
    return mergeDeep(defaultTheme, theme2);
  };
  function extractTheme(config2) {
    const colors2 = { ...config2.colors };
    delete colors2["inherit"];
    delete colors2["transparent"];
    delete colors2["current"];
    return {
      colors: colors2,
      borderRadius: config2.borderRadius,
      boxShadow: config2.boxShadow,
      spacing: config2.spacing,
      fontFamily: config2.fontFamily,
      fontSize: config2.fontSize,
      fontWeight: config2.fontWeight
    };
  }
  const ColorBlock = ({ name: name2, color: color2, className }) => /* @__PURE__ */ jsxRuntime.jsxs(
    "div",
    {
      style: {
        border: "solid 1px --border-color",
        borderRadius: "4px",
        overflow: "hidden"
      },
      className,
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(
          "div",
          {
            style: {
              padding: "20px",
              background: color2,
              color: "#161616",
              borderBottom: "solid 1px var(--border-color)"
            }
          }
        ),
        /* @__PURE__ */ jsxRuntime.jsxs(
          "div",
          {
            style: {
              padding: "6px",
              fontSize: "12px"
            },
            children: [
              /* @__PURE__ */ jsxRuntime.jsx("div", { children: /* @__PURE__ */ jsxRuntime.jsx(
                "code",
                {
                  style: { cursor: "pointer" },
                  title: `Double click to copy ${name2} to your clipboard`,
                  onDoubleClick: () => navigator.clipboard.writeText(name2),
                  children: name2
                }
              ) }),
              /* @__PURE__ */ jsxRuntime.jsx("div", { children: /* @__PURE__ */ jsxRuntime.jsx(
                "code",
                {
                  style: { cursor: "pointer" },
                  title: `Double click to copy ${color2} to your clipboard`,
                  onDoubleClick: () => navigator.clipboard.writeText(color2),
                  children: color2
                }
              ) })
            ]
          }
        )
      ]
    },
    name2
  );
  const ColorPaletteBlock = ({
    name: name2,
    color: color2,
    className,
    showName = true
  }) => {
    const valid = chroma.valid(color2);
    const fontColor = valid && !name2.includes("overlay") ? chroma(color2).luminance() >= 0.3 ? chroma(color2).darken(100).css() : chroma(color2).brighten(100).css() : "var(--body-color)";
    return /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        className,
        style: {
          borderRight: "solid 1px var(--border-color)"
        },
        children: /* @__PURE__ */ jsxRuntime.jsxs(
          "div",
          {
            style: {
              padding: "6px",
              background: color2,
              height: "100%",
              minHeight: 50
            },
            children: [
              showName && /* @__PURE__ */ jsxRuntime.jsx("div", { children: /* @__PURE__ */ jsxRuntime.jsx(
                "code",
                {
                  style: { cursor: "pointer", color: fontColor, fontSize: "12px" },
                  title: `Double click to copy ${name2} to your clipboard`,
                  onDoubleClick: () => navigator.clipboard.writeText(name2),
                  children: name2
                }
              ) }),
              /* @__PURE__ */ jsxRuntime.jsx("div", { children: /* @__PURE__ */ jsxRuntime.jsx(
                "code",
                {
                  style: { cursor: "pointer", color: fontColor, fontSize: "12px" },
                  title: `Double click to copy ${color2} to your clipboard`,
                  onDoubleClick: () => navigator.clipboard.writeText(color2),
                  children: color2
                }
              ) })
            ]
          }
        )
      },
      name2
    );
  };
  const ColorPaletteBlocks = ({
    name: name2,
    colors: colors2,
    className,
    showNames = true
  }) => /* @__PURE__ */ jsxRuntime.jsxs(
    "div",
    {
      className,
      style: {
        marginBottom: "24px"
      },
      children: [
        /* @__PURE__ */ jsxRuntime.jsx("h3", { style: { fontWeight: 500, margin: 0 }, children: name2 }),
        /* @__PURE__ */ jsxRuntime.jsxs(
          "div",
          {
            style: {
              display: "grid",
              overflow: "hidden",
              borderRadius: "6px",
              border: "solid 1px var(--border-color)",
              gridTemplateColumns: "repeat(auto-fit, minmax(100px, 1fr))"
            },
            children: [
              typeof colors2 === "string" && /* @__PURE__ */ jsxRuntime.jsx(ColorBlock, { name: `${name2}`, color: colors2, showName: showNames }),
              typeof colors2 === "object" && /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: Object.keys(colors2).map((color2) => /* @__PURE__ */ jsxRuntime.jsx(
                ColorPaletteBlock,
                {
                  name: `${name2}-${color2}`,
                  color: colors2[color2],
                  showName: showNames
                },
                `${name2}-${color2}`
              )) }),
              typeof colors2 === "function" && /* @__PURE__ */ jsxRuntime.jsx(
                ColorBlock,
                {
                  name: `${name2}`,
                  color: colors2({}),
                  showName: showNames
                }
              )
            ]
          }
        )
      ]
    }
  );
  const ColorBlocks = ({
    colors: colors2
  }) => {
    return /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        style: {
          padding: "6px 12px",
          color: "var(--body-color)",
          width: "100%"
        },
        children: colors2 ? /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: Object.keys(colors2).map((key) => /* @__PURE__ */ jsxRuntime.jsx(ColorPaletteBlocks, { name: key, colors: colors2[key] }, key)) }) : /* @__PURE__ */ jsxRuntime.jsx("p", { children: "⚠️ No colors defined" })
      }
    );
  };
  const TypographyLetterBlock = ({
    fontFamily,
    className
  }) => /* @__PURE__ */ jsxRuntime.jsxs(
    "div",
    {
      className,
      style: {
        fontFamily,
        display: "flex",
        alignItems: "center",
        marginLeft: "20px"
      },
      children: [
        /* @__PURE__ */ jsxRuntime.jsx("div", { style: { fontSize: 128 }, children: "Aa" }),
        /* @__PURE__ */ jsxRuntime.jsxs(
          "div",
          {
            style: {
              marginLeft: "20px",
              paddingLeft: "20px",
              fontSize: 22,
              borderLeft: "solid 1px var(--border-color)"
            },
            children: [
              /* @__PURE__ */ jsxRuntime.jsx("h2", { style: { margin: 0 }, children: fontFamily }),
              /* @__PURE__ */ jsxRuntime.jsx("div", { children: "ABCDEFGHIJKLMNOPQRSTUVWXYZ" }),
              /* @__PURE__ */ jsxRuntime.jsx("div", { children: "abcdefghijklmnopqrstuvwxyz" }),
              /* @__PURE__ */ jsxRuntime.jsx("div", { children: "1234567890 /&*()?<>+-=$@%!”[]{}" })
            ]
          }
        )
      ]
    }
  );
  const TypographySizeBlock = ({
    sizes,
    className
  }) => /* @__PURE__ */ jsxRuntime.jsx("div", { className, children: Object.keys(sizes).map((size) => /* @__PURE__ */ jsxRuntime.jsxs(
    "div",
    {
      style: {
        fontSize: sizes[size][0],
        lineHeight: sizes[size][1].lineHeight,
        display: "flex",
        alignItems: "center",
        margin: "20px"
      },
      children: [
        /* @__PURE__ */ jsxRuntime.jsxs(
          "div",
          {
            style: {
              fontSize: 16,
              minWidth: 110,
              marginRight: "6px",
              color: "var(--body-color)"
            },
            children: [
              /* @__PURE__ */ jsxRuntime.jsxs(
                "code",
                {
                  style: { cursor: "pointer", fontSize: 14 },
                  onDoubleClick: () => navigator.clipboard.writeText(`font-${size}`),
                  children: [
                    "font-",
                    size
                  ]
                }
              ),
              /* @__PURE__ */ jsxRuntime.jsx("br", {}),
              /* @__PURE__ */ jsxRuntime.jsx("small", { children: /* @__PURE__ */ jsxRuntime.jsx(
                "code",
                {
                  style: { cursor: "pointer" },
                  onDoubleClick: () => navigator.clipboard.writeText(sizes[size][0]),
                  children: sizes[size][0]
                }
              ) })
            ]
          }
        ),
        "The quick brown fox jumps over the lazy dog."
      ]
    },
    size
  )) });
  const TypographyWeightBlock = ({
    weights,
    className
  }) => /* @__PURE__ */ jsxRuntime.jsx(
    "div",
    {
      className,
      style: {
        padding: "6px",
        borderRadius: "6px",
        border: "solid 1px var(--border-color)"
      },
      children: Object.keys(weights).map((weight, i) => /* @__PURE__ */ jsxRuntime.jsxs(
        "div",
        {
          style: {
            display: "flex",
            alignItems: "center",
            marginBottom: "16px"
          },
          children: [
            /* @__PURE__ */ jsxRuntime.jsxs("code", { style: { width: "25%", minWidth: 200 }, children: [
              /* @__PURE__ */ jsxRuntime.jsxs(
                "span",
                {
                  style: { fontSize: "16px", cursor: "pointer" },
                  onDoubleClick: () => navigator.clipboard.writeText(`font-${weight}`),
                  children: [
                    "font-",
                    weight
                  ]
                }
              ),
              /* @__PURE__ */ jsxRuntime.jsx("br", {}),
              /* @__PURE__ */ jsxRuntime.jsx(
                "div",
                {
                  style: { fontSize: "14px", cursor: "pointer" },
                  onDoubleClick: () => navigator.clipboard.writeText(weights[weight]),
                  children: weights[weight]
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntime.jsx("div", { style: { fontWeight: weights[weight] }, children: "The quick brown fox jumps over the lazy dog." })
          ]
        },
        i
      ))
    }
  );
  const TypographyBlocks = ({ families, sizes, weights }) => {
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "div",
      {
        style: {
          color: "var(--body-color)",
          width: "100%"
        },
        children: [
          /* @__PURE__ */ jsxRuntime.jsx("h1", { style: { fontSize: "28px", fontWeight: "bold", marginBottom: "8px" }, children: "Typography" }),
          /* @__PURE__ */ jsxRuntime.jsx("h2", { style: { fontSize: "20px", fontWeight: "500" }, children: "Font Families" }),
          /* @__PURE__ */ jsxRuntime.jsx("br", {}),
          Object.keys(families).map((family) => /* @__PURE__ */ jsxRuntime.jsxs(
            "div",
            {
              style: {
                marginBottom: "24px"
              },
              children: [
                /* @__PURE__ */ jsxRuntime.jsxs("h3", { style: { fontWeight: 600, fontSize: "20px" }, children: [
                  /* @__PURE__ */ jsxRuntime.jsx("small", { children: /* @__PURE__ */ jsxRuntime.jsxs("code", { children: [
                    "font-",
                    family
                  ] }) }),
                  /* @__PURE__ */ jsxRuntime.jsx("br", {})
                ] }),
                /* @__PURE__ */ jsxRuntime.jsxs(
                  "div",
                  {
                    style: {
                      padding: "10px",
                      borderRadius: "8px",
                      border: "solid 1px var(--border-color)"
                    },
                    children: [
                      /* @__PURE__ */ jsxRuntime.jsx(TypographyLetterBlock, { fontFamily: families[family] }),
                      /* @__PURE__ */ jsxRuntime.jsx(
                        "hr",
                        {
                          style: {
                            background: "none",
                            border: "none",
                            borderTop: "solid 1px var(--border-color)"
                          }
                        }
                      ),
                      /* @__PURE__ */ jsxRuntime.jsx(TypographySizeBlock, { sizes })
                    ]
                  }
                )
              ]
            },
            family
          )),
          weights && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
            /* @__PURE__ */ jsxRuntime.jsx("h2", { children: "Font Weights" }),
            /* @__PURE__ */ jsxRuntime.jsx(TypographyWeightBlock, { weights })
          ] })
        ]
      }
    );
  };
  const SpacingBlocks = ({ spacings }) => {
    return /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        style: {
          padding: "6px 12px",
          color: "var(--body-color)",
          width: "100%"
        },
        children: spacings ? /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: Object.keys(spacings).map((key) => /* @__PURE__ */ jsxRuntime.jsxs(
          "div",
          {
            style: {
              marginBottom: "16px",
              padding: "20px",
              display: "flex",
              alignItems: "center",
              borderRadius: "4px",
              border: "solid 1px var(--border-color)"
            },
            children: [
              /* @__PURE__ */ jsxRuntime.jsxs("h3", { style: { fontWeight: 500, marginRight: 50 }, children: [
                /* @__PURE__ */ jsxRuntime.jsx(
                  "code",
                  {
                    style: { cursor: "pointer" },
                    title: `Double click to copy ${key} to your clipboard`,
                    onDoubleClick: () => navigator.clipboard.writeText(key),
                    children: key
                  }
                ),
                /* @__PURE__ */ jsxRuntime.jsx("br", {}),
                /* @__PURE__ */ jsxRuntime.jsx(
                  "small",
                  {
                    style: { cursor: "pointer" },
                    onDoubleClick: () => navigator.clipboard.writeText(spacings[key]),
                    children: spacings[key]
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntime.jsx(
                "div",
                {
                  style: {
                    justifyContent: "end",
                    display: "flex",
                    flex: 1
                  },
                  children: /* @__PURE__ */ jsxRuntime.jsx(
                    "div",
                    {
                      style: {
                        padding: spacings[key],
                        border: "solid 1px blue"
                      },
                      children: "Content"
                    }
                  )
                }
              )
            ]
          },
          key
        )) }) : /* @__PURE__ */ jsxRuntime.jsx("p", { children: "⚠️ No spacings defined" })
      }
    );
  };
  const PaletteBlocks = ({ palettes }) => {
    return /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        style: {
          padding: "4px 8px",
          color: "var(--body-color)",
          width: "100%"
        },
        children: Object.keys(palettes).map((key) => /* @__PURE__ */ jsxRuntime.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntime.jsx("h3", { style: { fontWeight: 500, fontSize: "24px", margin: 0 }, children: key }),
          /* @__PURE__ */ jsxRuntime.jsx(
            "div",
            {
              style: {
                marginBottom: "20px",
                display: "grid",
                gap: 12,
                gridTemplateColumns: "repeat(auto-fit, minmax(100px, 1fr))",
                borderRadius: "4px"
              },
              children: Object.keys(palettes[key]).map((item) => /* @__PURE__ */ jsxRuntime.jsx(
                ColorBlock,
                {
                  name: `${key}-${item}`,
                  color: palettes[key][item],
                  className: "rounded border border-slate-500"
                },
                `${key}-${item}`
              ))
            }
          )
        ] }, key))
      }
    );
  };
  const BorderBlocks = ({ borders }) => {
    return /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        style: {
          padding: "2px 4px",
          color: "var(--body-color)",
          width: "100%"
        },
        children: borders ? /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: Object.keys(borders).map((key) => /* @__PURE__ */ jsxRuntime.jsxs(
          "div",
          {
            style: {
              marginBottom: "20px",
              padding: "16px",
              display: "flex",
              alignItems: "center",
              borderRadius: "4px",
              border: "solid 1px var(--border-color)"
            },
            children: [
              /* @__PURE__ */ jsxRuntime.jsxs(
                "h3",
                {
                  style: {
                    fontWeight: 500,
                    marginRight: "20px",
                    maxWidth: 300
                  },
                  children: [
                    /* @__PURE__ */ jsxRuntime.jsxs(
                      "span",
                      {
                        style: { cursor: "pointer" },
                        title: `Double click to copy --border-radius-${key} to your clipboard`,
                        onDoubleClick: () => navigator.clipboard.writeText(`rounded-${key}`),
                        children: [
                          "rounded-",
                          key
                        ]
                      }
                    ),
                    /* @__PURE__ */ jsxRuntime.jsx("br", {}),
                    /* @__PURE__ */ jsxRuntime.jsx(
                      "small",
                      {
                        style: { cursor: "pointer" },
                        onDoubleClick: () => navigator.clipboard.writeText(borders[key]),
                        children: /* @__PURE__ */ jsxRuntime.jsx("code", { children: borders[key] })
                      }
                    )
                  ]
                }
              ),
              /* @__PURE__ */ jsxRuntime.jsx(
                "div",
                {
                  style: {
                    justifyContent: "end",
                    display: "flex",
                    flex: 1
                  },
                  children: /* @__PURE__ */ jsxRuntime.jsx(
                    "div",
                    {
                      style: {
                        padding: "12px",
                        borderRadius: borders[key],
                        border: "solid 1px blue"
                      },
                      children: "Content"
                    }
                  )
                }
              )
            ]
          },
          key
        )) }) : /* @__PURE__ */ jsxRuntime.jsx("p", { children: "⚠️ No borders defined" })
      }
    );
  };
  const ShadowBlocks = ({ shadows }) => {
    return /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        style: {
          padding: "4px 8px",
          color: "var(--body-color)",
          width: "100%"
        },
        children: shadows ? /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: Object.keys(shadows).map((key) => /* @__PURE__ */ jsxRuntime.jsxs(
          "div",
          {
            style: {
              marginBottom: "20px",
              padding: "16px 20px",
              display: "flex",
              alignItems: "center",
              borderRadius: "6px",
              border: "solid 1px var(--border-color)"
            },
            children: [
              /* @__PURE__ */ jsxRuntime.jsxs("h3", { style: { fontWeight: 500, marginRight: 50, maxWidth: 300 }, children: [
                /* @__PURE__ */ jsxRuntime.jsxs(
                  "span",
                  {
                    style: { cursor: "pointer" },
                    title: `Double click to copy --shadow-${key} to your clipboard`,
                    onDoubleClick: () => navigator.clipboard.writeText(`--shadow-${key}`),
                    children: [
                      "--shadow-",
                      key
                    ]
                  }
                ),
                /* @__PURE__ */ jsxRuntime.jsx("br", {}),
                /* @__PURE__ */ jsxRuntime.jsx("small", { children: /* @__PURE__ */ jsxRuntime.jsx(
                  "code",
                  {
                    style: { cursor: "pointer" },
                    onDoubleClick: () => navigator.clipboard.writeText(shadows[key]),
                    children: shadows[key]
                  }
                ) })
              ] }),
              /* @__PURE__ */ jsxRuntime.jsx(
                "div",
                {
                  style: {
                    justifyContent: "end",
                    display: "flex",
                    flex: 1
                  },
                  children: /* @__PURE__ */ jsxRuntime.jsx(
                    "div",
                    {
                      style: {
                        backgroundColor: "#191919",
                        padding: "12px",
                        fontSize: "16px",
                        boxShadow: shadows[key]
                      },
                      children: "Content"
                    }
                  )
                }
              )
            ]
          },
          key
        )) }) : /* @__PURE__ */ jsxRuntime.jsx("p", { children: "⚠️ No shadows defined" })
      }
    );
  };
  const ComponentBlocks = ({
    components
  }) => {
    return /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        style: {
          padding: "4px 8px",
          color: "var(--body-color)",
          width: "100%"
        },
        children: components ? /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: Object.keys(components).map((key) => /* @__PURE__ */ jsxRuntime.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntime.jsx(
            "h3",
            {
              style: {
                fontSize: "24px",
                fontWeight: 500,
                marginRight: 50,
                marginBottom: "4px",
                maxWidth: 300,
                textTransform: "capitalize"
              },
              children: key
            }
          ),
          /* @__PURE__ */ jsxRuntime.jsx(
            reactSyntaxHighlighter.Prism,
            {
              language: "javascript",
              style: dracula,
              className: "highlighter",
              children: JSON.stringify(components[key], null, 2)
            }
          )
        ] }, key)) }) : /* @__PURE__ */ jsxRuntime.jsx("p", { children: "⚠️ No components(s) defined" })
      }
    );
  };
  const IconBlock = ({
    name: name2,
    src,
    className,
    component: Component
  }) => /* @__PURE__ */ jsxRuntime.jsx(
    "div",
    {
      className,
      style: {
        display: "flex",
        flexDirection: "column",
        justifyContent: "center",
        alignItems: "center",
        padding: "var(--spacing-md)",
        fontFamily: "var(--font-family)",
        background: "var(--icon-block-background)",
        color: "var(--icon-block-color)",
        textAlign: "center",
        fontSize: "12px",
        borderRadius: "var(--border-radius-md)",
        height: 75
      },
      children: /* @__PURE__ */ jsxRuntime.jsxs(React.Suspense, { fallback: null, children: [
        src ? /* @__PURE__ */ jsxRuntime.jsx(
          "img",
          {
            src,
            style: { width: 25, height: 25, marginBottom: "var(--spacing-md)" }
          }
        ) : /* @__PURE__ */ jsxRuntime.jsx(
          Component,
          {
            style: { width: 25, height: 25, marginBottom: "var(--spacing-md)" }
          }
        ),
        /* @__PURE__ */ jsxRuntime.jsx("div", { children: name2 })
      ] })
    }
  );
  const IconBlocks = ({ icons, className }) => /* @__PURE__ */ jsxRuntime.jsx(
    "div",
    {
      style: {
        display: "grid",
        gridGap: "var(--spacing-lg)",
        gridTemplateColumns: "repeat(auto-fill, minmax(120px, 1fr))",
        justifyItems: "stretch"
      },
      className,
      children: icons.map((key) => /* @__PURE__ */ jsxRuntime.jsx(IconBlock, { ...key }, key.name))
    }
  );
  function CloneElement({
    children,
    element,
    childRef,
    ...rest
  }) {
    const getProjectedProps = React.useMemo(
      () => (props) => {
        const childProps = element.props;
        return Object.keys(props).reduce((acc, key) => {
          const prop = props[key];
          const childProp = childProps[key];
          if (typeof prop === "function" && typeof childProp === "function") {
            acc[key] = (...args) => {
              prop(...args);
              childProp(...args);
            };
          } else if (key === "className") {
            acc[key] = classNames(prop, childProp);
          } else {
            acc[key] = prop;
          }
          return acc;
        }, {});
      },
      [rest]
    );
    if (element === null) {
      return children;
    }
    const ref = childRef ? (node) => {
      if (typeof childRef === "function") {
        childRef(node);
      } else if (ref) {
        childRef.current = node;
      }
    } : void 0;
    const newProps = getProjectedProps(rest);
    return React.cloneElement(element, {
      ...element.props,
      ...newProps,
      children,
      ref
    });
  }
  function useUserSelect(active) {
    React.useEffect(() => {
      if (active) {
        document.body.style.userSelect = "none";
        return () => void (document.body.style.userSelect = "initial");
      }
    }, [active]);
  }
  function useCursor(hovered, onPointerOver = "pointer", onPointerOut = "auto") {
    React.useEffect(() => {
      if (hovered) {
        document.body.style.cursor = onPointerOver;
        return () => void (document.body.style.cursor = onPointerOut);
      }
    }, [hovered]);
  }
  exports2.Arrow = Arrow;
  exports2.Avatar = Avatar;
  exports2.AvatarGroup = AvatarGroup;
  exports2.Backdrop = Backdrop;
  exports2.Badge = Badge;
  exports2.Block = Block;
  exports2.BorderBlocks = BorderBlocks;
  exports2.BreadcrumbItem = BreadcrumbItem;
  exports2.BreadcrumbLink = BreadcrumbLink;
  exports2.BreadcrumbList = BreadcrumbList;
  exports2.BreadcrumbPage = BreadcrumbPage;
  exports2.BreadcrumbSeparator = BreadcrumbSeparator;
  exports2.Breadcrumbs = Breadcrumbs;
  exports2.Button = Button;
  exports2.ButtonGroup = ButtonGroup;
  exports2.Calendar = Calendar;
  exports2.CalendarRange = CalendarRange;
  exports2.Card = Card;
  exports2.Checkbox = Checkbox;
  exports2.Chip = Chip;
  exports2.CloneElement = CloneElement;
  exports2.CloseIcon = CloseIcon;
  exports2.Collapse = Collapse;
  exports2.ColorBlock = ColorBlock;
  exports2.ColorBlocks = ColorBlocks;
  exports2.ColorPaletteBlock = ColorPaletteBlock;
  exports2.ColorPaletteBlocks = ColorPaletteBlocks;
  exports2.CommandPalette = CommandPalette;
  exports2.CommandPaletteInput = CommandPaletteInput;
  exports2.CommandPaletteItem = CommandPaletteItem;
  exports2.CommandPaletteSection = CommandPaletteSection;
  exports2.ComponentBlocks = ComponentBlocks;
  exports2.ConnectedOverlay = ConnectedOverlay;
  exports2.ConnectedOverlayContent = ConnectedOverlayContent;
  exports2.ContextMenu = ContextMenu;
  exports2.DataSize = DataSize;
  exports2.DateFormat = DateFormat;
  exports2.DebouncedInput = DebouncedInput;
  exports2.DeletableChip = DeletableChip;
  exports2.Dialog = Dialog;
  exports2.DialogHeader = DialogHeader;
  exports2.Divider = Divider;
  exports2.DotsLoader = DotsLoader;
  exports2.DownArrowIcon = DownArrowIcon$1;
  exports2.Drawer = Drawer;
  exports2.DrawerHeader = DrawerHeader;
  exports2.Duration = Duration;
  exports2.Ellipsis = Ellipsis;
  exports2.FUZZY_RANGE = FUZZY_RANGE;
  exports2.GlobalOverlay = GlobalOverlay;
  exports2.IconBlock = IconBlock;
  exports2.IconBlocks = IconBlocks;
  exports2.IconButton = IconButton;
  exports2.InfinityList = InfinityList;
  exports2.InlineInput = InlineInput;
  exports2.Input = Input;
  exports2.JsonTree = JsonTree;
  exports2.JsonTreeNode = JsonTreeNode;
  exports2.Kbd = Kbd;
  exports2.List = List;
  exports2.ListHeader = ListHeader;
  exports2.ListItem = ListItem;
  exports2.MODIFIER_KEY = MODIFIER_KEY;
  exports2.Menu = Menu;
  exports2.MotionGroup = MotionGroup;
  exports2.MotionItem = MotionItem;
  exports2.NestedMenu = NestedMenu;
  exports2.Notification = Notification;
  exports2.Notifications = Notifications;
  exports2.NotificationsContext = NotificationsContext;
  exports2.OverlayContext = OverlayContext;
  exports2.OverlayPortal = OverlayPortal;
  exports2.OverlayTrigger = OverlayTrigger;
  exports2.PageTitle = PageTitle;
  exports2.Pager = Pager;
  exports2.PaletteBlocks = PaletteBlocks;
  exports2.Pluralize = Pluralize;
  exports2.Popover = Popover;
  exports2.Portal = Portal;
  exports2.PrimaryHeading = PrimaryHeading;
  exports2.Radio = Radio;
  exports2.RadioGroup = RadioGroup;
  exports2.RangeDouble = RangeDouble;
  exports2.RangeSingle = RangeSingle;
  exports2.RangeTooltip = RangeTooltip;
  exports2.Redact = Redact;
  exports2.RefreshIcon = RefreshIcon;
  exports2.SecondaryHeading = SecondaryHeading;
  exports2.Select = Select;
  exports2.SelectInput = SelectInput;
  exports2.SelectInputChip = SelectInputChip;
  exports2.SelectMenu = SelectMenu;
  exports2.SelectOption = SelectOption;
  exports2.ShadowBlocks = ShadowBlocks;
  exports2.SmallHeading = SmallHeading;
  exports2.Sort = Sort;
  exports2.SpacingBlocks = SpacingBlocks;
  exports2.Stack = Stack;
  exports2.Sub = Sub;
  exports2.Tab = Tab;
  exports2.TabList = TabList;
  exports2.TabPanel = TabPanel;
  exports2.Tabs = Tabs;
  exports2.Text = Text;
  exports2.Textarea = Textarea;
  exports2.ThemeContext = ThemeContext;
  exports2.ThemeProvider = ThemeProvider;
  exports2.Toggle = Toggle;
  exports2.Tooltip = Tooltip;
  exports2.Tree = Tree;
  exports2.TreeNode = TreeNode;
  exports2.TypographyBlocks = TypographyBlocks;
  exports2.TypographyLetterBlock = TypographyLetterBlock;
  exports2.TypographySizeBlock = TypographySizeBlock;
  exports2.TypographyWeightBlock = TypographyWeightBlock;
  exports2.VerticalSpacer = VerticalSpacer;
  exports2.arrowTheme = arrowTheme;
  exports2.avatarGroupTheme = avatarGroupTheme;
  exports2.avatarTheme = avatarTheme;
  exports2.badgeTheme = badgeTheme;
  exports2.blockTheme = blockTheme;
  exports2.breadcrumbsTheme = breadcrumbsTheme;
  exports2.buttonTheme = buttonTheme;
  exports2.calendarRangeTheme = calendarRangeTheme;
  exports2.calendarTheme = calendarTheme;
  exports2.cardTheme = cardTheme;
  exports2.checkboxTheme = checkboxTheme;
  exports2.chipTheme = chipTheme;
  exports2.cloneDeep = cloneDeep$1;
  exports2.cn = cn;
  exports2.collapseTheme = collapseTheme;
  exports2.colorPalette = colorPalette;
  exports2.commandPaletteInputTheme = commandPaletteInputTheme;
  exports2.commandPaletteItemTheme = commandPaletteItemTheme;
  exports2.commandPaletteSectionTheme = commandPaletteSectionTheme;
  exports2.commandPaletteTheme = commandPaletteTheme;
  exports2.contextMenuTheme = contextMenuTheme;
  exports2.createOptions = createOptions;
  exports2.cssVarsCommandPaletteInputTheme = cssVarsCommandPaletteInputTheme;
  exports2.cssVarsCommandPaletteItemTheme = cssVarsCommandPaletteItemTheme;
  exports2.cssVarsCommandPaletteSectionTheme = cssVarsCommandPaletteSectionTheme;
  exports2.cssVarsSelectInputTheme = cssVarsSelectInputTheme;
  exports2.cssVarsSelectMenuTheme = cssVarsSelectMenuTheme;
  exports2.dateFormatTheme = dateFormatTheme;
  exports2.dialogTheme = dialogTheme;
  exports2.dividerTheme = dividerTheme;
  exports2.dotsLoaderTheme = dotsLoaderTheme;
  exports2.drawerTheme = drawerTheme;
  exports2.ellipsisTheme = ellipsisTheme;
  exports2.extendComponentTheme = extendComponentTheme;
  exports2.extendTheme = extendTheme;
  exports2.extractTheme = extractTheme;
  exports2.formatDuration = formatDuration;
  exports2.formatRelative = formatRelative;
  exports2.formatSize = formatSize;
  exports2.getDifference = getDifference;
  exports2.getGroups = getGroups;
  exports2.getHotkeyText = getHotkeyText;
  exports2.getInterval = getInterval;
  exports2.getItemsRange = getItemsRange;
  exports2.getNextDirection = getNextDirection;
  exports2.getPageRange = getPageRange;
  exports2.groupVariants = groupVariants;
  exports2.inputTheme = inputTheme;
  exports2.isObject = isObject$1;
  exports2.jsonTreeTheme = jsonTreeTheme;
  exports2.kbdTheme = kbdTheme;
  exports2.keyNameToCode = keyNameToCode;
  exports2.legacyArrowTheme = legacyArrowTheme;
  exports2.legacyAvatarGroupTheme = legacyAvatarGroupTheme;
  exports2.legacyAvatarTheme = legacyAvatarTheme;
  exports2.legacyBadgeTheme = legacyBadgeTheme;
  exports2.legacyBlockTheme = legacyBlockTheme;
  exports2.legacyBreadcrumbTheme = legacyBreadcrumbTheme;
  exports2.legacyButtonTheme = legacyButtonTheme;
  exports2.legacyCalendarRangeTheme = legacyCalendarRangeTheme;
  exports2.legacyCalendarTheme = legacyCalendarTheme;
  exports2.legacyCardTheme = legacyCardTheme;
  exports2.legacyCheckboxTheme = legacyCheckboxTheme;
  exports2.legacyChipTheme = legacyChipTheme;
  exports2.legacyCollapseTheme = legacyCollapseTheme;
  exports2.legacyCommandPaletteTheme = legacyCommandPaletteTheme;
  exports2.legacyContextMenuTheme = legacyContextMenuTheme;
  exports2.legacyDateFormatTheme = legacyDateFormatTheme;
  exports2.legacyDialogTheme = legacyDialogTheme;
  exports2.legacyDividerTheme = legacyDividerTheme;
  exports2.legacyDrawerTheme = legacyDrawerTheme;
  exports2.legacyEllipsisTheme = legacyEllipsisTheme;
  exports2.legacyInputTheme = legacyInputTheme;
  exports2.legacyJsonTreeTheme = legacyJsonTreeTheme;
  exports2.legacyKbdTheme = legacyKbdTheme;
  exports2.legacyListTheme = legacyListTheme;
  exports2.legacyLoaderTheme = legacyLoaderTheme;
  exports2.legacyMenuTheme = legacyMenuTheme;
  exports2.legacyNotificationTheme = legacyNotificationTheme;
  exports2.legacyPagerTheme = legacyPagerTheme;
  exports2.legacyPopoverTheme = legacyPopoverTheme;
  exports2.legacyRadioTheme = legacyRadioTheme;
  exports2.legacyRangeTheme = legacyRangeTheme;
  exports2.legacyRedactTheme = legacyRedactTheme;
  exports2.legacySelectTheme = legacySelectTheme;
  exports2.legacySortTheme = legacySortTheme;
  exports2.legacyStackTheme = legacyStackTheme;
  exports2.legacyTabsTheme = legacyTabsTheme;
  exports2.legacyTextareaTheme = legacyTextareaTheme;
  exports2.legacyThemeVars = legacyThemeVars;
  exports2.legacyToggleTheme = legacyToggleTheme;
  exports2.legacyTooltipTheme = legacyTooltipTheme;
  exports2.legacyTreeTheme = legacyTreeTheme;
  exports2.legacyTypographyTheme = legacyTypographyTheme;
  exports2.legacyVerticalSpacerTheme = legacyVerticalSpacerTheme;
  exports2.listTheme = listTheme;
  exports2.menuTheme = menuTheme;
  exports2.mergeDeep = mergeDeep;
  exports2.notificationTheme = notificationTheme;
  exports2.pagerTheme = pagerTheme;
  exports2.pluralize = pluralize;
  exports2.popoverTheme = popoverTheme;
  exports2.portals = portals;
  exports2.radioTheme = radioTheme;
  exports2.rangeTheme = rangeTheme;
  exports2.redactTheme = redactTheme;
  exports2.safeFormat = safeFormat;
  exports2.selectInputTheme = selectInputTheme;
  exports2.selectMenuTheme = selectMenuTheme;
  exports2.selectTheme = selectTheme;
  exports2.sortTheme = sortTheme;
  exports2.stackTheme = stackTheme;
  exports2.tabsTheme = tabsTheme;
  exports2.textareaTheme = textareaTheme;
  exports2.theme = theme;
  exports2.toggleTheme = toggleTheme;
  exports2.tooltipTheme = tooltipTheme;
  exports2.treeTheme = treeTheme;
  exports2.typographyTheme = typographyTheme;
  exports2.useComponentTheme = useComponentTheme;
  exports2.useCursor = useCursor;
  exports2.useDialog = useDialog;
  exports2.useDrawer = useDrawer;
  exports2.useExitListener = useExitListener;
  exports2.useId = useId;
  exports2.useInfinityList = useInfinityList;
  exports2.useMenu = useMenu;
  exports2.useNotification = useNotification;
  exports2.useOverlay = useOverlay;
  exports2.usePosition = usePosition;
  exports2.useTheme = useTheme;
  exports2.useTooltipState = useTooltipState;
  exports2.useUserSelect = useUserSelect;
  exports2.useWidth = useWidth;
  exports2.verticalSpacerTheme = verticalSpacerTheme;
  exports2.verticalVariant = verticalVariant;
  Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
});
//# sourceMappingURL=index.umd.cjs.map
