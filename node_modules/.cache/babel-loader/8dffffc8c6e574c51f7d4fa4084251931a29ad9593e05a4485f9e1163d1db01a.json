{"ast":null,"code":"\"use client\";\n\nfunction A(o, r, t) {\n  let n = t && t.state;\n  n && (typeof n == \"object\" && r.copy(n, r), o.state = () => r.copy(r, {}));\n}\nfunction c(o, r) {\n  let t = () => (o.next() >>> 0) / 4294967296;\n  return t.double = () => {\n    let n, i, s;\n    do n = o.next() >>> 11, i = (o.next() >>> 0) / 4294967296, s = (n + i) / (1 << 21); while (s === 0);\n    return s;\n  }, t.int32 = () => o.next() | 0, t.quick = t, A(t, o, r), t;\n}\nfunction X(o, r) {\n  let t = new f(o),\n    n = () => t.next();\n  return n.double = () => n() + (n() * 2097152 | 0) * 11102230246251565e-32, n.int32 = () => t.next() * 4294967296 | 0, n.quick = n, A(n, t, r), n;\n}\nvar f = class {\n  constructor(r) {\n    r == null && (r = +new Date());\n    let t = 4022871197;\n    this.c = 1, this.s0 = n(\" \"), this.s1 = n(\" \"), this.s2 = n(\" \"), this.s0 -= n(r), this.s0 < 0 && (this.s0 += 1), this.s1 -= n(r), this.s1 < 0 && (this.s1 += 1), this.s2 -= n(r), this.s2 < 0 && (this.s2 += 1);\n    function n(i) {\n      i = String(i);\n      for (let s = 0; s < i.length; s++) {\n        t += i.charCodeAt(s);\n        let e = .02519603282416938 * t;\n        t = e >>> 0, e -= t, e *= t, t = e >>> 0, e -= t, t += e * 4294967296;\n      }\n      return (t >>> 0) * 23283064365386963e-26;\n    }\n  }\n  next() {\n    let {\n        c: r,\n        s0: t,\n        s1: n,\n        s2: i\n      } = this,\n      s = 2091639 * t + r * 23283064365386963e-26;\n    return this.s0 = n, this.s1 = i, this.s2 = s - (this.c = s | 0);\n  }\n  copy(r, t) {\n    return t.c = r.c, t.s0 = r.s0, t.s1 = r.s1, t.s2 = r.s2, t;\n  }\n};\nfunction j(o, r) {\n  let t = new p(o);\n  return c(t, r);\n}\nvar p = class {\n  constructor(r) {\n    r == null && (r = +new Date());\n    let t = \"\";\n    this.x = 0, this.y = 0, this.z = 0, this.w = 0, r === (r | 0) ? this.x = r : t += r;\n    for (let n = 0; n < t.length + 64; n++) this.x ^= t.charCodeAt(n) | 0, this.next();\n  }\n  next() {\n    let {\n        x: r,\n        y: t,\n        z: n,\n        w: i\n      } = this,\n      s = r ^ r << 11;\n    return this.x = t, this.y = n, this.z = i, this.w = i ^ (i >>> 19 ^ s ^ s >>> 8);\n  }\n  copy(r, t) {\n    return t.x = r.x, t.y = r.y, t.z = r.z, t.w = r.w, t;\n  }\n};\nfunction k(o, r) {\n  let t = new w(o);\n  return c(t, r);\n}\nvar w = class {\n  constructor(r) {\n    r == null && (r = +new Date());\n    let t = \"\";\n    this.x = 0, this.y = 0, this.z = 0, this.w = 0, this.v = 0, r === (r | 0) ? this.x = r : t += r;\n    for (let n = 0; n < t.length + 64; n++) this.x ^= t.charCodeAt(n) | 0, n == t.length && (this.d = this.x << 10 ^ this.x >>> 4), this.next();\n  }\n  next() {\n    let {\n        x: r,\n        y: t,\n        z: n,\n        w: i,\n        v: s,\n        d: e\n      } = this,\n      h = r ^ r >>> 2;\n    return this.x = t, this.y = n, this.z = i, this.w = s, (this.d = e + 362437 | 0) + (this.v = s ^ s << 4 ^ (h ^ h << 1)) | 0;\n  }\n  copy(r, t) {\n    return t.x = r.x, t.y = r.y, t.z = r.z, t.w = r.w, t.v = r.v, t.d = r.d, t;\n  }\n};\nfunction z(o, r) {\n  let t = new m(o);\n  return c(t, r);\n}\nvar m = class {\n  constructor(r) {\n    r == null && (r = +new Date());\n    var t,\n      n,\n      i = [];\n    if (r === (r | 0)) n = i[0] = r;else for (r = \"\" + r, t = 0; t < r.length; ++t) i[t & 7] = i[t & 7] << 15 ^ r.charCodeAt(t) + i[t + 1 & 7] << 13;\n    for (; i.length < 8;) i.push(0);\n    for (t = 0; t < 8 && i[t] === 0; ++t);\n    for (t == 8 ? n = i[7] = -1 : n = i[t], this.x = i, this.i = 0, t = 256; t > 0; --t) this.next();\n  }\n  next() {\n    let r,\n      t,\n      {\n        x: n,\n        i\n      } = this;\n    return r = n[i], r ^= r >>> 7, t = r ^ r << 24, r = n[i + 1 & 7], t ^= r ^ r >>> 10, r = n[i + 3 & 7], t ^= r ^ r >>> 3, r = n[i + 4 & 7], t ^= r ^ r << 7, r = n[i + 7 & 7], r = r ^ r << 13, t ^= r ^ r << 9, n[i] = t, this.i = i + 1 & 7, t;\n  }\n  copy(r, t) {\n    return t.x = [...r.x], t.i = r.i, t;\n  }\n};\nfunction S(o, r) {\n  let t = new y(o);\n  return c(t, r);\n}\nvar y = class {\n  constructor(r) {\n    r == null && (r = +new Date());\n    let t,\n      n,\n      i,\n      s,\n      e,\n      h = [],\n      l = 128;\n    for (r === (r | 0) ? (n = r, r = null) : (r = r + \"\\0\", n = 0, l = Math.max(l, r.length)), i = 0, s = -32; s < l; ++s) r && (n ^= r.charCodeAt((s + 32) % r.length)), s === 0 && (e = n), n ^= n << 10, n ^= n >>> 15, n ^= n << 4, n ^= n >>> 13, s >= 0 && (e = e + 1640531527 | 0, t = h[s & 127] ^= n + e, i = t == 0 ? i + 1 : 0);\n    for (i >= 128 && (h[(r && r.length || 0) & 127] = -1), i = 127, s = 4 * 128; s > 0; --s) n = h[i + 34 & 127], t = h[i = i + 1 & 127], n ^= n << 13, t ^= t << 17, n ^= n >>> 15, t ^= t >>> 12, h[i] = n ^ t;\n    this.w = e, this.X = h, this.i = i;\n  }\n  next() {\n    let r,\n      t,\n      {\n        w: n,\n        X: i,\n        i: s\n      } = this;\n    return this.w = n = n + 1640531527 | 0, t = i[s + 34 & 127], r = i[s = s + 1 & 127], t ^= t << 13, r ^= r << 17, t ^= t >>> 15, r ^= r >>> 12, t = i[s] = t ^ r, this.i = s, t + (n ^ n >>> 16) | 0;\n  }\n  copy(r, t) {\n    return t.i = r.i, t.w = r.w, t.X = [...r.X], t;\n  }\n};\nfunction T(o, r) {\n  let t = new b(o);\n  return c(t, r);\n}\nvar b = class {\n  constructor(r) {\n    r == null && (r = +new Date());\n    let t = \"\";\n    this.a = 0, this.b = 0, this.c = -1640531527, this.d = 1367130551, r === Math.floor(r) ? (this.a = r / 4294967296 | 0, this.b = r | 0) : t += r;\n    for (let n = 0; n < t.length + 20; n++) this.b ^= t.charCodeAt(n) | 0, this.next();\n  }\n  next() {\n    let {\n      a: r,\n      b: t,\n      c: n,\n      d: i\n    } = this;\n    return t = t << 25 ^ t >>> 7 ^ n, n = n - i | 0, i = i << 24 ^ i >>> 8 ^ r, r = r - t | 0, this.b = t = t << 20 ^ t >>> 12 ^ n, this.c = n = n - i | 0, this.d = i << 16 ^ n >>> 16 ^ r, this.a = r - t | 0;\n  }\n  copy(r, t) {\n    return t.a = r.a, t.b = r.b, t.c = r.c, t.d = r.d, t;\n  }\n};\nfunction D(o, r) {\n  let t = new _(o),\n    n = () => t.next();\n  return n.double = n, n.int32 = () => t.g(4) | 0, n.quick = () => t.g(4) / 4294967296, A(n, t, r), n;\n}\nvar U = 281474976710656,\n  E = 4503599627370496,\n  M = 9007199254740992,\n  _ = class {\n    constructor(r) {\n      r == null && (r = +new Date());\n      let t = this.mixkey(r, []),\n        n,\n        i,\n        s,\n        e = [],\n        h = t.length;\n      for (this.i = this.j = n = i = 0, this.S = e, h || (t = [h++]); n <= 255;) e[n] = n++;\n      for (n = 0; n <= 255; n++) e[n] = e[i = 255 & i + t[n % h] + (s = e[n])], e[i] = s;\n      this.g(256);\n    }\n    next() {\n      let r = this.g(6),\n        t = U,\n        n = 0;\n      for (; r < E;) r = (r + n) * 256, t *= 256, n = this.g(1);\n      for (; r >= M;) r /= 2, t /= 2, n >>>= 1;\n      return (r + n) / t;\n    }\n    g(r) {\n      let t,\n        n = 0,\n        {\n          i,\n          j: s,\n          S: e\n        } = this;\n      for (; r--;) t = e[i = 255 & i + 1], n = n * 256 + e[255 & (e[i] = e[s = 255 & s + t]) + (e[s] = t)];\n      return this.i = i, this.j = s, n;\n    }\n    copy(r, t) {\n      return t.i = r.i, t.j = r.j, t.S = [...r.S], t;\n    }\n    mixkey(r, t) {\n      r = r + \"\";\n      let n = 0,\n        i = 0;\n      for (; i < r.length;) t[255 & i] = 255 & (n ^= t[255 & i] * 19) + r.charCodeAt(i++);\n      return t;\n    }\n  };\nvar P = o => X(o)(),\n  R = o => D(o)(),\n  q = o => T(o)(),\n  u = o => j(o)(),\n  B = o => S(o)(),\n  H = o => z(o)(),\n  C = o => k(o)();\nfunction O(o, r, t) {\n  let n, i, s;\n  if (r == 0) n = i = s = t;else {\n    let e = t < .5 ? t * (1 + r) : t + r - t * r,\n      h = 2 * t - e;\n    n = $(h, e, o + 1 / 3), i = $(h, e, o), s = $(h, e, o - 1 / 3);\n  }\n  return [n * 255, i * 255, s * 255];\n}\nfunction $(o, r, t) {\n  return t < 0 && (t += 1), t > 1 && (t -= 1), t < 1 / 6 ? o + (r - o) * 6 * t : t < 1 / 2 ? r : t < 2 / 3 ? o + (r - o) * (2 / 3 - t) * 6 : o;\n}\nvar v = {\n    saturation: 75,\n    lightness: 50,\n    alpha: 100\n  },\n  L = 1.618033988749895;\nfunction I(o, r = {}) {\n  let {\n      saturation: t,\n      lightness: n,\n      alpha: i\n    } = a(r),\n    s = r.algorithm || u,\n    e = g(o, s);\n  return `hsl(\n    ${Math.floor(e * 360)}\n    , ${t}%, ${n}%, ${i}%\n  )`;\n}\nfunction W(o, r = {}) {\n  let {\n      saturation: t,\n      lightness: n,\n      alpha: i\n    } = a(r),\n    s = r.algorithm || u,\n    e = g(o, s),\n    [h, l, x] = O(e, t / 100, n / 100);\n  return `rgba(${h}, ${l}, ${x}, ${i / 100})`;\n}\nfunction F(o, r = {}) {\n  let {\n      saturation: t,\n      lightness: n,\n      alpha: i\n    } = a(r),\n    s = r.algorithm || C,\n    e = g(o, s);\n  return `hsl(\n    ${Math.floor(e * 360)}\n    , ${t}%, ${n}%, ${i}%\n  )`;\n}\nfunction G(o, r = {}) {\n  let {\n      saturation: t,\n      lightness: n,\n      alpha: i\n    } = a(r),\n    s = r.algorithm || u,\n    e = g(o, s),\n    [h, l, x] = O(e, t / 100, n / 100);\n  return `rgba(${h}, ${l}, ${x}, ${i / 100})`;\n}\nfunction d(o, r = 45, t = {}, n = {}) {\n  return `linear-gradient(\n    ${r}deg,\n    ${I(o, t)},\n    ${F(o, n)}\n  )`;\n}\nfunction a(o = {}) {\n  let {\n    s: r,\n    l: t,\n    a: n,\n    saturation: i = r != null ? r : v.saturation,\n    lightness: s = t != null ? t : v.lightness,\n    alpha: e = n != null ? n : v.alpha\n  } = o;\n  return {\n    saturation: i,\n    lightness: s,\n    alpha: e\n  };\n}\nfunction g(o, r) {\n  return (r(o) + 1 / L) % 1;\n}\nexport { P as Alea, R as Arc4, q as Tychei, u as Xor128, B as Xor4096, H as Xorshift7, C as Xorwow, v as defaultColorOptions, I as generateColor, W as generateColorRGB, d as generateGradient, F as generateSecondaryColor, G as generateSecondaryColorRGB };","map":{"version":3,"names":["A","o","r","t","n","state","copy","c","prng","next","double","i","s","int32","quick","X","f","constructor","Date","s0","s1","s2","String","length","charCodeAt","e","j","p","x","y","z","w","k","v","d","h","m","push","S","l","Math","max","T","b","a","floor","D","_","g","U","E","M","mixkey","P","R","q","u","B","H","C","O","$","saturation","lightness","alpha","L","I","algorithm","W","F","G","Alea","Arc4","Tychei","Xor128","Xor4096","Xorshift7","Xorwow","defaultColorOptions","generateColor","generateColorRGB","generateGradient","generateSecondaryColor","generateSecondaryColorRGB"],"sources":["/Users/jenn/Desktop/info340/project-jsorror/node_modules/@marko19907/string-to-color/node_modules/esm-seedrandom/lib/_common.mjs","/Users/jenn/Desktop/info340/project-jsorror/node_modules/@marko19907/string-to-color/node_modules/esm-seedrandom/lib/alea.mjs","/Users/jenn/Desktop/info340/project-jsorror/node_modules/@marko19907/string-to-color/node_modules/esm-seedrandom/lib/xor128.mjs","/Users/jenn/Desktop/info340/project-jsorror/node_modules/@marko19907/string-to-color/node_modules/esm-seedrandom/lib/xorwow.mjs","/Users/jenn/Desktop/info340/project-jsorror/node_modules/@marko19907/string-to-color/node_modules/esm-seedrandom/lib/xorshift7.mjs","/Users/jenn/Desktop/info340/project-jsorror/node_modules/@marko19907/string-to-color/node_modules/esm-seedrandom/lib/xor4096.mjs","/Users/jenn/Desktop/info340/project-jsorror/node_modules/@marko19907/string-to-color/node_modules/esm-seedrandom/lib/tychei.mjs","/Users/jenn/Desktop/info340/project-jsorror/node_modules/@marko19907/string-to-color/node_modules/esm-seedrandom/lib/arc4.mjs","/Users/jenn/Desktop/info340/project-jsorror/node_modules/@marko19907/string-to-color/src/generators.ts","/Users/jenn/Desktop/info340/project-jsorror/node_modules/@marko19907/string-to-color/src/color-conversion-algorithms.ts","/Users/jenn/Desktop/info340/project-jsorror/node_modules/@marko19907/string-to-color/src/index.ts"],"sourcesContent":["\nexport function _prng_restore(prng, xg, opts) {\n  let state = opts && opts.state;\n  if (state) {\n    if (typeof(state) == 'object') xg.copy(state, xg);\n    prng.state = () => xg.copy(xg, {});\n  }\n}\n\nexport function _prng_xor_core(xg, opts) {\n  let prng = () => (xg.next() >>> 0) / 0x100000000;\n\n  prng.double = () => {\n    let top, bot, result\n    do {\n      top = xg.next() >>> 11;\n      bot = (xg.next() >>> 0) / 0x100000000;\n      result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n\n  prng.int32 = () => xg.next() | 0;\n\n  prng.quick = prng;\n\n  _prng_restore(prng, xg, opts);\n  return prng;\n}\n","// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {_prng_restore} from './_common.mjs'\n\nexport default prng_alea;\nexport function prng_alea(seed, opts) {\n  let xg = new AleaGen(seed);\n\n  let prng = () => xg.next();\n\n  prng.double = () =>\n    prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n\n  prng.int32 = () => (xg.next() * 0x100000000) | 0;\n\n  prng.quick = prng;\n\n  _prng_restore(prng, xg, opts);\n  return prng\n}\n\nclass AleaGen {\n  constructor(seed) {\n    if (seed == null) seed = +(new Date);\n\n    let n = 0xefc8249d;\n\n    // Apply the seeding algorithm from Baagoe.\n    this.c = 1;\n    this.s0 = mash(' ');\n    this.s1 = mash(' ');\n    this.s2 = mash(' ');\n    this.s0 -= mash(seed);\n    if (this.s0 < 0) { this.s0 += 1; }\n    this.s1 -= mash(seed);\n    if (this.s1 < 0) { this.s1 += 1; }\n    this.s2 -= mash(seed);\n    if (this.s2 < 0) { this.s2 += 1; }\n\n    function mash(data) {\n      data = String(data);\n      for (let i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        let h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    }\n  }\n\n  next() {\n    let {c,s0,s1,s2} = this\n    let t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n    this.s0 = s1;\n    this.s1 = s2;\n    return this.s2 = t - (this.c = t | 0);\n  }\n\n  copy(f, t) {\n    t.c = f.c;\n    t.s0 = f.s0;\n    t.s1 = f.s1;\n    t.s2 = f.s2;\n    return t;\n  }\n}\n","// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\nimport {_prng_xor_core} from './_common.mjs'\n\nexport default prng_xor128;\nexport function prng_xor128(seed, opts) {\n  let xg = new Xor128Gen(seed);\n  return _prng_xor_core(xg, opts);\n}\n\nclass Xor128Gen {\n  constructor(seed) {\n    if (seed == null) seed = +(new Date);\n\n    let strseed = '';\n\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.w = 0;\n\n    if (seed === (seed | 0)) {\n      // Integer seed.\n      this.x = seed;\n    } else {\n      // String seed.\n      strseed += seed;\n    }\n\n    // Mix in string seed, then discard an initial batch of 64 values.\n    for (let k = 0; k < strseed.length + 64; k++) {\n      this.x ^= strseed.charCodeAt(k) | 0;\n      this.next();\n    }\n  }\n\n  next() {\n    let {x,y,z,w} = this\n    let t = x ^ (x << 11);\n    this.x = y;\n    this.y = z;\n    this.z = w;\n    return this.w = w ^ ((w >>> 19) ^ t ^ (t >>> 8));\n  };\n\n  copy(f, t) {\n    t.x = f.x;\n    t.y = f.y;\n    t.z = f.z;\n    t.w = f.w;\n    return t;\n  }\n}\n\n","// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\nimport {_prng_xor_core} from './_common.mjs'\n\nexport default prng_xorwow\nexport function prng_xorwow(seed, opts) {\n  let xg = new XorWowGen(seed);\n  return _prng_xor_core(xg, opts);\n}\n\nclass XorWowGen {\n  constructor(seed) {\n    if (seed == null) seed = +(new Date);\n\n    let strseed = '';\n\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.w = 0;\n    this.v = 0;\n\n    if (seed === (seed | 0)) {\n      // Integer seed.\n      this.x = seed;\n    } else {\n      // String seed.\n      strseed += seed;\n    }\n\n    // Mix in string seed, then discard an initial batch of 64 values.\n    for (let k = 0; k < strseed.length + 64; k++) {\n      this.x ^= strseed.charCodeAt(k) | 0;\n      if (k == strseed.length) {\n        this.d = this.x << 10 ^ this.x >>> 4;\n      }\n      this.next();\n    }\n  }\n\n  next() {\n    let {x,y,z,w,v,d} = this\n    let t = (x ^ (x >>> 2));\n    this.x = y;\n    this.y = z;\n    this.z = w;\n    this.w = v;\n    return (this.d = (d + 362437 | 0)) +\n       (this.v = (v ^ (v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  copy(f, t) {\n    t.x = f.x;\n    t.y = f.y;\n    t.z = f.z;\n    t.w = f.w;\n    t.v = f.v;\n    t.d = f.d;\n    return t;\n  }\n}\n","// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\nimport {_prng_xor_core} from './_common.mjs'\n\nexport default prng_xorshift7\nexport function prng_xorshift7(seed, opts) {\n  let xg = new XorShift7Gen(seed);\n  return _prng_xor_core(xg, opts);\n}\n\n\nclass XorShift7Gen {\n  constructor(seed) {\n    if (seed == null) seed = +(new Date);\n\n    var j, w, x = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = x[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        x[j & 7] = (x[j & 7] << 15) ^\n            (seed.charCodeAt(j) + x[(j + 1) & 7] << 13);\n      }\n    }\n\n    // Enforce an array length of 8, not all zeroes.\n    while (x.length < 8) x.push(0);\n    for (j = 0; j < 8 && x[j] === 0; ++j);\n    if (j == 8) w = x[7] = -1; else w = x[j];\n\n    this.x = x;\n    this.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      this.next();\n    }\n  }\n\n  next() {\n    // Update xor generator.\n    let t, v, w, {x,i} = this\n    t = x[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = x[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = x[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = x[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = x[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    x[i] = v;\n    this.i = (i + 1) & 7;\n    return v;\n  };\n\n  copy(f, t) {\n    t.x = [... f.x];\n    t.i = f.i;\n    return t;\n  }\n}\n","// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\nimport {_prng_xor_core} from './_common.mjs'\n\nexport default prng_xor4096\nexport function prng_xor4096(seed, opts) {\n  let xg = new Xor4096Gen(seed);\n  return _prng_xor_core(xg, opts);\n}\n\n\nclass Xor4096Gen {\n  constructor(seed) {\n    if (seed == null) seed = +(new Date);\n\n    let t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    this.w = w;\n    this.X = X;\n    this.i = i;\n  }\n\n  next() {\n    let t, v, {w, X, i} = this\n    // Update Weyl generator.\n    this.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    this.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  }\n\n  copy(f, t) {\n    t.i = f.i;\n    t.w = f.w;\n    t.X = [... f.X]\n    return t;\n  }\n}\n","// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\nimport {_prng_xor_core} from './_common.mjs'\n\nexport default prng_tychei\nexport function prng_tychei(seed, opts) {\n  let xg = new TycheiGen(seed);\n  return _prng_xor_core(xg, opts);\n}\n\nclass TycheiGen {\n  constructor(seed) {\n    if (seed == null) seed = +(new Date);\n\n    let strseed = '';\n\n    this.a = 0;\n    this.b = 0;\n    this.c = 2654435769 | 0;\n    this.d = 1367130551;\n\n    if (seed === Math.floor(seed)) {\n      // Integer seed.\n      this.a = (seed / 0x100000000) | 0;\n      this.b = seed | 0;\n    } else {\n      // String seed.\n      strseed += seed;\n    }\n\n    // Mix in string seed, then discard an initial batch of 64 values.\n    for (let k = 0; k < strseed.length + 20; k++) {\n      this.b ^= strseed.charCodeAt(k) | 0;\n      this.next();\n    }\n  }\n\n  next() {\n    let {a,b,c,d} = this\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    this.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    this.c = c = (c - d) | 0;\n    this.d = (d << 16) ^ (c >>> 16) ^ a;\n    return this.a = (a - b) | 0;\n  };\n\n  copy(f, t) {\n    t.a = f.a;\n    t.b = f.b;\n    t.c = f.c;\n    t.d = f.d;\n    return t;\n  }\n}\n\n\n/* The following is non-inverted tyche, which has better internal\n * bit diffusion, but which is about 25% slower than tyche-i in JS.\n *\n\nclass TycheiGenAlt extends TycheiGen {\n  next() {\n    let {a,b,c,d} = this\n    a = (a + b | 0) >>> 0;\n    d = d ^ a; d = d << 16 ^ d >>> 16;\n    c = c + d | 0;\n    b = b ^ c; b = b << 12 ^ d >>> 20;\n    this.a = a = a + b | 0;\n    d = d ^ a; this.d = d = d << 8 ^ d >>> 24;\n    this.c = c = c + d | 0;\n    b = b ^ c;\n    return this.b = (b << 7 ^ b >>> 25);\n  }\n}\n*/\n","/*\nCopyright 2019 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\nimport {_prng_restore} from './_common.mjs'\n\nexport default prng_arc4;\nexport function prng_arc4(seed, opts) {\n  let xg = new ARC4Gen(seed);\n  let prng = () => xg.next();\n\n  prng.double = prng;\n\n  prng.int32 = () => xg.g(4) | 0;\n\n  prng.quick = () => xg.g(4) / 0x100000000;\n\n  _prng_restore(prng, xg, opts);\n  return prng\n}\n\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\n\n//\n// The following constants are related to IEEE 754 limits.\n//\n\n// const width = 256 // each RC4 output is 0 <= x < 256\n// const chunks = 6 // at least six RC4 outputs for each double\nconst _arc4_startdenom = 281474976710656     // 256 ** 6 == width ** chunks\nconst _arc4_significance = 4503599627370496  // 2 ** 52 significant digits in a double\nconst _arc4_overflow = 9007199254740992      // 2 ** 53 == significance * 2\n\n\nclass ARC4Gen {\n  constructor(seed) {\n    if (seed == null) seed = +(new Date);\n\n    let key = this.mixkey(seed, [])\n    let i,j,t, S=[], keylen = key.length\n    this.i = this.j = i = j = 0\n    this.S = S\n\n    // The empty key [] is treated as [0].\n    if (!keylen) { key = [keylen++]; }\n\n    // Set up S using the standard key scheduling algorithm.\n    while (i <= 0xff) {\n      S[i] = i++;\n    }\n    for (i = 0; i <= 0xff; i++) {\n      S[i] = S[j = 0xff & (j + key[i % keylen] + (t = S[i]))];\n      S[j] = t;\n    }\n\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n    this.g(256)\n  }\n\n  next() {\n    // This function returns a random double in [0, 1) that contains\n    // randomness in every bit of the mantissa of the IEEE 754 value.\n\n    let n = this.g(6);                  // Start with a numerator n < 2 ^ 48\n    let d = _arc4_startdenom;           //   and denominator d = 2 ^ 48.\n    let x = 0;                          //   and no 'extra last byte'.\n\n    while (n < _arc4_significance) {    // Fill up all significant digits (2 ** 52)\n      n = (n + x) * 256;                //   by shifting numerator and\n      d *= 256;                         //   denominator and generating a\n      x = this.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= _arc4_overflow) {       // To avoid rounding past overflow, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  }\n\n  g(count) {\n    // The \"g\" method returns the next (count) outputs as one number.\n    let t, r = 0, {i,j,S} = this;\n    while (count--) {\n      t = S[i = 0xff & (i + 1)];\n      r = r * 256 + S[0xff & ((S[i] = S[j = 0xff & (j + t)]) + (S[j] = t))];\n    }\n    this.i = i;\n    this.j = j;\n    return r;\n  }\n\n  copy(f, t) {\n    t.i = f.i;\n    t.j = f.j;\n    t.S = [... f.S]\n    return t;\n  }\n\n  mixkey(seed, key) {\n    seed = seed + ''\n    let smear=0, j=0;\n    while (j < seed.length) {\n      key[0xff & j] =\n        0xff & ((smear ^= key[0xff & j] * 19) + seed.charCodeAt(j++));\n    }\n    return key\n  }\n}\n","import {\n  prng_alea,\n  prng_arc4,\n  prng_tychei,\n  prng_xor128,\n  prng_xor4096,\n  prng_xorshift7,\n  prng_xorwow,\n} from \"esm-seedrandom\";\n\nexport type Algo = (seed: string) => number;\n\n/**\n * The Alea PRNG algorithm, based on a simple multiplicative congruential generator.\n * It is very fast (★★★★★) and has a good balance between simplicity and statistical properties.\n * @param seed - The input seed string.\n * @returns The next random number in the sequence.\n */\nexport const Alea: Algo = (seed) => prng_alea(seed)();\n\n/**\n * The Arc4 (Alleged RC4) PRNG algorithm, based on a stream cipher.\n * It is slow (★★☆☆☆) and generates random numbers with good statistical properties but has been considered cryptographically insecure.\n * @param seed - The input seed string.\n * @returns The next random number in the sequence.\n */\nexport const Arc4: Algo = (seed) => prng_arc4(seed)();\n\n/**\n * The Tychei PRNG algorithm, based on a variant of the Xorshift family.\n * It is fast (★★★★☆) and has good statistical properties.\n * @param seed - The input seed string.\n * @returns The next random number in the sequence.\n */\nexport const Tychei: Algo = (seed) => prng_tychei(seed)();\n\n/**\n * The Xor128 PRNG algorithm, based on the Xorshift family.\n * It is very fast (★★★★★), simple, and statistically good but has a relatively small state space.\n * @param seed - The input seed string.\n * @returns The next random number in the sequence.\n */\nexport const Xor128: Algo = (seed) => prng_xor128(seed)();\n\n/**\n * The Xor4096 PRNG algorithm, based on the Xorshift family.\n * It is fast (★★★★☆) and has a larger state space than Xor128, making it more suitable for applications requiring more randomness.\n * @param seed - The input seed string.\n * @returns The next random number in the sequence.\n */\nexport const Xor4096: Algo = (seed) => prng_xor4096(seed)();\n\n/**\n * The Xorshift7 PRNG algorithm, based on the Xorshift family.\n * Somewhat slower than others (★★★☆☆), has good statistical properties, and a larger state space than Xor128.\n * @param seed - The input seed string.\n * @returns The next random number in the sequence.\n */\nexport const Xorshift7: Algo = (seed) => prng_xorshift7(seed)();\n\n/**\n * The Xorwow PRNG algorithm, a combination of a linear feedback shift register and Xorshift.\n * It is fast (★★★★☆), simple, and has good statistical properties.\n * @param seed - The input seed string.\n * @returns The next random number in the sequence.\n */\nexport const Xorwow: Algo = (seed) => prng_xorwow(seed)();\n","/**\n * Converts an HSL color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space\n * and taken from https://gist.github.com/mjackson/5311256\n * Assumes h, s, and l are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param h hue\n * @param s The saturation\n * @param l The lightness\n * @return The RGB representation\n */\nexport function hslToRgb(h: number, s: number, l: number): number[] {\n  let r, g, b;\n\n  if (s == 0) {\n    r = g = b = l; // achromatic\n  } else {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return [r * 255, g * 255, b * 255];\n}\n\nfunction hue2rgb(p: number, q: number, t: number): number {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1 / 6) return p + (q - p) * 6 * t;\n  if (t < 1 / 2) return q;\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n  return p;\n}\n","import { Algo, Xor128, Xorwow } from \"./generators\";\nimport { hslToRgb } from \"./color-conversion-algorithms\";\n\nexport {\n  Algo,\n  Alea,\n  Arc4,\n  Tychei,\n  Xor128,\n  Xor4096,\n  Xorshift7,\n  Xorwow,\n} from \"./generators\";\n\ntype Only<T, U> = {\n  [P in keyof T]: T[P];\n} & {\n  [P in keyof U]?: never;\n};\n\ntype Either<T, U> = Only<T, U> | Only<U, T>;\n\ntype Saturation = Either<\n  {\n    /**\n     * Short form of the saturation property, range must be between 0 and 100, inclusive.\n     */\n    s?: number;\n  },\n  {\n    /**\n     * Long form of the saturation property, range must be between 0 and 100, inclusive.\n     */\n    saturation?: number;\n  }\n>;\n\ntype Lightness = Either<\n  {\n    /**\n     * Short form of the lightness property, range must be between 0 and 100, inclusive.\n     */\n    l?: number;\n  },\n  {\n    /**\n     * Long form of the lightness property, range must be between 0 and 100, inclusive.\n     */\n    lightness?: number;\n  }\n>;\n\ntype Alpha = Either<\n  {\n    /**\n     * Short form of the alpha property, range must be between 0 and 100, inclusive.\n     */\n    a?: number;\n  },\n  {\n    /**\n     * Long form of the alpha property, range must be between 0 and 100, inclusive.\n     */\n    alpha?: number;\n  }\n>;\n\n/**\n * The options for the color generation.\n * It is possible to use the short form of the options (s, l, a) or the long form (saturation, lightness, alpha),\n * but not both at the same time. If both are present, the full property name takes precedence. Range must be between 0 and 100, inclusive.\n */\nexport type ColorOptions = {\n  /**\n   * The algorithm to use for the color generation.\n   */\n  algorithm?: Algo;\n} & Saturation &\n  Lightness &\n  Alpha;\n\nexport const defaultColorOptions: ColorOptions = {\n  saturation: 75,\n  lightness: 50,\n  alpha: 100,\n};\n\nconst PHI = 1.618033988749895;\n\n/**\n * Generates a random color from the given string, saturation and lightness can be controlled.\n * Inspired by https://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/\n * @param input The input to generate the color from\n * @param options The custom options to use for the color generation\n */\nexport function generateColor(\n  input: string,\n  options: ColorOptions = {},\n): string {\n  const { saturation, lightness, alpha } = getOptions(options);\n  const algorithm = options.algorithm || Xor128;\n  const h = calculateHue(input, algorithm);\n  return `hsl(\n    ${Math.floor(h * 360)}\n    , ${saturation}%, ${lightness}%, ${alpha}%\n  )`;\n}\n\n/**\n * Generates a random color from the given string in the RGB format, same as {@link generateColor} but in the RGB format.\n * @param input The input string to generate the color from\n * @param options The custom options to use for the color generation\n * @returns The generated color in the RGB format\n */\nexport function generateColorRGB(\n  input: string,\n  options: ColorOptions = {},\n): string {\n  const { saturation, lightness, alpha } = getOptions(options);\n  const algorithm = options.algorithm || Xor128;\n  const h = calculateHue(input, algorithm);\n  const [r, g, b] = hslToRgb(h, saturation! / 100, lightness! / 100);\n  return `rgba(${r}, ${g}, ${b}, ${alpha! / 100})`;\n}\n\n/**\n * Same as generateColor() but with a different default algorithm that produces a different color.\n * @param input The input to generate the color from\n * @param options The custom options to use for the color generation\n */\nexport function generateSecondaryColor(\n  input: string,\n  options: ColorOptions = {},\n): string {\n  const { saturation, lightness, alpha } = getOptions(options);\n  const algorithm = options.algorithm || Xorwow;\n  const h = calculateHue(input, algorithm);\n  return `hsl(\n    ${Math.floor(h * 360)}\n    , ${saturation}%, ${lightness}%, ${alpha}%\n  )`;\n}\n\n/**\n * Same as {@link generateColorRGB} but with a different default algorithm that produces a different color.\n * @param input The input to generate the color from\n * @param options The custom options to use for the color generation\n */\nexport function generateSecondaryColorRGB(\n  input: string,\n  options: ColorOptions = {},\n): string {\n  const { saturation, lightness, alpha } = getOptions(options);\n  const algorithm = options.algorithm || Xor128;\n  const h = calculateHue(input, algorithm);\n  const [r, g, b] = hslToRgb(h, saturation! / 100, lightness! / 100);\n  return `rgba(${r}, ${g}, ${b}, ${alpha! / 100})`;\n}\n\n/**\n * Generates a linear gradient from the given input.\n * @param input The input to generate the gradient from\n * @param angle The angle of the gradient\n * @param options The custom options to use for the color generation of the primary color\n * @param secondaryOptions The custom options to use for the color generation of the secondary color\n */\nexport function generateGradient(\n  input: string,\n  angle = 45,\n  options: ColorOptions = {},\n  secondaryOptions: ColorOptions = {},\n): string {\n  return `linear-gradient(\n    ${angle}deg,\n    ${generateColor(input, options)},\n    ${generateSecondaryColor(input, secondaryOptions)}\n  )`;\n}\n\n/**\n * Extracts the saturation, lightness, and alpha values from the given options and fills in the missing values with the default values.\n * @param options The options to extract the values from\n * @returns An object containing the extracted saturation, lightness, and alpha values\n */\nfunction getOptions(options: ColorOptions = {}) {\n  const {\n    s,\n    l,\n    a,\n    saturation = s ?? defaultColorOptions.saturation,\n    lightness = l ?? defaultColorOptions.lightness,\n    alpha = a ?? defaultColorOptions.alpha,\n  } = options;\n  return { saturation, lightness, alpha };\n}\n\n/**\n * Calculates the hue for a given input string.\n * @param input The input string to calculate the hue for\n * @param algorithm The algorithm to use for the calculation\n * @returns The calculated hue\n */\nfunction calculateHue(input: string, algorithm: Algo): number {\n  return (algorithm(input) + 1 / PHI) % 1;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}