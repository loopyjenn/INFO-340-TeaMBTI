{"ast":null,"code":"const $945d8fe7644f77c5$export$c2f15f629432a51d = [\"ctrl\", \"alt\", \"meta\", \"shift\"];\nconst $945d8fe7644f77c5$export$a2af00130072d5c1 = \"__0_1_2_3_4_5_6_7_8_9_a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z_ _`_'_\\\"_~_!_@_#_$_%_^_&_*_(_)_._-_+_=_[_]_{_}_<_>_,_/_?_;_:_\\\\_|_capslock_numlock_enter_tab_arrowdown_arrowleft_arrowright_arrowup_end_home_pagedown_pageup_backspace_delete_insert_escape_f1_f2_f3_f4_f5_f6_f7_f8_f9_f10_f11_f12_f13_f14_f15_f16_f17_f18_f19_f20_f21_f22_f23\".split(\"_\");\n$945d8fe7644f77c5$export$a2af00130072d5c1[1] = \"_\";\nconst $945d8fe7644f77c5$export$e45cb6485273080e = {};\nfor (const [i, c] of $945d8fe7644f77c5$export$a2af00130072d5c1.entries()) $945d8fe7644f77c5$export$e45cb6485273080e[c] = i;\nconst $945d8fe7644f77c5$export$9af93bb9e9126a2 = {\n  space: \" \",\n  plus: \"+\",\n  up: \"arrowup\",\n  down: \"arrowdown\",\n  left: \"arrowleft\",\n  right: \"arrowright\",\n  esc: \"escape\"\n};\nconst $945d8fe7644f77c5$export$ec514b5495dfb13a = 4;\nconst $945d8fe7644f77c5$export$2f4b53374d74dab0 = 9;\nconst $945d8fe7644f77c5$export$fa74f81f6fd55da8 = 8;\nconst $945d8fe7644f77c5$export$440ece60bb656d1c = 4;\nconst $945d8fe7644f77c5$export$e81f1a492ca706db = 2;\nconst $945d8fe7644f77c5$export$e16f40decae6aceb = 1;\nconst $945d8fe7644f77c5$export$8c6d6ddef5b40636 = $945d8fe7644f77c5$export$2f4b53374d74dab0 + $945d8fe7644f77c5$export$ec514b5495dfb13a;\nconst $945d8fe7644f77c5$export$c621bb932db11c84 = 2 ** $945d8fe7644f77c5$export$ec514b5495dfb13a;\nconst $945d8fe7644f77c5$export$df1afef858d2d2a1 = 2 ** $945d8fe7644f77c5$export$8c6d6ddef5b40636;\nconst $945d8fe7644f77c5$export$4e5c8f1854de11bd = 2 ** (2 * $945d8fe7644f77c5$export$8c6d6ddef5b40636);\nconst $945d8fe7644f77c5$export$5a85c95189ba5484 = 2 ** (3 * $945d8fe7644f77c5$export$8c6d6ddef5b40636);\nfunction $d1a4178f437f25ce$export$e0c709538cb8ae18(key) {\n  let parts;\n  if (key === \"+\") return [\"+\"];\n  if (\"+\" == key.slice(-1)) {\n    parts = key.slice(0, -2).split(\"+\");\n    parts.push(\"+\");\n  } else parts = key.split(\"+\");\n  return parts.map(x => (0, $945d8fe7644f77c5$export$9af93bb9e9126a2)[x] || x);\n}\nfunction $d1a4178f437f25ce$export$a0511d6cbab6225d(key) {\n  const parts = new Set(key);\n  let code = (0, $945d8fe7644f77c5$export$e45cb6485273080e)[key[key.length - 1].toLowerCase()] || 0;\n  for (const modifier of (0, $945d8fe7644f77c5$export$c2f15f629432a51d)) code = 2 * code + (parts.has(modifier) ? 1 : 0);\n  return code;\n}\nfunction $d1a4178f437f25ce$export$b983cdf2c2084305(encodedKey) {\n  const charCode = $d1a4178f437f25ce$export$d95305c1c4c40d1d(encodedKey);\n  const modifiersCode = $d1a4178f437f25ce$export$a10907c21fef597b(encodedKey);\n  const key = [];\n  if (modifiersCode & (0, $945d8fe7644f77c5$export$fa74f81f6fd55da8)) key.push(\"ctrl\");\n  if (modifiersCode & (0, $945d8fe7644f77c5$export$440ece60bb656d1c)) key.push(\"alt\");\n  if (modifiersCode & (0, $945d8fe7644f77c5$export$e81f1a492ca706db)) key.push(\"meta\");\n  if (modifiersCode & (0, $945d8fe7644f77c5$export$e16f40decae6aceb)) key.push(\"shift\");\n  const c = (0, $945d8fe7644f77c5$export$a2af00130072d5c1)[charCode];\n  if (c) key.push(c);\n  return key;\n}\nfunction $d1a4178f437f25ce$export$d95305c1c4c40d1d(encodedKey) {\n  return encodedKey >> (0, $945d8fe7644f77c5$export$ec514b5495dfb13a);\n}\nfunction $d1a4178f437f25ce$export$a10907c21fef597b(encodedKey) {\n  return encodedKey % (0, $945d8fe7644f77c5$export$c621bb932db11c84);\n}\nfunction $d1a4178f437f25ce$export$f7511445e7083e2c(previousKey, newKey) {\n  if (previousKey === undefined) return false;\n  if ($d1a4178f437f25ce$export$d95305c1c4c40d1d(previousKey) > 0) return false;\n  const previousModifiers = $d1a4178f437f25ce$export$a10907c21fef597b(previousKey);\n  const newModifiers = $d1a4178f437f25ce$export$a10907c21fef597b(newKey);\n  if (previousModifiers === newModifiers && $d1a4178f437f25ce$export$d95305c1c4c40d1d(newKey) === 0) return false;\n  return (previousModifiers & $d1a4178f437f25ce$export$a10907c21fef597b(newKey)) === previousModifiers;\n}\nfunction $e37d79d2c9101d6e$export$c30017717ce2168e(key) {\n  let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"keydown\";\n  const parts = (0, $d1a4178f437f25ce$export$e0c709538cb8ae18)(key);\n  let eventKey = parts.at(-1);\n  if ((0, $945d8fe7644f77c5$export$9af93bb9e9126a2)[eventKey] !== undefined) eventKey = (0, $945d8fe7644f77c5$export$9af93bb9e9126a2)[eventKey];\n  if (eventKey === \"ctrl\") eventKey = \"Control\";\n  if (eventKey === \"alt\") eventKey = \"Alt\";\n  if (eventKey === \"meta\") eventKey = \"Meta\";\n  if (eventKey === \"shift\") eventKey = \"Shift\";\n  return new KeyboardEvent(type, {\n    ctrlKey: parts.includes(\"ctrl\"),\n    altKey: parts.includes(\"alt\"),\n    metaKey: parts.includes(\"meta\"),\n    shiftKey: parts.includes(\"shift\"),\n    key: eventKey\n  });\n}\nfunction $e37d79d2c9101d6e$export$81dbaac8d5335cb6(event) {\n  let code = (0, $945d8fe7644f77c5$export$e45cb6485273080e)[event.key.toLowerCase()] || 0;\n  for (const modifier of (0, $945d8fe7644f77c5$export$c2f15f629432a51d)) code = 2 * code + (event[\"\".concat(modifier, \"Key\")] ? 1 : 0);\n  return code;\n}\nfunction $06051cacf3d04ec1$export$b109b10146e8f9ba(sequence) {\n  return sequence.map((0, $d1a4178f437f25ce$export$e0c709538cb8ae18));\n}\nfunction $06051cacf3d04ec1$export$4cb205243eb10110(sequence) {\n  if (sequence.length > 4) throw \"Can't encode sequence of more than 4 keys!\";\n  let code = 0;\n  for (const key of sequence) code = code * (0, $945d8fe7644f77c5$export$df1afef858d2d2a1) + (0, $d1a4178f437f25ce$export$a0511d6cbab6225d)(key);\n  return code;\n}\nfunction $06051cacf3d04ec1$export$52460a43741a23b4(sequence) {\n  const keys = [];\n  while (sequence > 0) {\n    keys.unshift((0, $d1a4178f437f25ce$export$b983cdf2c2084305)(sequence % 8192));\n    sequence = sequence >> 13;\n  }\n  return keys;\n}\nfunction $06051cacf3d04ec1$export$6199ce3afbf6d7f6(seq) {\n  if (seq < (0, $945d8fe7644f77c5$export$df1afef858d2d2a1)) return 1;\n  if (seq < (0, $945d8fe7644f77c5$export$4e5c8f1854de11bd)) return 2;\n  if (seq < (0, $945d8fe7644f77c5$export$5a85c95189ba5484)) return 3;\n  return 4;\n}\nfunction $06051cacf3d04ec1$export$8cb364356ea2d022(keys) {\n  const result = [];\n  let sequenceCode = 0;\n  let multiplier = 0;\n  for (let i = keys.length - 1; i >= 0; i--) {\n    sequenceCode = 2 ** multiplier * keys[i] + sequenceCode;\n    multiplier = multiplier + 13;\n    result.push(sequenceCode);\n  }\n  return result;\n}\nfunction $11b591822c30f2b7$export$e6a0daad8304de() {\n  let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    history: [],\n    historySize: 0,\n    bindings: new Map(),\n    disabledSequenceCodes: new Set(),\n    ...data\n  };\n}\nfunction $11b591822c30f2b7$export$2666eec10feb506f(state, sequence, fn) {\n  const sequenceCode = (0, $06051cacf3d04ec1$export$4cb205243eb10110)((0, $06051cacf3d04ec1$export$b109b10146e8f9ba)(sequence));\n  if (!state.bindings.has(sequenceCode)) state.bindings.set(sequenceCode, new Set());\n  state.bindings.get(sequenceCode).add(fn);\n  return $11b591822c30f2b7$export$3b88b12a1b2479e8(state);\n}\nfunction $11b591822c30f2b7$export$164d2c5f74d5827c(state, sequence, fn) {\n  const sequenceCode = (0, $06051cacf3d04ec1$export$4cb205243eb10110)((0, $06051cacf3d04ec1$export$b109b10146e8f9ba)(sequence));\n  const fns = state.bindings.get(sequenceCode);\n  if (fns) {\n    fns.delete(fn);\n    if (fns.size == 0) state.bindings.delete(sequenceCode);\n  }\n  return $11b591822c30f2b7$export$3b88b12a1b2479e8(state);\n}\nfunction $11b591822c30f2b7$export$445cc5a591c8a8a2(state, sequence) {\n  const sequenceCode = (0, $06051cacf3d04ec1$export$4cb205243eb10110)((0, $06051cacf3d04ec1$export$b109b10146e8f9ba)(sequence));\n  state.disabledSequenceCodes.delete(sequenceCode);\n  return state;\n}\nfunction $11b591822c30f2b7$export$21b222afdafd214b(state, sequence) {\n  const sequenceCode = (0, $06051cacf3d04ec1$export$4cb205243eb10110)((0, $06051cacf3d04ec1$export$b109b10146e8f9ba)(sequence));\n  state.disabledSequenceCodes.add(sequenceCode);\n  return state;\n}\nfunction $11b591822c30f2b7$export$1191ff934e9b979c(state, event) {\n  const key = (0, $e37d79d2c9101d6e$export$81dbaac8d5335cb6)(event);\n  const previousKey = state.history.at(-1);\n  if ((0, $d1a4178f437f25ce$export$f7511445e7083e2c)(previousKey, key)) state.history.pop();\n  state.history.push(key);\n  if (state.history.length > state.historySize) state.history.shift();\n  return state;\n}\nfunction $11b591822c30f2b7$export$a84ac9f6f555b44a(state) {\n  const callbacks = [];\n  for (const sequenceCode of (0, $06051cacf3d04ec1$export$8cb364356ea2d022)(state.history)) {\n    if (state.disabledSequenceCodes.has(sequenceCode)) continue;\n    callbacks.push(...(state.bindings.get(sequenceCode) || []));\n  }\n  return callbacks;\n}\nfunction $11b591822c30f2b7$export$d6e5ca10785815df(state, event) {\n  state = $11b591822c30f2b7$export$1191ff934e9b979c(state, event);\n  const fns = $11b591822c30f2b7$export$a84ac9f6f555b44a(state);\n  for (const fn of fns) fn(event);\n  return [state, fns];\n}\nfunction $11b591822c30f2b7$export$3b88b12a1b2479e8(state) {\n  state.historySize = 0;\n  for (const code of state.bindings.keys()) state.historySize = Math.max(state.historySize, (0, $06051cacf3d04ec1$export$6199ce3afbf6d7f6)(code));\n  return state;\n}\nclass $3692663818ad2bcc$export$a428cd33b25d5283 {\n  add() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    const keys = args.slice(0, -1);\n    const fn = args.at(-1);\n    this.state = (0, $11b591822c30f2b7$export$2666eec10feb506f)(this.state, keys, fn);\n    return this;\n  }\n  remove() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    const keys = args.slice(0, -1);\n    const fn = args.at(-1);\n    this.state = (0, $11b591822c30f2b7$export$164d2c5f74d5827c)(this.state, keys, fn);\n    return this;\n  }\n  enable() {\n    for (var _len3 = arguments.length, keys = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      keys[_key3] = arguments[_key3];\n    }\n    this.state = (0, $11b591822c30f2b7$export$445cc5a591c8a8a2)(this.state, keys);\n    return this;\n  }\n  disable() {\n    for (var _len4 = arguments.length, keys = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      keys[_key4] = arguments[_key4];\n    }\n    this.state = (0, $11b591822c30f2b7$export$21b222afdafd214b)(this.state, keys);\n    return this;\n  }\n  handle(event) {\n    const [state, fns] = (0, $11b591822c30f2b7$export$d6e5ca10785815df)(this.state, event);\n    this.state = state;\n    return fns.length > 0;\n  }\n  constructor(state) {\n    this.state = state;\n    this.add = this.add.bind(this);\n    this.remove = this.remove.bind(this);\n    this.handle = this.handle.bind(this);\n  }\n}\nvar $b289af7168eb38ef$exports = {};\nfunction $3d193bcdb4e39103$export$2e2bcd8739ae039() {\n  return new (0, $3692663818ad2bcc$export$a428cd33b25d5283)((0, $11b591822c30f2b7$export$e6a0daad8304de)());\n}\nexport { $3d193bcdb4e39103$export$2e2bcd8739ae039 as default };","map":{"version":3,"names":["$945d8fe7644f77c5$export$c2f15f629432a51d","$945d8fe7644f77c5$export$a2af00130072d5c1","split","$945d8fe7644f77c5$export$e45cb6485273080e","i","c","entries","$945d8fe7644f77c5$export$9af93bb9e9126a2","space","plus","up","down","left","right","esc","$945d8fe7644f77c5$export$ec514b5495dfb13a","$945d8fe7644f77c5$export$2f4b53374d74dab0","$945d8fe7644f77c5$export$fa74f81f6fd55da8","$945d8fe7644f77c5$export$440ece60bb656d1c","$945d8fe7644f77c5$export$e81f1a492ca706db","$945d8fe7644f77c5$export$e16f40decae6aceb","$945d8fe7644f77c5$export$8c6d6ddef5b40636","$945d8fe7644f77c5$export$c621bb932db11c84","$945d8fe7644f77c5$export$df1afef858d2d2a1","$945d8fe7644f77c5$export$4e5c8f1854de11bd","$945d8fe7644f77c5$export$5a85c95189ba5484","$d1a4178f437f25ce$export$e0c709538cb8ae18","key","parts","slice","push","map","x","$d1a4178f437f25ce$export$a0511d6cbab6225d","Set","code","length","toLowerCase","modifier","has","$d1a4178f437f25ce$export$b983cdf2c2084305","encodedKey","charCode","$d1a4178f437f25ce$export$d95305c1c4c40d1d","modifiersCode","$d1a4178f437f25ce$export$a10907c21fef597b","$d1a4178f437f25ce$export$f7511445e7083e2c","previousKey","newKey","undefined","previousModifiers","newModifiers","$e37d79d2c9101d6e$export$c30017717ce2168e","type","arguments","eventKey","at","KeyboardEvent","ctrlKey","includes","altKey","metaKey","shiftKey","$e37d79d2c9101d6e$export$81dbaac8d5335cb6","event","concat","$06051cacf3d04ec1$export$b109b10146e8f9ba","sequence","$06051cacf3d04ec1$export$4cb205243eb10110","$06051cacf3d04ec1$export$52460a43741a23b4","keys","unshift","$06051cacf3d04ec1$export$6199ce3afbf6d7f6","seq","$06051cacf3d04ec1$export$8cb364356ea2d022","result","sequenceCode","multiplier","$11b591822c30f2b7$export$e6a0daad8304de","data","history","historySize","bindings","Map","disabledSequenceCodes","$11b591822c30f2b7$export$2666eec10feb506f","state","fn","set","get","add","$11b591822c30f2b7$export$3b88b12a1b2479e8","$11b591822c30f2b7$export$164d2c5f74d5827c","fns","delete","size","$11b591822c30f2b7$export$445cc5a591c8a8a2","$11b591822c30f2b7$export$21b222afdafd214b","$11b591822c30f2b7$export$1191ff934e9b979c","pop","shift","$11b591822c30f2b7$export$a84ac9f6f555b44a","callbacks","$11b591822c30f2b7$export$d6e5ca10785815df","Math","max","$3692663818ad2bcc$export$a428cd33b25d5283","_len","args","Array","_key","remove","_len2","_key2","enable","_len3","_key3","disable","_len4","_key4","handle","constructor","bind","$3d193bcdb4e39103$export$2e2bcd8739ae039"],"sources":["/Users/jenn/Desktop/info340/project-jsorror/node_modules/ctrl-keys/src/index.ts","/Users/jenn/Desktop/info340/project-jsorror/node_modules/ctrl-keys/src/Handler.ts","/Users/jenn/Desktop/info340/project-jsorror/node_modules/ctrl-keys/src/state.ts","/Users/jenn/Desktop/info340/project-jsorror/node_modules/ctrl-keys/src/event.ts","/Users/jenn/Desktop/info340/project-jsorror/node_modules/ctrl-keys/src/key.ts","/Users/jenn/Desktop/info340/project-jsorror/node_modules/ctrl-keys/src/constants.ts","/Users/jenn/Desktop/info340/project-jsorror/node_modules/ctrl-keys/src/sequence.ts","/Users/jenn/Desktop/info340/project-jsorror/node_modules/ctrl-keys/src/types.ts"],"sourcesContent":["import {Handler} from './Handler'\nimport {createState} from './state'\n\nexport * from './types'\n\nexport default function createHandler() {\n  return new Handler(createState())\n}\n","import {Callback, HandlerInterface, State, Binding, Sequence} from './types'\nimport {addBinding, disableSequence, enableSequence, handleEvent, removeBinding} from './state'\n\nexport class Handler implements HandlerInterface {\n  constructor(protected state: State) {\n    this.add = this.add.bind(this)\n    this.remove = this.remove.bind(this)\n    this.handle = this.handle.bind(this)\n  }\n\n  add(...args: Binding): this {\n    const keys = args.slice(0, -1) as Sequence\n    const fn = args.at(-1) as Callback\n    this.state = addBinding(this.state, keys, fn)\n    return this\n  }\n\n  remove(...args: Binding): this {\n    const keys = args.slice(0, -1) as Sequence\n    const fn = args.at(-1) as Callback\n    this.state = removeBinding(this.state, keys, fn)\n    return this\n  }\n\n  enable(...keys: Sequence): this {\n    this.state = enableSequence(this.state, keys)\n    return this\n  }\n\n  disable(...keys: Sequence): this {\n    this.state = disableSequence(this.state, keys)\n    return this\n  }\n\n  handle(event: KeyboardEvent) {\n    const [state, fns] = handleEvent(this.state, event)\n    this.state = state\n    return fns.length > 0\n  }\n}\n","import {encodeEvent} from './event'\nimport {shouldOverride} from './key'\nimport {Callback, State, Sequence} from './types'\nimport {encodeSequence, getEncodedSequencesFromHistory, getSequenceSize, normalizeSequence} from './sequence'\n\nexport function createState(data: Partial<State> = {}): State {\n  return {\n    history: [],\n    historySize: 0,\n    bindings: new Map(),\n    disabledSequenceCodes: new Set(),\n    ...data,\n  }\n}\n\nexport function addBinding(state: State, sequence: Sequence, fn: Callback): State {\n  const sequenceCode = encodeSequence(normalizeSequence(sequence))\n  if (!state.bindings.has(sequenceCode)) {\n    state.bindings.set(sequenceCode, new Set())\n  }\n  state.bindings.get(sequenceCode)!.add(fn)\n  return updateHistorySize(state)\n}\n\nexport function removeBinding(state: State, sequence: Sequence, fn: Callback): State {\n  const sequenceCode = encodeSequence(normalizeSequence(sequence))\n  const fns = state.bindings.get(sequenceCode)\n  if (fns) {\n    fns.delete(fn)\n    if (fns.size == 0) {\n      state.bindings.delete(sequenceCode)\n    }\n  }\n  return updateHistorySize(state)\n}\n\nexport function enableSequence(state: State, sequence: Sequence): State {\n  const sequenceCode = encodeSequence(normalizeSequence(sequence))\n  state.disabledSequenceCodes.delete(sequenceCode)\n  return state\n}\n\nexport function disableSequence(state: State, sequence: Sequence): State {\n  const sequenceCode = encodeSequence(normalizeSequence(sequence))\n  state.disabledSequenceCodes.add(sequenceCode)\n  return state\n}\n\nexport function addEventToHistory(state: State, event: KeyboardEvent): State {\n  const key = encodeEvent(event)\n  const previousKey = state.history.at(-1)\n  if (shouldOverride(previousKey, key)) {\n    state.history.pop()\n  }\n  state.history.push(key)\n  if (state.history.length > state.historySize) {\n    state.history.shift()\n  }\n  return state\n}\n\nexport function getMatchingCallbacks(state: State): Callback[] {\n  const callbacks = []\n  for (const sequenceCode of getEncodedSequencesFromHistory(state.history)) {\n    if (state.disabledSequenceCodes.has(sequenceCode)) {\n      continue\n    }\n    callbacks.push(...(state.bindings.get(sequenceCode) || []))\n  }\n  return callbacks\n}\n\nexport function handleEvent(state: State, event: KeyboardEvent): [State, Callback[]] {\n  state = addEventToHistory(state, event)\n  const fns = getMatchingCallbacks(state)\n  for (const fn of fns) fn(event)\n  return [state, fns]\n}\n\nexport function updateHistorySize(state: State): State {\n  state.historySize = 0\n  for (const code of state.bindings.keys()) {\n    state.historySize = Math.max(state.historySize, getSequenceSize(code))\n  }\n  return state\n}\n","import {normalizeKey} from './key'\nimport {aliases, codes, modifiers} from './constants'\nimport {AliasCharacter, Character, EncodedKey, Key, KeyboardEventType, Modifier} from './types'\n\nexport function createEvent(key: Key, type: KeyboardEventType = 'keydown') {\n  const parts = normalizeKey(key) as Array<Character | Modifier>\n  let eventKey = parts.at(-1) as string\n  if (aliases[eventKey as AliasCharacter] !== undefined) eventKey = aliases[eventKey as AliasCharacter]\n  if (eventKey === 'ctrl') eventKey = 'Control'\n  if (eventKey === 'alt') eventKey = 'Alt'\n  if (eventKey === 'meta') eventKey = 'Meta'\n  if (eventKey === 'shift') eventKey = 'Shift'\n  return new KeyboardEvent(type, {\n    ctrlKey: parts.includes('ctrl'),\n    altKey: parts.includes('alt'),\n    metaKey: parts.includes('meta'),\n    shiftKey: parts.includes('shift'),\n    key: eventKey,\n  })\n}\n\nexport function encodeEvent(event: KeyboardEvent): EncodedKey {\n  let code = codes[event.key.toLowerCase()] || 0\n  for (const modifier of modifiers) {\n    code = 2 * code + (event[`${modifier}Key` as keyof KeyboardEvent] ? 1 : 0)\n  }\n  return code\n}\n","import {aliases, ALT_MASK, chars, codes, CTRL_MASK, META_MASK, modifiers, MODIFIERS_SIZE, MODIFIERS_UPPER_BOUND, SHIFT_MASK} from './constants'\nimport {EncodedKey, Key, NormalizedKey} from './types'\n\nexport function normalizeKey(key: Key): NormalizedKey {\n  let parts: string[]\n  if (key === '+') return ['+']\n  if ('+' == key.slice(-1)) {\n    parts = key.slice(0, -2).split('+')\n    parts.push('+')\n  } else {\n    parts = key.split('+')\n  }\n  return parts.map((x) => (aliases as any)[x] || x) as NormalizedKey\n}\n\nexport function encodeKey(key: NormalizedKey): EncodedKey {\n  const parts = new Set(key)\n  let code = codes[key[key.length - 1].toLowerCase()] || 0\n  for (const modifier of modifiers) {\n    code = 2 * code + (parts.has(modifier) ? 1 : 0)\n  }\n  return code\n}\n\nexport function decodeKey(encodedKey: EncodedKey): NormalizedKey {\n  const charCode = getCharacterCode(encodedKey)\n  const modifiersCode = getModifiersCode(encodedKey)\n  const key = []\n  if (modifiersCode & CTRL_MASK) key.push('ctrl')\n  if (modifiersCode & ALT_MASK) key.push('alt')\n  if (modifiersCode & META_MASK) key.push('meta')\n  if (modifiersCode & SHIFT_MASK) key.push('shift')\n  const c = chars[charCode]\n  if (c) key.push(c)\n  return key as any\n}\n\nexport function getCharacterCode(encodedKey: EncodedKey) {\n  return encodedKey >> MODIFIERS_SIZE\n}\n\nexport function getModifiersCode(encodedKey: EncodedKey) {\n  return encodedKey % MODIFIERS_UPPER_BOUND\n}\n\nexport function shouldOverride(previousKey: EncodedKey | undefined, newKey: EncodedKey) {\n  if (previousKey === undefined) return false\n  if (getCharacterCode(previousKey) > 0) return false\n  const previousModifiers = getModifiersCode(previousKey)\n  const newModifiers = getModifiersCode(newKey)\n  if (previousModifiers === newModifiers && getCharacterCode(newKey) === 0) return false\n  return (previousModifiers & getModifiersCode(newKey)) === previousModifiers\n}\n","import {AliasCharacter, Character} from './types'\n\nexport const modifiers = ['ctrl', 'alt', 'meta', 'shift'] as const\n\nexport const chars =\n  '__0_1_2_3_4_5_6_7_8_9_a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z_ _`_\\'_\"_~_!_@_#_$_%_^_&_*_(_)_._-_+_=_[_]_{_}_<_>_,_/_?_;_:_\\\\_|_capslock_numlock_enter_tab_arrowdown_arrowleft_arrowright_arrowup_end_home_pagedown_pageup_backspace_delete_insert_escape_f1_f2_f3_f4_f5_f6_f7_f8_f9_f10_f11_f12_f13_f14_f15_f16_f17_f18_f19_f20_f21_f22_f23'.split(\n    '_'\n  )\nchars[1] = '_'\n\nexport const codes: Record<string, number> = {}\nfor (const [i, c] of chars.entries()) codes[c] = i\n\nexport const aliases: Record<AliasCharacter, Character> = {\n  space: ' ',\n  plus: '+',\n  up: 'arrowup',\n  down: 'arrowdown',\n  left: 'arrowleft',\n  right: 'arrowright',\n  esc: 'escape',\n}\n\n/**\nWe want to encode keys and sequences of keys as numbers for performance\nA key code is 13 bits: XXXXXXXXXCAMS\n  XXXXXXXXX: 9 bits representing the character (event.key value).\n    A character can't have a code `0`, that's a special value.\n    We can have at most 511 different characters!\n  CAMS: 4 bits representing the modifiers `Ctrl`, `Alt`, `Meta` and `Shift` in this order.\nA sequence of keys is represented by the concatenation of codes of the keys.\n  An integer can safely be represented with 53 bits in Javascript `Number.MAX_SAFE_INTEGER`\n  Since every key takes 13bits, a sequence can at most contain 4 keys = 52 bits!\n*/\n\nexport const MODIFIERS_SIZE = 4\nexport const CHARACTER_SIZE = 9\nexport const CTRL_MASK = 0b1000\nexport const ALT_MASK = 0b0100\nexport const META_MASK = 0b0010\nexport const SHIFT_MASK = 0b0001\nexport const KEY_SIZE = CHARACTER_SIZE + MODIFIERS_SIZE\nexport const MODIFIERS_UPPER_BOUND = 2 ** MODIFIERS_SIZE\nexport const ONE_KEY_UPPER_BOUND = 2 ** KEY_SIZE\nexport const TWO_KEYS_UPPER_BOUND = 2 ** (2 * KEY_SIZE)\nexport const THREE_KEYS_UPPER_BOUND = 2 ** (3 * KEY_SIZE)\n","import {ONE_KEY_UPPER_BOUND, THREE_KEYS_UPPER_BOUND, TWO_KEYS_UPPER_BOUND} from './constants'\nimport {decodeKey, encodeKey, normalizeKey} from './key'\nimport {EncodedKey, EncodedSequence, NormalizedSequence, Sequence} from './types'\n\nexport function normalizeSequence(sequence: Sequence): NormalizedSequence {\n  return sequence.map(normalizeKey)\n}\n\nexport function encodeSequence(sequence: NormalizedSequence): EncodedSequence {\n  if (sequence.length > 4) throw `Can't encode sequence of more than 4 keys!`\n  let code = 0\n  for (const key of sequence) {\n    code = code * ONE_KEY_UPPER_BOUND + encodeKey(key)\n  }\n  return code\n}\n\nexport function decodeSequence(sequence: EncodedSequence): NormalizedSequence {\n  const keys = []\n  while (sequence > 0) {\n    keys.unshift(decodeKey(sequence % 2 ** 13))\n    sequence = sequence >> 13\n  }\n  return keys\n}\n\nexport function getSequenceSize(seq: EncodedSequence) {\n  if (seq < ONE_KEY_UPPER_BOUND) return 1\n  if (seq < TWO_KEYS_UPPER_BOUND) return 2\n  if (seq < THREE_KEYS_UPPER_BOUND) return 3\n  return 4\n}\n\n/*\ngetEncodedSequencesFromHistory([\n  keyCode('ctrl+a'), \n  keyCode('alt+b'),\n  keyCode('c')\n]) //=> [\n  seqCode(['c'])\n  seqCode(['alt+b', 'c'])\n  seqCode(['ctrl+a', 'alt+b', 'c'])\n]\n*/\nexport function getEncodedSequencesFromHistory(keys: EncodedKey[]) {\n  const result = []\n  let sequenceCode = 0\n  let multiplier = 0\n  for (let i = keys.length - 1; i >= 0; i--) {\n    sequenceCode = 2 ** multiplier * keys[i] + sequenceCode\n    multiplier = multiplier + 13\n    result.push(sequenceCode)\n  }\n  return result\n}\n","import {tuple} from 'just-types'\n\ntype Modifiers = ['ctrl', 'alt', 'meta', 'shift']\nexport type Modifier = Modifiers[number]\nexport type AliasCharacter = 'space' | 'plus' | 'up' | 'down' | 'left' | 'right' | 'esc'\n\nexport type Key = tuple.Join<NormalizedKey<Character | AliasCharacter>, '+'>\nexport type NormalizedKey<C extends string = Character> = tuple.SubArray<tuple.Permutation<Modifiers>> | [...tuple.SubArray<tuple.Permutation<Modifiers>>, C]\nexport type EncodedKey = number\n\nexport type Sequence = Key[]\nexport type NormalizedSequence = NormalizedKey[]\nexport type EncodedSequence = number\n\nexport type KeyboardEventType = 'keydown' | 'keyup'\nexport type Callback = (event?: KeyboardEvent) => any\nexport type KeyboardEventListener = (event: KeyboardEvent) => any\nexport type State = {\n  history: EncodedKey[]\n  historySize: number\n  disabledSequenceCodes: Set<EncodedSequence>\n  bindings: Map<EncodedSequence, Set<Callback>>\n}\n\nexport type Binding = [Key, Callback] | [Key, Key, Callback] | [Key, Key, Key, Callback] | [Key, Key, Key, Key, Callback]\nexport interface HandlerInterface {\n  add(...args: Binding): this\n  remove(...args: Binding): this\n  enable(...keys: Sequence): this\n  disable(...keys: Sequence): this\n  handle(event: KeyboardEvent): boolean\n}\n\nexport type Character =\n  | '_'\n  | '0'\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | 'a'\n  | 'b'\n  | 'c'\n  | 'd'\n  | 'e'\n  | 'f'\n  | 'g'\n  | 'h'\n  | 'i'\n  | 'j'\n  | 'k'\n  | 'l'\n  | 'm'\n  | 'n'\n  | 'o'\n  | 'p'\n  | 'q'\n  | 'r'\n  | 's'\n  | 't'\n  | 'u'\n  | 'v'\n  | 'w'\n  | 'x'\n  | 'y'\n  | 'z'\n  | ' '\n  | '`'\n  | \"'\"\n  | '\"'\n  | '~'\n  | '!'\n  | '@'\n  | '#'\n  | '$'\n  | '%'\n  | '^'\n  | '&'\n  | '*'\n  | '('\n  | ')'\n  | '.'\n  | '-'\n  | '+'\n  | '='\n  | '['\n  | ']'\n  | '{'\n  | '}'\n  | '<'\n  | '>'\n  | ','\n  | '/'\n  | '?'\n  | ';'\n  | ':'\n  | '\\\\'\n  | '|'\n  | 'capslock'\n  | 'numlock'\n  | 'enter'\n  | 'tab'\n  | 'arrowdown'\n  | 'arrowleft'\n  | 'arrowright'\n  | 'arrowup'\n  | 'end'\n  | 'home'\n  | 'pagedown'\n  | 'pageup'\n  | 'backspace'\n  | 'delete'\n  | 'insert'\n  | 'escape'\n  | 'f1'\n  | 'f2'\n  | 'f3'\n  | 'f4'\n  | 'f5'\n  | 'f6'\n  | 'f7'\n  | 'f8'\n  | 'f9'\n  | 'f10'\n  | 'f11'\n  | 'f12'\n  | 'f13'\n  | 'f14'\n  | 'f15'\n  | 'f16'\n  | 'f17'\n  | 'f18'\n  | 'f19'\n  | 'f20'\n  | 'f21'\n  | 'f22'\n  | 'f23'\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}