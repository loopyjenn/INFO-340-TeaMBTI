{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = function (name) {\n  var nameTokens = name.toUpperCase().split(/[\\s+-]/);\n  var tokens = [];\n  var initials = '';\n\n  // Remove all tokens after the first that starts with a non-letter character\n  for (var i = 0; i < nameTokens.length; i++) {\n    if (!LETTER_PATTERN.test(nameTokens[i])) {\n      break;\n    }\n    tokens.push(nameTokens[i]);\n  }\n  if (tokens.length >= 1) {\n    initials += tokens[0].substr(0, 1);\n  }\n  if (tokens.length >= 2) {\n    // Find first non-initial\n    var foundNonInitial = false;\n    for (var _i = 1; _i < tokens.length; _i++) {\n      if (!tokens[_i].match(/.\\./)) {\n        foundNonInitial = true;\n        initials += tokens[_i].substr(0, 1);\n        break;\n      }\n    }\n    if (!foundNonInitial) {\n      initials += tokens[1].substr(0, 1);\n    }\n  }\n  return initials;\n};\nvar LETTER_PATTERN = /^[a-z\\u00C0-\\u017F]/i;\n\n// Return initials for a given name\nmodule.exports = exports['default'];","map":{"version":3,"names":["name","nameTokens","toUpperCase","split","tokens","initials","i","length","LETTER_PATTERN","test","push","substr","foundNonInitial","_i","match"],"sources":["/Users/jenn/Desktop/info340/project-jsorror/node_modules/name-initials/src/name-initials.js"],"sourcesContent":["'use strict';\n\nconst LETTER_PATTERN = /^[a-z\\u00C0-\\u017F]/i;\n\n// Return initials for a given name\nexport default function(name){\n  const nameTokens = name.toUpperCase().split(/[\\s+-]/);\n  let tokens = [];\n\n  let initials = '';\n  \n  // Remove all tokens after the first that starts with a non-letter character\n  for (var i = 0; i < nameTokens.length; i++) {\n    if (!LETTER_PATTERN.test(nameTokens[i])) {\n      break;\n    }\n    \n    tokens.push(nameTokens[i]);\n  }\n\n  if (tokens.length >= 1) {\n    initials += tokens[0].substr(0,1);\n  }\n\n  if (tokens.length >= 2) {\n    // Find first non-initial\n    let foundNonInitial = false;\n\n    for (let i = 1; i < tokens.length; i++) {\n      if (!tokens[i].match(/.\\./)) {\n        foundNonInitial = true;\n        initials += tokens[i].substr(0,1);\n        break;\n      }\n    }\n\n    if (!foundNonInitial) {\n      initials += tokens[1].substr(0,1);\n    }\n  }\n\n  return initials;\n}"],"mappings":"AAAA;;;;;kBAKe,UAASA,IAAT,EAAc;EAC3B,IAAMC,UAAA,GAAaD,IAAA,CAAKE,WAAL,GAAmBC,KAAnB,CAAyB,QAAzB,CAAnB;EACA,IAAIC,MAAA,GAAS,EAAb;EAEA,IAAIC,QAAA,GAAW,EAAf;;EAEA;EACA,KAAK,IAAIC,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIL,UAAA,CAAWM,MAA/B,EAAuCD,CAAA,EAAvC,EAA4C;IAC1C,IAAI,CAACE,cAAA,CAAeC,IAAf,CAAoBR,UAAA,CAAWK,CAAX,CAApB,CAAL,EAAyC;MACvC;IACD;IAEDF,MAAA,CAAOM,IAAP,CAAYT,UAAA,CAAWK,CAAX,CAAZ;EACD;EAED,IAAIF,MAAA,CAAOG,MAAP,IAAiB,CAArB,EAAwB;IACtBF,QAAA,IAAYD,MAAA,CAAO,CAAP,EAAUO,MAAV,CAAiB,CAAjB,EAAmB,CAAnB,CAAZ;EACD;EAED,IAAIP,MAAA,CAAOG,MAAP,IAAiB,CAArB,EAAwB;IACtB;IACA,IAAIK,eAAA,GAAkB,KAAtB;IAEA,KAAK,IAAIC,EAAA,GAAI,CAAb,EAAgBA,EAAA,GAAIT,MAAA,CAAOG,MAA3B,EAAmCM,EAAA,EAAnC,EAAwC;MACtC,IAAI,CAACT,MAAA,CAAOS,EAAP,EAAUC,KAAV,CAAgB,KAAhB,CAAL,EAA6B;QAC3BF,eAAA,GAAkB,IAAlB;QACAP,QAAA,IAAYD,MAAA,CAAOS,EAAP,EAAUF,MAAV,CAAiB,CAAjB,EAAmB,CAAnB,CAAZ;QACA;MACD;IACF;IAED,IAAI,CAACC,eAAL,EAAsB;MACpBP,QAAA,IAAYD,MAAA,CAAO,CAAP,EAAUO,MAAV,CAAiB,CAAjB,EAAmB,CAAnB,CAAZ;IACD;EACF;EAED,OAAON,QAAP;AACD,C;AAxCD,IAAMG,cAAA,GAAiB,sBAAvB;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}