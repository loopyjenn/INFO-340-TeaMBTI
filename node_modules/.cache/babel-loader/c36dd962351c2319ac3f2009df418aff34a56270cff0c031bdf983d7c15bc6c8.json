{"ast":null,"code":"\"use strict\";\n\nvar defaults = {\n  ellipse: \"…\",\n  chars: [\" \", \"-\"],\n  max: 140,\n  truncate: true\n};\n\n/**\n * \"mac-style\" or \"harmonica\" ellipsize.\n * Ellipsizes a string in the middle instead of the end.\n *\n * Examples:\n *\n *      These are a few of my favourite things\n *      These are … my faourite things\n *      These are … faourite things\n *      hese … things\n *\n * @param {string} str\n * @param {Number} max\n * @param {string} ellipse\n * @param {string[]} chars\n * @returns {string} ellipsized\n */\n\nfunction ellipsizeMiddle(str, max, ellipse, chars) {\n  if (str <= max) return str;\n  if (max < 2) return str.slice(0, max - ellipse.length) + ellipse;\n  var maxLen = max - ellipse.length;\n  var middle = Math.floor(maxLen / 2);\n  var left = middle;\n  var right = str.length - middle;\n  for (var i = 0; i < middle; i++) {\n    var charLeft = str.charAt(i);\n    var posRight = str.length - i;\n    var charRight = str.charAt(posRight);\n    if (chars.indexOf(charLeft) !== -1) left = i;\n    if (chars.indexOf(charRight) !== -1) right = posRight;\n  }\n  return str.slice(0, left) + ellipse + str.slice(right);\n}\n\n/**\n *\n * @param {string} str\n * @param {number} max\n * @param {string} ellipse\n * @param {string[]} chars\n * @param {boolean} truncate\n * @returns\n */\nfunction ellipsize(str, max, ellipse, chars, truncate) {\n  if (str.length <= max) return str;\n  var maxLen = max - ellipse.length;\n  var end = maxLen;\n  for (var i = 0; i <= maxLen; i++) {\n    var char = str.charAt(i);\n    if (chars.indexOf(char) !== -1) end = i;\n  }\n\n  // no breakpoint found, but truncate\n  // was not allowed.\n  if (!truncate && end == maxLen) return \"\";\n  return str.slice(0, end) + ellipse;\n}\n\n/**\n * Ellipsize a string. Produces a string that is max lenght,\n * including the ellipse character.\n *\n * @param {string} str - String to ellipsize\n * @param {number} max - Max length including ellipsis\n * @param {Record<string, any>} [opts] - See additional options\n * @returns {string} ellipsized string\n */\nmodule.exports = function (str, max, opts) {\n  if (typeof str !== \"string\" || str.length === 0) return \"\";\n  if (max === 0) return \"\";\n  opts = opts || {};\n  for (var key in defaults) {\n    if (opts[key] === null || typeof opts[key] === \"undefined\") {\n      opts[key] = defaults[key];\n    }\n  }\n  opts.max = max || opts.max;\n  if (opts.truncate == \"middle\") return ellipsizeMiddle(str, opts.max, opts.ellipse, opts.chars);\n  return ellipsize(str, opts.max, opts.ellipse, opts.chars, opts.truncate);\n};\nmodule.exports.ellipsizeMiddle = ellipsizeMiddle;\nmodule.exports.ellipsize = ellipsize;","map":{"version":3,"names":["defaults","ellipse","chars","max","truncate","ellipsizeMiddle","str","slice","length","maxLen","middle","Math","floor","left","right","i","charLeft","charAt","posRight","charRight","indexOf","ellipsize","end","char","module","exports","opts","key"],"sources":["/Users/jenn/Desktop/info340/project-jsorror/node_modules/ellipsize/src/index.js"],"sourcesContent":["\"use strict\";\n\nvar defaults = {\n    ellipse: \"…\",\n    chars: [\" \", \"-\"],\n    max: 140,\n    truncate: true,\n};\n\n/**\n * \"mac-style\" or \"harmonica\" ellipsize.\n * Ellipsizes a string in the middle instead of the end.\n *\n * Examples:\n *\n *      These are a few of my favourite things\n *      These are … my faourite things\n *      These are … faourite things\n *      hese … things\n *\n * @param {string} str\n * @param {Number} max\n * @param {string} ellipse\n * @param {string[]} chars\n * @returns {string} ellipsized\n */\n\nfunction ellipsizeMiddle(str, max, ellipse, chars) {\n    if (str <= max) return str;\n    if (max < 2) return str.slice(0, max - ellipse.length) + ellipse;\n\n    var maxLen = max - ellipse.length;\n    var middle = Math.floor(maxLen / 2);\n\n    var left = middle;\n    var right = str.length - middle;\n\n    for (var i = 0; i < middle; i++) {\n        var charLeft = str.charAt(i);\n        var posRight = str.length - i;\n\n        var charRight = str.charAt(posRight);\n\n        if (chars.indexOf(charLeft) !== -1) left = i;\n        if (chars.indexOf(charRight) !== -1) right = posRight;\n    }\n\n    return str.slice(0, left) + ellipse + str.slice(right);\n}\n\n/**\n *\n * @param {string} str\n * @param {number} max\n * @param {string} ellipse\n * @param {string[]} chars\n * @param {boolean} truncate\n * @returns\n */\nfunction ellipsize(str, max, ellipse, chars, truncate) {\n    if (str.length <= max) return str;\n\n    var maxLen = max - ellipse.length;\n    var end = maxLen;\n\n    for (var i = 0; i <= maxLen; i++) {\n        var char = str.charAt(i);\n        if (chars.indexOf(char) !== -1) end = i;\n    }\n\n    // no breakpoint found, but truncate\n    // was not allowed.\n    if (!truncate && end == maxLen) return \"\";\n\n    return str.slice(0, end) + ellipse;\n}\n\n/**\n * Ellipsize a string. Produces a string that is max lenght,\n * including the ellipse character.\n *\n * @param {string} str - String to ellipsize\n * @param {number} max - Max length including ellipsis\n * @param {Record<string, any>} [opts] - See additional options\n * @returns {string} ellipsized string\n */\nmodule.exports = function (str, max, opts) {\n    if (typeof str !== \"string\" || str.length === 0) return \"\";\n    if (max === 0) return \"\";\n\n    opts = opts || {};\n\n    for (var key in defaults) {\n        if (opts[key] === null || typeof opts[key] === \"undefined\") {\n            opts[key] = defaults[key];\n        }\n    }\n\n    opts.max = max || opts.max;\n\n    if (opts.truncate == \"middle\")\n        return ellipsizeMiddle(str, opts.max, opts.ellipse, opts.chars);\n\n    return ellipsize(str, opts.max, opts.ellipse, opts.chars, opts.truncate);\n};\n\nmodule.exports.ellipsizeMiddle = ellipsizeMiddle;\nmodule.exports.ellipsize = ellipsize;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}